<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Steno &amp; PL</title>
    <description>This is a personal blog. Unless otherwise stated, the opinions
expressed here are my own, and not those of my past or present
employers.</description>
    <link>https://blog.waleedkhan.name/</link>
    <atom:link href="https://blog.waleedkhan.name/feed.xml" rel="self" type="application/rss+xml"/>
    <pubDate>Thu, 21 Oct 2021 11:17:53 -0500</pubDate>
    <lastBuildDate>Thu, 21 Oct 2021 11:17:53 -0500</lastBuildDate>
    <generator>Jekyll v4.2.0</generator>
    
      <item>
        <title>Lightning-fast rebases with git-move</title>
        <description>&lt;p&gt;You can use &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;git move&lt;/code&gt; as a drop-in 10x faster replacement for &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;git rebase&lt;/code&gt; (see &lt;a href=&quot;#timing&quot;&gt;the demo&lt;/a&gt;). The basic syntax is&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ git move -b &amp;lt;branch&amp;gt; -d &amp;lt;dest&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;How do I install it?&lt;/strong&gt; The &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;git move&lt;/code&gt; command is part of the &lt;a href=&quot;https://github.com/arxanas/git-branchless&quot;&gt;git-branchless&lt;/a&gt; suite of tools. See the &lt;a href=&quot;https://github.com/arxanas/git-branchless/wiki/Installation&quot;&gt;installation instructions&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;What does “rebase” mean?&lt;/strong&gt; In Git, to “rebase” a commit means to apply a commit’s diff against its parent commit as a patch to another target commit. Essentially, it “moves” the commit from one place to another.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;How much faster is it?&lt;/strong&gt; See &lt;a href=&quot;#timing&quot;&gt;Timing&lt;/a&gt;. If the branch is currently checked out, then 10x is a reasonable estimate. If the branch is not checked out, then it’s even faster.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Is performance the only added feature?&lt;/strong&gt; &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;git move&lt;/code&gt; also offers several other quality-of-life improvements over &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;git rebase&lt;/code&gt;. For example, it can move entire subtrees, not just branches. See &lt;a href=&quot;https://github.com/arxanas/git-branchless/wiki/Command:-git-move&quot;&gt;the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;git move&lt;/code&gt; documentation&lt;/a&gt; for more information.&lt;/p&gt;

&lt;hr /&gt;

&lt;ul id=&quot;markdown-toc&quot;&gt;
  &lt;li&gt;&lt;a href=&quot;#timing&quot; id=&quot;markdown-toc-timing&quot;&gt;Timing&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#why-is-it-faster&quot; id=&quot;markdown-toc-why-is-it-faster&quot;&gt;Why is it faster?&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#what-about-merge-conflicts&quot; id=&quot;markdown-toc-what-about-merge-conflicts&quot;&gt;What about merge conflicts?&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#related-work&quot; id=&quot;markdown-toc-related-work&quot;&gt;Related work&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#interactive-rebase&quot; id=&quot;markdown-toc-interactive-rebase&quot;&gt;Interactive rebase&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#related-posts&quot; id=&quot;markdown-toc-related-posts&quot;&gt;Related posts&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#comments&quot; id=&quot;markdown-toc-comments&quot;&gt;Comments&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;timing&quot;&gt;Timing&lt;/h2&gt;

&lt;p&gt;I tested on the Git mirror of Mozilla’s &lt;a href=&quot;https://github.com/mozilla/gecko-dev&quot;&gt;gecko-dev&lt;/a&gt; repository. This is a large repository with ~750k commits and ~250k working copy files, so it’s good for stress tests.&lt;/p&gt;

&lt;p&gt;It takes about 10 seconds to rebase 20 commits with &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;git rebase&lt;/code&gt;:&lt;/p&gt;

&lt;script id=&quot;asciicast-437913&quot; src=&quot;https://asciinema.org/a/437913.js&quot; async=&quot;&quot;&gt;&lt;/script&gt;

&lt;noscript&gt;&lt;a href=&quot;https://asciinema.org/a/437913&quot; target=&quot;_blank&quot;&gt;&lt;img src=&quot;https://asciinema.org/a/437913.svg&quot; /&gt;&lt;/a&gt;&lt;/noscript&gt;

&lt;p&gt;Versus about 1 second with &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;git move&lt;/code&gt;:&lt;/p&gt;

&lt;script id=&quot;asciicast-437914&quot; src=&quot;https://asciinema.org/a/437914.js&quot; async=&quot;&quot;&gt;&lt;/script&gt;

&lt;noscript&gt;&lt;a href=&quot;https://asciinema.org/a/437914&quot; target=&quot;_blank&quot;&gt;&lt;img src=&quot;https://asciinema.org/a/437914.svg&quot; /&gt;&lt;/a&gt;&lt;/noscript&gt;

&lt;p&gt;These timings are not scientific, and there are optimizations that can be applied to both, but the order of magnitude is roughly correct in my experience.&lt;/p&gt;

&lt;p&gt;Since &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;git move&lt;/code&gt; can operate entirely in-memory, it can also rebase branches which aren’t checked out. This is much faster than using &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;git rebase&lt;/code&gt;, because it doesn’t have to touch the working copy at all.&lt;/p&gt;

&lt;h2 id=&quot;why-is-it-faster&quot;&gt;Why is it faster?&lt;/h2&gt;

&lt;p&gt;There are two main problems with the Git rebase process:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;It touches disk.&lt;/li&gt;
  &lt;li&gt;It uses the index data structure to create tree objects.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;With a stock Git rebase, you have to check out to the target commit, and then apply each of the commits’ contents individually to disk. After each commit’s application to disk, Git will implicitly check the status of files on disk again. This isn’t strictly necessary for many rebases, and can be quite slow on sizable repos.&lt;/p&gt;

&lt;p&gt;When Git is ready to apply one of the commits, it first populates the “index” data structure, which is essentially a sorted list of all of the files in the working copy. It can be expensive for Git to convert the index into a “tree” object, which is used to store commits internally, as it has to insert or re-insert many already-existing entries into the object database. (There are some optimizations that can improve this, such as the &lt;a href=&quot;https://git-scm.com/docs/index-format#_cache_tree&quot;&gt;cache tree extension&lt;/a&gt;).&lt;/p&gt;

&lt;p&gt;Work is already well underway on upstream Git to support the features which would make in-memory rebases feasible, so hopefully we’ll see mainstream Git enjoy similar performance gains in the future.&lt;/p&gt;

&lt;h2 id=&quot;what-about-merge-conflicts&quot;&gt;What about merge conflicts?&lt;/h2&gt;

&lt;p&gt;If an in-memory rebase produces a merge conflict, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;git move&lt;/code&gt; will cancel it and restart it as an on-disk rebase, so that the user can resolve merge conflicts. Since in-memory rebases are typically very fast, this doesn’t usually impede the developer experience.&lt;/p&gt;

&lt;p&gt;Of course, it’s possible in principle to resolve merge conflicts in-memory as well.&lt;/p&gt;

&lt;h2 id=&quot;related-work&quot;&gt;Related work&lt;/h2&gt;

&lt;p&gt;In-memory rebases are not a new idea:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/git-up/GitUp&quot;&gt;GitUp&lt;/a&gt; (2015), a GUI client for Git with a focus on manipulating the commit graph.
    &lt;ul&gt;
      &lt;li&gt;Unfortunately, in my experience, it doesn’t perform too well on large repositories.&lt;/li&gt;
      &lt;li&gt;To my knowledge, no other Git GUI client offers in-memory rebases. Please let me know of others, so that I can update this comment.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/mystor/git-revise&quot;&gt;git-revise&lt;/a&gt; (2019), a command-line utility which allows various in-memory edits to commits.
    &lt;ul&gt;
      &lt;li&gt;git-revise is a replacement for &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;git rebase -i&lt;/code&gt;, not &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;git rebase&lt;/code&gt;. It can reorder commits, but it isn’t intended to move commits from one base to another. See &lt;a href=&quot;#interactive-rebase&quot;&gt;Interactive rebase&lt;/a&gt;.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Other source control systems have in-memory rebases, such as &lt;a href=&quot;https://www.mercurial-scm.org/&quot;&gt;Mercurial&lt;/a&gt; and &lt;a href=&quot;https://github.com/martinvonz/jj&quot;&gt;Jujutsu&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The goal of the &lt;a href=&quot;https://github.com/arxanas/git-branchless&quot;&gt;git-branchless&lt;/a&gt; project is to improve developer velocity with various features that can be incrementally adopted by users, such as in-memory rebases. Performance is an explicit feature: it’s designed to work with monorepo-scale codebases.&lt;/p&gt;

&lt;h2 id=&quot;interactive-rebase&quot;&gt;Interactive rebase&lt;/h2&gt;

&lt;p&gt;Interactive rebase (&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;git rebase -i&lt;/code&gt;) is a feature which can be used to modify, reorder, combine, etc. several commits in sequence. &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;git move&lt;/code&gt; does not do this at present, but this functionality is planned for a future git-branchless release. Watch &lt;a href=&quot;https://github.com/arxanas/git-branchless&quot;&gt;the Github repository&lt;/a&gt; to be notified of new releases.&lt;/p&gt;

&lt;p&gt;In the meantime, you can use &lt;a href=&quot;https://github.com/mystor/git-revise&quot;&gt;git-revise&lt;/a&gt;. Unfortunately, git-branchless and git-revise do not interoperate well due to git-revise’s lack of support for the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;post-rewrite&lt;/code&gt; hook (see &lt;a href=&quot;https://github.com/mystor/git-revise/issues/35#issuecomment-523237380&quot;&gt;this issue&lt;/a&gt;).&lt;/p&gt;

&lt;h2 id=&quot;related-posts&quot;&gt;Related posts&lt;/h2&gt;

&lt;p&gt;The following are hand-curated posts which you might find interesting.&lt;/p&gt;

&lt;table class=&quot;related-posts&quot;&gt;
&lt;thead&gt;
  &lt;tr&gt;
    &lt;th&gt;Date&lt;/th&gt;
    &lt;th&gt;&lt;/th&gt;
    &lt;th&gt;Title&lt;/th&gt;
  &lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;

  &lt;tr&gt;
    &lt;td&gt;19&amp;nbsp;June&amp;nbsp;2021&lt;/td&gt;
    &lt;td class=&quot;this-post&quot;&gt;
      
      &lt;/td&gt;
    &lt;td&gt;&lt;a href=&quot;/git-undo/&quot;&gt;git undo: We can do better&lt;/a&gt;
    &lt;/td&gt;
  &lt;/tr&gt;

  &lt;tr&gt;
    &lt;td&gt;12&amp;nbsp;October&amp;nbsp;2021&lt;/td&gt;
    &lt;td class=&quot;this-post&quot;&gt;
      
      (this&amp;nbsp;post)
      
      &lt;/td&gt;
    &lt;td&gt;&lt;a href=&quot;/in-memory-rebases/&quot;&gt;Lightning-fast rebases with git-move&lt;/a&gt;
    &lt;/td&gt;
  &lt;/tr&gt;

&lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;Want to see more of my posts? Follow me &lt;a href=&quot;https://twitter.com/arxanas&quot;&gt;on Twitter&lt;/a&gt; or subscribe &lt;a href=&quot;/feed.xml&quot;&gt;via RSS&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&quot;comments&quot;&gt;Comments&lt;/h2&gt;

&lt;ul&gt;


&lt;/ul&gt;

&lt;div id=&quot;disqus_thread&quot;&gt;&lt;/div&gt;
&lt;script&gt;

/**
 *  RECOMMENDED CONFIGURATION VARIABLES: EDIT AND UNCOMMENT THE SECTION BELOW TO INSERT DYNAMIC VALUES FROM YOUR PLATFORM OR CMS.
 *  LEARN WHY DEFINING THESE VARIABLES IS IMPORTANT: https://disqus.com/admin/universalcode/#configuration-variables */
var disqus_config = function () {
    this.page.url = &quot;https://blog.waleedkhan.name/in-memory-rebases/&quot;;
    this.page.identifier = &quot;in-memory-rebases/&quot;;
};

(function() { // DON'T EDIT BELOW THIS LINE
    var d = document, s = d.createElement('script');
    s.src = '//waleedkhan-name.disqus.com/embed.js';
    s.setAttribute('data-timestamp', +new Date());
    (d.head || d.body).appendChild(s);
})();
&lt;/script&gt;

&lt;noscript&gt;Please enable JavaScript to view the &lt;a href=&quot;https://disqus.com/?ref_noscript&quot;&gt;comments powered by Disqus.&lt;/a&gt;&lt;/noscript&gt;

</description>
        <pubDate>Tue, 12 Oct 2021 00:00:00 -0500</pubDate>
        <link>https://blog.waleedkhan.name/in-memory-rebases/</link>
        <guid isPermaLink="true">https://blog.waleedkhan.name/in-memory-rebases/</guid>
        
        <category>git</category>
        
        <category>rust</category>
        
        <category>software-engineering</category>
        
        
      </item>
    
      <item>
        <title>Automatically detecting and replying to recruiter spam</title>
        <description>&lt;ul id=&quot;markdown-toc&quot;&gt;
  &lt;li&gt;&lt;a href=&quot;#introduction&quot; id=&quot;markdown-toc-introduction&quot;&gt;Introduction&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#bayesian-filtering&quot; id=&quot;markdown-toc-bayesian-filtering&quot;&gt;Bayesian filtering&lt;/a&gt;    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;#approach&quot; id=&quot;markdown-toc-approach&quot;&gt;Approach&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#properties&quot; id=&quot;markdown-toc-properties&quot;&gt;Properties&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#training&quot; id=&quot;markdown-toc-training&quot;&gt;Training&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#deployment&quot; id=&quot;markdown-toc-deployment&quot;&gt;Deployment&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#automatic-salary-negotiation&quot; id=&quot;markdown-toc-automatic-salary-negotiation&quot;&gt;Automatic salary negotiation&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#results&quot; id=&quot;markdown-toc-results&quot;&gt;Results&lt;/a&gt;    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;#example&quot; id=&quot;markdown-toc-example&quot;&gt;Example&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#efficacy&quot; id=&quot;markdown-toc-efficacy&quot;&gt;Efficacy&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#responses&quot; id=&quot;markdown-toc-responses&quot;&gt;Responses&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#selected-amusing-keywords&quot; id=&quot;markdown-toc-selected-amusing-keywords&quot;&gt;Selected amusing keywords&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#bugs&quot; id=&quot;markdown-toc-bugs&quot;&gt;Bugs&lt;/a&gt;    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;#non-existent-words&quot; id=&quot;markdown-toc-non-existent-words&quot;&gt;Non-existent words&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#email-delivery&quot; id=&quot;markdown-toc-email-delivery&quot;&gt;Email delivery&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#related-posts&quot; id=&quot;markdown-toc-related-posts&quot;&gt;Related posts&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#comments&quot; id=&quot;markdown-toc-comments&quot;&gt;Comments&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The code for this post is at my Github repository: &lt;a href=&quot;https://github.com/arxanas/detect-recruiter-spam&quot;&gt;github.com/arxanas/detect-recruiter-spam&lt;/a&gt;. However, I have not included my pre-trained model, since it contains sensitive information derived from  my email inbox. If you would like to use my API endpoint, send me an email.&lt;/p&gt;

&lt;p&gt;If you just want to see the results, skip to &lt;a href=&quot;#results&quot;&gt;Results&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&quot;introduction&quot;&gt;Introduction&lt;/h2&gt;

&lt;p&gt;Many software engineers I know complain about the frequency of “recruiter spam” emails. These emails are obviously generic emails sent in an attempt to hire someone. Clearly, the recruiters are generating and sending the emails with the press of a button, and the recipients are deleting these emails just as quickly.&lt;/p&gt;

&lt;p&gt;It’s understandable. In the current climate, job-seeking is a numbers game (I live in the US). Job seekers blast countless job sites with their résumés, while recruiters browse through LinkedIn wielding a mouse in one hand and a templated introduction in the other.&lt;/p&gt;

&lt;p&gt;So why engage with these recruiters? Well, as a college graduate, I interviewed at Microsoft, thinking that I would never accept a job offer from them. But the recruiter really astounded me with the whole experience, and Microsoft changed from being barely a contender to one of my top choices. Since then, I have a policy of at least giving companies a chance to impress me.&lt;/p&gt;

&lt;p&gt;One the one hand, I don’t want to miss out on a potential opportunity, but on the other hand, I don’t want to waste time on low-quality recruiter interactions. So I decided that further automated emailing must be the solution.&lt;/p&gt;

&lt;h2 id=&quot;bayesian-filtering&quot;&gt;Bayesian filtering&lt;/h2&gt;

&lt;p&gt;A Bayesian spam filter is a simple binary classification model, often used as a first project in a machine learning course. It accepts a document and returns whether it thinks that the document is spam or not. I used the &lt;a href=&quot;https://scikit-learn.org/stable/&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;scikit-learn&lt;/code&gt;&lt;/a&gt; library to build my model.&lt;/p&gt;

&lt;h3 id=&quot;approach&quot;&gt;Approach&lt;/h3&gt;

&lt;p&gt;The idea is to encode each message as a vector of zeros and ones. To do this, we first accumulate all of the different words across all of the different messages (with some normalization applied, such as lowercasing, removing punctuation, lemmatizing, etc.). Then we assign each unique word a different index, starting from zero. For each unique word in a given message, we set the entry at that word’s index to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;1&lt;/code&gt; in its corresponding vector. &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;scikit-learn&lt;/code&gt; includes the convenient &lt;a href=&quot;https://scikit-learn.org/stable/modules/generated/sklearn.feature_extraction.text.CountVectorizer.html&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;CountVectorizer&lt;/code&gt;&lt;/a&gt; class for this purpose.&lt;/p&gt;

&lt;p&gt;Then we just feed the result into a pre-made Bayesian classifier model. I used &lt;a href=&quot;https://scikit-learn.org/stable/modules/generated/sklearn.naive_bayes.MultinomialNB.html&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;MultinomialNB&lt;/code&gt;&lt;/a&gt; from &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;scikit-learn&lt;/code&gt;. (This model actually accepts a vector of not just zeros and ones, but word frequency counts.)&lt;/p&gt;

&lt;p&gt;The code is relatively simple, available here: &lt;a href=&quot;https://github.com/arxanas/detect-recruiter-spam/blob/main/recruiterspam/train.py&quot;&gt;https://github.com/arxanas/detect-recruiter-spam/blob/main/recruiterspam/train.py&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&quot;properties&quot;&gt;Properties&lt;/h3&gt;

&lt;p&gt;A Bayesian filter is a decent general-purpose classifier for this use-case. However, it’s worth noting some of its limitations:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;It isn’t able to deal with words that didn’t appear in the training set.&lt;/li&gt;
  &lt;li&gt;If the training set has few positive or negative examples, it may not be trained very accurately.
    &lt;ul&gt;
      &lt;li&gt;For example, if your training set has 0.01% spam messages, then a classifier which always outputs “not spam” will be accurate for the vast majority of the inputs, but such a model is useless.&lt;/li&gt;
      &lt;li&gt;According to the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;scikit-learn&lt;/code&gt; documentation, there are some tricks that can be done to improve the accuracy in these cases, such as by training classification against the complement of the desired output classes.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;In real life, a false positive (detecting an email as spam when it’s not) is particularly bad if it results in the loss of important communication, while a false negative (failing to detect a spam email) is mostly an annoyance. Thus, a typical Bayesian classifier probably wants to optimize to reduce false positives.&lt;/p&gt;

&lt;p&gt;In our case, I don’t mind if the classifier occasionally returns false positives, because the resulting emails won’t be deleted — the recipient will just receive an automated email, which they can ignore. Thus, we can afford to optimize the classifier towards decreasing false negatives.&lt;/p&gt;

&lt;h2 id=&quot;training&quot;&gt;Training&lt;/h2&gt;

&lt;p&gt;To actually train the model, I went through all of my email and manually tagged recruiter spam emails as such. This wasn’t too bad, as I was able to filter out most of the automated email in my inbox pretty easily during manual annotation.&lt;/p&gt;

&lt;p&gt;The repository includes two scripts to download your mailbox. One works by reading each message over IMAP, while the other works by reading a local &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;.mbox&lt;/code&gt; file. (For Gmail, you can get an &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;.mbox&lt;/code&gt; file by using the Google Takeout feature.)&lt;/p&gt;

&lt;p&gt;My training set consisted of:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;16752 messages,&lt;/li&gt;
  &lt;li&gt;182 of which were spam,&lt;/li&gt;
  &lt;li&gt;resulting in an accuracy of 95.2%,&lt;/li&gt;
  &lt;li&gt;and a false positive rate of 4.7%.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;For an actual spam filter, these numbers would be abysmal, but they’re fine for my purposes.&lt;/p&gt;

&lt;h2 id=&quot;deployment&quot;&gt;Deployment&lt;/h2&gt;

&lt;p&gt;The model is deployed as a REST API endpoint. I tried really hard to deploy the model to AWS Lambda, but despite my packaging everything up into a Docker container, I had inscrutable differences between my local testing environment and the cloud one, and I couldn’t get it to work. In the end, I gave up and used a Heroku instance ($7 per month), which is significantly more expensive, but at least works without hassle.&lt;/p&gt;

&lt;p&gt;To connect the model to my email account and have it be able to reply on my behalf, I first tried using services like Zapier and IFTTT. However, they didn’t have useful integrations at the free tier, and the paid tier would cost $25+ per month, which was more than I wanted to pay.&lt;/p&gt;

&lt;p&gt;Instead, I used &lt;a href=&quot;https://www.cloudmailin.com/&quot;&gt;CloudMailIn&lt;/a&gt;. They have a usable free tier, helpful documentation, and customer support even helped me with a coding issue I had during development.&lt;/p&gt;

&lt;p&gt;I simply set up a Gmail filter to forward email to CloudMailIn, which forwarded it to the Heroku service. The service would then call back into CloudMailIn to send a reply email using my email address, if necessary.&lt;/p&gt;

&lt;h2 id=&quot;automatic-salary-negotiation&quot;&gt;Automatic salary negotiation&lt;/h2&gt;

&lt;p&gt;Large companies have well-defined levels with associated compensation ranges. In my script, if I was able to determine the company that the recruiter represented, I cross-referenced the recruiter’s company with data from &lt;a href=&quot;https://www.levels.fyi/&quot;&gt;Levels.fyi&lt;/a&gt; and compared it to my current company’s level and salary, and used that information to propose a level to interview at. (I’ve been bitten a couple of times by not clarifying the salary ranges up-front with recruiters, so I figure it’s best to automate it.)&lt;/p&gt;

&lt;h2 id=&quot;results&quot;&gt;Results&lt;/h2&gt;

&lt;h3 id=&quot;example&quot;&gt;Example&lt;/h3&gt;

&lt;p&gt;Here’s an example exchange with Amazon:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Dear Waleed,&lt;/p&gt;

  &lt;p&gt;I came across your LinkedIn profile and am so impressed with your skill set! I’m looking for great people with your background for our AZ, OR, TX, TN, NY, CA and Canada locations for SDEII (80% coding and 20% System design).&lt;/p&gt;

  &lt;p&gt;IF YOU ARE CURRENTLY WORKING OR HAS APPLIED FOR ANY POSITION WITH AMAZON IN THE LAST 3 MONTHS. PLEASE LET ME KNOW&lt;/p&gt;

  &lt;p&gt;If not, I was wondering if you would like to connect and discuss possibilities?&lt;/p&gt;

  &lt;p&gt;Qualifications&lt;/p&gt;

  &lt;ul&gt;
    &lt;li&gt;3+ years of non-internship professional software development experience&lt;/li&gt;
    &lt;li&gt;Programming experience with at least one modern language such as Java, C++, or C# including object-oriented design&lt;/li&gt;
    &lt;li&gt;1+ years of experience contributing to the architecture and design (architecture, design patterns, reliability and scaling) of new and current systems.&lt;/li&gt;
    &lt;li&gt;Experience building complex software systems that have been successfully delivered to customers&lt;/li&gt;
    &lt;li&gt;Knowledge of professional software engineering practices and best practices for the full software development lifecycle, including coding standards, code reviews, source control management, build processes, testing, and operations&lt;/li&gt;
    &lt;li&gt;Ability to take a project from scoping requirements through actual launch of the project&lt;/li&gt;
    &lt;li&gt;Experience in communicating with users, other technical teams, and management to collect requirements, describe software product features, and technical designs.&lt;/li&gt;
  &lt;/ul&gt;

  &lt;p&gt;If interested, please reply back to me along with contact details and email.&lt;/p&gt;

  &lt;p&gt;[Recruiter name]&lt;br /&gt;
Technical Recruiter at Amazon&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;And here’s the automated response:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Hello,&lt;/p&gt;

  &lt;p&gt;I am always open to the right opportunity, but since I receive so much email from recruiters, I don’t have time to individually follow up on every message.&lt;/p&gt;

  &lt;p&gt;To make things easier for us both, please include the following in your reply:&lt;/p&gt;

  &lt;ul&gt;
    &lt;li&gt;The location of the position.&lt;/li&gt;
    &lt;li&gt;Whether your company supports remote work.&lt;/li&gt;
    &lt;li&gt;The team which is hiring.&lt;/li&gt;
    &lt;li&gt;How my experience relates to the team in question.&lt;/li&gt;
    &lt;li&gt;When you are looking to fill the position.&lt;/li&gt;
  &lt;/ul&gt;

  &lt;p&gt;I enjoy competitive compensation at my current company, TWITTER. I’ve automatically looked up the compensation details for the company you appear to represent, AMAZON, and it seems like I would have to receive an offer at the below level to be compensated competitively.&lt;/p&gt;

  &lt;p&gt;Company name: AMAZON&lt;/p&gt;

  &lt;p&gt;Compensation rating: C&lt;/p&gt;

  &lt;p&gt;Suggested level for competitive compensation: PRINCIPAL SDE/L7&lt;/p&gt;

  &lt;p&gt;Can you confirm that you can offer the position at the above level?&lt;/p&gt;

  &lt;p&gt;The following are the details of why your message was flagged as a recruiting message. If this email was sent in error, you can ignore it.&lt;/p&gt;

  &lt;p&gt;Probability: &amp;gt;99%&lt;/p&gt;

  &lt;p&gt;Top keywords: SCOPING, OBJECTORIENTED, CONTRIBUTING, LIFECYCLE, COMMUNICATING&lt;/p&gt;

  &lt;p&gt;Best,&lt;/p&gt;

  &lt;p&gt;Recruiter Reply Bot&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;The recruiter did not reply in this case (see &lt;a href=&quot;#email-delivery&quot;&gt;Bugs&lt;/a&gt;).&lt;/p&gt;

&lt;h3 id=&quot;efficacy&quot;&gt;Efficacy&lt;/h3&gt;

&lt;p&gt;The bot correctly detected 36 recruiter emails over a 3-month period, out of which 6 emails led to further conversation.&lt;/p&gt;

&lt;p&gt;At the rate of $7.72 per month,&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;That’s $0.64 per response,&lt;/li&gt;
  &lt;li&gt;or $3.86 per thread which led to actual discussion.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;That price could definitely be reduced (such as by using serverless computing), but considering that I stand to make tens of thousands dollars more per year if I actually do accept a new position, I don’t consider it a bad price to generate “real” leads with recruiters.&lt;/p&gt;

&lt;p&gt;The bot also produced 12 false positive replies:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;1 false positive to a “real” person who was trying to sell me SEO services.&lt;/li&gt;
  &lt;li&gt;4 false positives to a correspondent who writes their emails in Polish, due to a serious bug (see &lt;a href=&quot;#non-existent-words&quot;&gt;Bugs&lt;/a&gt;). I removed this person from the email forwarding filter after that, so the real incidence would have been higher.&lt;/li&gt;
  &lt;li&gt;4 false positives in response to Facebook Pay automated emails written in Polish, due to the same bug. There were many more automated emails written in Polish from the same service, so it’s not clear to me why only some of them triggered a reply.&lt;/li&gt;
  &lt;li&gt;2 false positives to LinkedIn email notifications, which would probably be difficult to accurately detect given its nature as a recruiting service.&lt;/li&gt;
  &lt;li&gt;1 false positive to an automated newsletter from a miscellaneous service.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;There were 29 further false positive replies which were caused by silly bugs, such as replying to emails even when the prediction probability was 0%, which I didn’t include in the above list.&lt;/p&gt;

&lt;h3 id=&quot;responses&quot;&gt;Responses&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;Response #1 (from a recruiter firm): They represented an early-stage startup in Canada. They gave a salary range, but I declined because they couldn’t meet my US-centric salary expectations.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Response #2 (from a recruiter for finance): They responded with “Thank you for responding to my email, automated though it may be.”, being the only person who acknowledged the automated nature of my response. They gave me useful information with the role and location, but only said that compensation “a minimum of 30% more than what you’re making now”. I declined because I was interested in working in functional programming languages, rather than C++ and Python.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Response #3 (from a recruiting firm): I asked for a salary range in advance, and they declined to give it (after a 10-email thread!), so we stopped communication.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Response #4 (from an early-stage startup): I asked for a salary range in advance, and they declined to give it, so we stopped communication.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Response #5 (from a late-stage startup): I actually proceeded to a phone call with the recruiter. They had an interesting team, but I declined to move forward with an interview, since it wouldn’t be a substantial compensation increase, and the equity portion would be illiquid, as the company was not public.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Response #6 (from an early-stage startup): They just responded “Okay, thank you!” to my automated reply, which I assume means that they did not want to share salary information.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;selected-amusing-keywords&quot;&gt;Selected amusing keywords&lt;/h3&gt;

&lt;p&gt;Recruiters use a lot of common buzzwords in their emails, which is the premise for detecting those emails automatically. Here are some of the keywords which I found amusing. (Each of the following keywords &lt;a href=&quot;https://github.com/arxanas/detect-recruiter-spam/blob/829b2ed18394388fe977ce39f407107c88f16a66/recruiterspam/train.py#L141-L142&quot;&gt;had to appear in more than one email in the training set&lt;/a&gt; to be flagged.)&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;PROFITABLE&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ACTIONABLE&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;MOBILIZE&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;RAPIDLY&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;COGNITIVE&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;AMAZONIANS&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;INNOVATE&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;PURSUING&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;RAPIDLY&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;SKILLED&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ARLINGTON&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;MICROSERVICES&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;FINTECH&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;JERSEY&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;STRIVING&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;PIQUED&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;FOREFRONT&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;COMPLIANT&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;RAPIDLY&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;HEALTHTECH&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ENG&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;COMPELLING&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;CERTAINTY&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;OWNING&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;TALENTED&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;FINTECH&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;SOURCER&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;COLLABORATIVE&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;IMPRESSED&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;OUTDATED&lt;/code&gt;
    &lt;ul&gt;
      &lt;li&gt;“Sourcer” is part of the sender’s signature, rather than the email body.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;AUTONOMOUS&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;SOURCER&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ACCELERATION&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;CRUISE&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;TALENTED&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;RECONNECT&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;CAREERSGOOGLECOM&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;LATELY&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;IMAGINE&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ACCOMMODATION&lt;/code&gt;
    &lt;ul&gt;
      &lt;li&gt;Obviously, this one was from Google. The punctuation in the URL has been removed as part of preprocessing.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;SCOPING&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;OBJECTORIENTED&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;CONTRIBUTING&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;LIFECYCLE&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;COMMUNICATING&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;250K&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;FINTECH&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;HYPERGROWTH&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;LUCRATIVE&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;RAPIDLY&lt;/code&gt;
    &lt;ul&gt;
      &lt;li&gt;Apparently $250k is a common number mentioned in recruiting emails?&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;SIGMA&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;AMIDST&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;CHEERS&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;SELECTIVE&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;SHAW&lt;/code&gt;
    &lt;ul&gt;
      &lt;li&gt;“Sigma” refers to “Two Sigma” and “Shaw” refers to “DE Shaw”, both finance firms.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;AMIDST&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;SELECTIVE&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;SHAW&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;REVOLUTIONIZE&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;QUANTITATIVE&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;bugs&quot;&gt;Bugs&lt;/h2&gt;

&lt;h3 id=&quot;non-existent-words&quot;&gt;Non-existent words&lt;/h3&gt;

&lt;p&gt;Strangely, the filter triggers often on email which contain words that don’t appear in the training corpus. The &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;CountVectorizer&lt;/code&gt; should have removed these words from the input vector, and if the vector were entirely empty in the end, then the output should have taken on the prior probability of ~1%, which is not enough to trigger a response.&lt;/p&gt;

&lt;p&gt;For example, an email with the following keywords was triggered:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Probability: &amp;gt;99%&lt;/p&gt;

  &lt;p&gt;Top keywords: MIDZY, UKASZ, MINUT, DZISIEJSZE, PAR&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;None of these words appeared in the training set, so they should not have contributed to the classification.&lt;/p&gt;

&lt;p&gt;T/L note: non-ASCII letters were removed as part of pre-processing. Here is the translation table for the above words:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;“MIDZY” = “między”, meaning “during”;&lt;/li&gt;
  &lt;li&gt;“UKASZ” = “Łukasz”, a given name;&lt;/li&gt;
  &lt;li&gt;“MINUT” means “minute”;&lt;/li&gt;
  &lt;li&gt;“DZISIEJSZE” means “today’s”;&lt;/li&gt;
  &lt;li&gt;“PAR” = “parę”, meaning “couple”.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;email-delivery&quot;&gt;Email delivery&lt;/h3&gt;

&lt;p&gt;When receiving an email from LinkedIn, it says at the bottom that I can reply to the email directly. However, it appears that all of the reply emails bounced with the error “550 5.7.1 sender not authorised to email this recipient”. I assume that this is because I haven’t set up SPF on my domain. I could either set it up, or route my emails directly through Gmail.&lt;/p&gt;

&lt;p&gt;Additionally, I never received a response from any Microsoft or Amazon recruiter, despite them making up the vast majority of incoming recruiter emails. The logs indicate that email delivery succeeded, but they’re using custom recruiting management solutions, so perhaps the email was rejected at some later step in the process.&lt;/p&gt;

&lt;p&gt;Or alternatively, maybe they’ve decided not to waste their time with my automated emails, just like I decided not to waste my time with theirs?&lt;/p&gt;

&lt;h2 id=&quot;related-posts&quot;&gt;Related posts&lt;/h2&gt;

&lt;p&gt;The following are hand-curated posts which you might find interesting.&lt;/p&gt;

&lt;table class=&quot;related-posts&quot;&gt;
&lt;thead&gt;
  &lt;tr&gt;
    &lt;th&gt;Date&lt;/th&gt;
    &lt;th&gt;&lt;/th&gt;
    &lt;th&gt;Title&lt;/th&gt;
  &lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;

  &lt;tr&gt;
    &lt;td&gt;19&amp;nbsp;September&amp;nbsp;2016&lt;/td&gt;
    &lt;td class=&quot;this-post&quot;&gt;
      
      &lt;/td&gt;
    &lt;td&gt;&lt;a href=&quot;/dot-name-email-address/&quot;&gt;Is having a '.name' email address a good idea?&lt;/a&gt;
    &lt;/td&gt;
  &lt;/tr&gt;

  &lt;tr&gt;
    &lt;td&gt;13&amp;nbsp;October&amp;nbsp;2016&lt;/td&gt;
    &lt;td class=&quot;this-post&quot;&gt;
      
      &lt;/td&gt;
    &lt;td&gt;&lt;a href=&quot;/messenger-conversation-macros/&quot;&gt;Analyzing all of my Messenger conversations to create conversational macros&lt;/a&gt;
    &lt;/td&gt;
  &lt;/tr&gt;

  &lt;tr&gt;
    &lt;td&gt;12&amp;nbsp;September&amp;nbsp;2018&lt;/td&gt;
    &lt;td class=&quot;this-post&quot;&gt;
      
      &lt;/td&gt;
    &lt;td&gt;&lt;a href=&quot;/getting-a-job-in-pl/&quot;&gt;How to get a job in programming languages&lt;/a&gt;
    &lt;/td&gt;
  &lt;/tr&gt;

  &lt;tr&gt;
    &lt;td&gt;29&amp;nbsp;April&amp;nbsp;2020&lt;/td&gt;
    &lt;td class=&quot;this-post&quot;&gt;
      
      &lt;/td&gt;
    &lt;td&gt;&lt;a href=&quot;/mail-server/&quot;&gt;I used to run my own mail server&lt;/a&gt;
    &lt;/td&gt;
  &lt;/tr&gt;

  &lt;tr&gt;
    &lt;td&gt;04&amp;nbsp;October&amp;nbsp;2021&lt;/td&gt;
    &lt;td class=&quot;this-post&quot;&gt;
      
      (this&amp;nbsp;post)
      
      &lt;/td&gt;
    &lt;td&gt;&lt;a href=&quot;/detect-recruiter-spam/&quot;&gt;Automatically detecting and replying to recruiter spam&lt;/a&gt;
    &lt;/td&gt;
  &lt;/tr&gt;

&lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;Want to see more of my posts? Follow me &lt;a href=&quot;https://twitter.com/arxanas&quot;&gt;on Twitter&lt;/a&gt; or subscribe &lt;a href=&quot;/feed.xml&quot;&gt;via RSS&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&quot;comments&quot;&gt;Comments&lt;/h2&gt;

&lt;ul&gt;


&lt;/ul&gt;

&lt;div id=&quot;disqus_thread&quot;&gt;&lt;/div&gt;
&lt;script&gt;

/**
 *  RECOMMENDED CONFIGURATION VARIABLES: EDIT AND UNCOMMENT THE SECTION BELOW TO INSERT DYNAMIC VALUES FROM YOUR PLATFORM OR CMS.
 *  LEARN WHY DEFINING THESE VARIABLES IS IMPORTANT: https://disqus.com/admin/universalcode/#configuration-variables */
var disqus_config = function () {
    this.page.url = &quot;https://blog.waleedkhan.name/detect-recruiter-spam/&quot;;
    this.page.identifier = &quot;detect-recruiter-spam/&quot;;
};

(function() { // DON'T EDIT BELOW THIS LINE
    var d = document, s = d.createElement('script');
    s.src = '//waleedkhan-name.disqus.com/embed.js';
    s.setAttribute('data-timestamp', +new Date());
    (d.head || d.body).appendChild(s);
})();
&lt;/script&gt;

&lt;noscript&gt;Please enable JavaScript to view the &lt;a href=&quot;https://disqus.com/?ref_noscript&quot;&gt;comments powered by Disqus.&lt;/a&gt;&lt;/noscript&gt;

</description>
        <pubDate>Mon, 04 Oct 2021 00:00:00 -0500</pubDate>
        <link>https://blog.waleedkhan.name/detect-recruiter-spam/</link>
        <guid isPermaLink="true">https://blog.waleedkhan.name/detect-recruiter-spam/</guid>
        
        <category>career</category>
        
        <category>machine-learning</category>
        
        <category>python</category>
        
        
      </item>
    
      <item>
        <title>Automating terminal demos</title>
        <description>&lt;ul id=&quot;markdown-toc&quot;&gt;
  &lt;li&gt;&lt;a href=&quot;#problem&quot; id=&quot;markdown-toc-problem&quot;&gt;Problem&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#solution&quot; id=&quot;markdown-toc-solution&quot;&gt;Solution&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#comments&quot; id=&quot;markdown-toc-comments&quot;&gt;Comments&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;problem&quot;&gt;Problem&lt;/h2&gt;

&lt;p&gt;I needed to automate a terminal demo to post in another blog article. There are several solutions for automating terminal demos, but they have some problems for my use-case:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;I want my demos to be hands-off. Most solutions are meant for live demos, and have you type to advance the script.&lt;/li&gt;
  &lt;li&gt;I want to be able to manually adjust timings. (Reviewers of my demos have commented that I tend to go too fast.)&lt;/li&gt;
  &lt;li&gt;I need to support interactive programs like Vim.&lt;/li&gt;
  &lt;li&gt;I need to export something which can be embedded in a webpage.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;solution&quot;&gt;Solution&lt;/h2&gt;

&lt;p&gt;I used &lt;a href=&quot;https://en.wikipedia.org/wiki/Expect&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;expect&lt;/code&gt;&lt;/a&gt; in combination with &lt;a href=&quot;https://asciinema.org/&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;asciinema rec&lt;/code&gt;&lt;/a&gt; to meet the above requirements. The trick is to run &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;spawn asciinema rec&lt;/code&gt; inside the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;expect&lt;/code&gt; script.&lt;/p&gt;

&lt;p&gt;I’ve written an example &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;expect&lt;/code&gt; script below. Note that the script displays some junk while it’s running — it looks like the demo, but it isn’t. However, at the beginning of the output, a message like this is displayed:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;asciinema: recording asciicast to /var/folders/gn/gdp9z_g968b9nx7c9lvgy8y00000gp/T/tmpcpublyyb-ascii.cast
asciinema: press &amp;lt;ctrl-d&amp;gt; or type &quot;exit&quot; when you're done
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;You can then pass the above path to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;asciinema play&lt;/code&gt; or &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;asciinema upload&lt;/code&gt; to access the actual demo.&lt;/p&gt;

&lt;p&gt;Script:&lt;/p&gt;

&lt;div class=&quot;language-tcl highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;#!/usr/bin/env expect -f&lt;/span&gt;
set timeout 1
set send_human &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;0.1 0.3 1 0.05 1&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
set CTRLC &lt;span class=&quot;se&quot;&gt;\003&lt;/span&gt;

proc expect_prompt &lt;span class=&quot;p&quot;&gt;{}&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    expect &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;$&lt;span class=&quot;s2&quot;&gt; &quot;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

proc run_command &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;cmd&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    send -h &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$cmd&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;
    sleep 3
    send &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\r&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;
    expect -timeout 1
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

proc send_keystroke_to_interactive_process &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;key &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;addl_sleep 2&lt;span class=&quot;p&quot;&gt;}}&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    send &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$key&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;
    expect -timeout 1
    sleep $addl_sleep
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

spawn asciinema rec
expect_prompt

run_command &lt;span class=&quot;s2&quot;&gt;&quot;echo Hello, world!&quot;&lt;/span&gt;
run_command &lt;span class=&quot;s2&quot;&gt;&quot;vim foo.txt&quot;&lt;/span&gt;

send_keystroke_to_interactive_process &lt;span class=&quot;s2&quot;&gt;&quot;i&quot;&lt;/span&gt;
send -h &lt;span class=&quot;s2&quot;&gt;&quot;Example text&quot;&lt;/span&gt;
send_keystroke_to_interactive_process &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;$&lt;span class=&quot;s2&quot;&gt;CTRLC&quot;&lt;/span&gt;
send -h &lt;span class=&quot;s2&quot;&gt;&quot;:wq&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\r&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;
expect_prompt

send &lt;span class=&quot;s2&quot;&gt;&quot;exit&quot;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;comments&quot;&gt;Comments&lt;/h2&gt;

&lt;ul&gt;


&lt;/ul&gt;

&lt;div id=&quot;disqus_thread&quot;&gt;&lt;/div&gt;
&lt;script&gt;

/**
 *  RECOMMENDED CONFIGURATION VARIABLES: EDIT AND UNCOMMENT THE SECTION BELOW TO INSERT DYNAMIC VALUES FROM YOUR PLATFORM OR CMS.
 *  LEARN WHY DEFINING THESE VARIABLES IS IMPORTANT: https://disqus.com/admin/universalcode/#configuration-variables */
var disqus_config = function () {
    this.page.url = &quot;https://blog.waleedkhan.name/automating-terminal-demos/&quot;;
    this.page.identifier = &quot;automating-terminal-demos/&quot;;
};

(function() { // DON'T EDIT BELOW THIS LINE
    var d = document, s = d.createElement('script');
    s.src = '//waleedkhan-name.disqus.com/embed.js';
    s.setAttribute('data-timestamp', +new Date());
    (d.head || d.body).appendChild(s);
})();
&lt;/script&gt;

&lt;noscript&gt;Please enable JavaScript to view the &lt;a href=&quot;https://disqus.com/?ref_noscript&quot;&gt;comments powered by Disqus.&lt;/a&gt;&lt;/noscript&gt;

</description>
        <pubDate>Sun, 20 Jun 2021 00:00:00 -0500</pubDate>
        <link>https://blog.waleedkhan.name/automating-terminal-demos/</link>
        <guid isPermaLink="true">https://blog.waleedkhan.name/automating-terminal-demos/</guid>
        
        <category>software-engineering</category>
        
        
      </item>
    
      <item>
        <title>git undo: We can do better</title>
        <description>&lt;p&gt;&lt;strong&gt;Update for future readers&lt;/strong&gt;: Are you looking for a way to undo something with Git? The &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;git undo&lt;/code&gt; command won’t help with your current issue (it needs to be installed ahead of time), but it can make dealing with future issues a lot easier. Try installing &lt;a href=&quot;https://github.com/arxanas/git-branchless&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;git-branchless&lt;/code&gt;&lt;/a&gt;, and then see the &lt;a href=&quot;https://github.com/arxanas/git-branchless/wiki/Command:-git-undo&quot;&gt;documentation for &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;git undo&lt;/code&gt;&lt;/a&gt;.&lt;/p&gt;

&lt;hr /&gt;

&lt;ul id=&quot;markdown-toc&quot;&gt;
  &lt;li&gt;&lt;a href=&quot;#motivation&quot; id=&quot;markdown-toc-motivation&quot;&gt;Motivation&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#solution&quot; id=&quot;markdown-toc-solution&quot;&gt;Solution&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#demos&quot; id=&quot;markdown-toc-demos&quot;&gt;Demos&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#implementation&quot; id=&quot;markdown-toc-implementation&quot;&gt;Implementation&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#related-posts&quot; id=&quot;markdown-toc-related-posts&quot;&gt;Related posts&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#comments&quot; id=&quot;markdown-toc-comments&quot;&gt;Comments&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;motivation&quot;&gt;Motivation&lt;/h2&gt;

&lt;p&gt;Git is a version control system with robust underlying principles, and yet, novice users are terrified of it. When they make a mistake, many would rather delete and re-clone the repository than try to fix it. Even proficient users can find wading through the reflog tedious.&lt;/p&gt;

&lt;p&gt;Why? How is it so easy to “lose” your data in a system that’s supposed to never lose your data?&lt;/p&gt;

&lt;p&gt;Well, it’s not that it’s too easy to lose your data — but rather, that it’s too difficult to recover it. For each operation you want to recover from, there’s a different “magic” incantation to undo it. All the data is still there in principle, but it’s not accessible to many in practice.&lt;/p&gt;

&lt;p&gt;Here’s my theory: novice and intermediate users would significantly improve their understanding and efficacy with Git if they weren’t afraid of making mistakes.&lt;/p&gt;

&lt;h2 id=&quot;solution&quot;&gt;Solution&lt;/h2&gt;

&lt;p&gt;To address this problem, I offer &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;git undo&lt;/code&gt;, &lt;a href=&quot;https://github.com/arxanas/git-branchless&quot;&gt;part of the git-branchless suite of tools&lt;/a&gt;. To my knowledge, this is the most capable undo tool currently available for Git. For example, it can undo bad merges and rebases with ease, and there are even some rare operations that &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;git undo&lt;/code&gt; can undo &lt;a href=&quot;https://github.com/arxanas/git-branchless/wiki/Architecture#comparison-with-the-reflog&quot;&gt;which can’t be undone with &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;git reflog&lt;/code&gt;&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Update 2021-06-21&lt;/em&gt;: &lt;a href=&quot;https://news.ycombinator.com/item?id=27580659&quot;&gt;user &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;gldnspud&lt;/code&gt; on Hacker News&lt;/a&gt; points out that the &lt;a href=&quot;https://gitup.co/&quot;&gt;GitUp&lt;/a&gt; client also supports undo/redo via snapshots, also by adding additional plumbing on top of Git.&lt;/p&gt;

&lt;p&gt;I’ve presented demos below, and briefly discussed the implementation at the end of the article. My hope is that by making it easier to fix mistakes, novice Git users will be able to experiment more freely and learn more effectively.&lt;/p&gt;

&lt;h2 id=&quot;demos&quot;&gt;Demos&lt;/h2&gt;

&lt;p&gt;Undoing an amended commit:&lt;/p&gt;

&lt;script id=&quot;asciicast-2T3MdVSJVlGcK73Yl5YRXbSGK&quot; src=&quot;https://asciinema.org/a/2T3MdVSJVlGcK73Yl5YRXbSGK.js&quot; async=&quot;&quot;&gt;&lt;/script&gt;

&lt;noscript&gt;&lt;a href=&quot;https://asciinema.org/a/2T3MdVSJVlGcK73Yl5YRXbSGK&quot; target=&quot;_blank&quot;&gt;&lt;img src=&quot;https://asciinema.org/a/2T3MdVSJVlGcK73Yl5YRXbSGK.svg&quot; /&gt;&lt;/a&gt;&lt;/noscript&gt;

&lt;p&gt;Undoing a merge conflict that was resolved wrongly:&lt;/p&gt;

&lt;script id=&quot;asciicast-ziVoTyp4390RaKsdcdNj2gI0Q&quot; src=&quot;https://asciinema.org/a/ziVoTyp4390RaKsdcdNj2gI0Q.js&quot; async=&quot;&quot;&gt;&lt;/script&gt;

&lt;noscript&gt;&lt;a href=&quot;https://asciinema.org/a/ziVoTyp4390RaKsdcdNj2gI0Q&quot; target=&quot;_blank&quot;&gt;&lt;img src=&quot;https://asciinema.org/a/ziVoTyp4390RaKsdcdNj2gI0Q.svg&quot; /&gt;&lt;/a&gt;&lt;/noscript&gt;

&lt;h2 id=&quot;implementation&quot;&gt;Implementation&lt;/h2&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;git undo&lt;/code&gt; is made possible by a recent addition to Git: the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;reference-transaction&lt;/code&gt; hook. This hook triggers whenever a change is made to a reference, such as a branch. By recording all reference moves, we can rebuild the state of the commit graph at any previous point in time. Then we accomplish the undo operation by restoring all references to their previous positions in time (possibly creating or deleting references in the process).&lt;/p&gt;

&lt;p&gt;I originally built &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;git-branchless&lt;/code&gt; in order to replicate a certain Mercurial workflow, but the data structures turn out to be flexible enough to give us a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;git undo&lt;/code&gt; feature nearly for free. You can find more detail at the &lt;a href=&quot;https://github.com/arxanas/git-branchless/wiki/Architecture&quot;&gt;Architecture&lt;/a&gt; page for the project.&lt;/p&gt;

&lt;h2 id=&quot;related-posts&quot;&gt;Related posts&lt;/h2&gt;

&lt;p&gt;The following are hand-curated posts which you might find interesting.&lt;/p&gt;

&lt;table class=&quot;related-posts&quot;&gt;
&lt;thead&gt;
  &lt;tr&gt;
    &lt;th&gt;Date&lt;/th&gt;
    &lt;th&gt;&lt;/th&gt;
    &lt;th&gt;Title&lt;/th&gt;
  &lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;

  &lt;tr&gt;
    &lt;td&gt;19&amp;nbsp;June&amp;nbsp;2021&lt;/td&gt;
    &lt;td class=&quot;this-post&quot;&gt;
      
      (this&amp;nbsp;post)
      
      &lt;/td&gt;
    &lt;td&gt;&lt;a href=&quot;/git-undo/&quot;&gt;git undo: We can do better&lt;/a&gt;
    &lt;/td&gt;
  &lt;/tr&gt;

  &lt;tr&gt;
    &lt;td&gt;12&amp;nbsp;October&amp;nbsp;2021&lt;/td&gt;
    &lt;td class=&quot;this-post&quot;&gt;
      
      &lt;/td&gt;
    &lt;td&gt;&lt;a href=&quot;/in-memory-rebases/&quot;&gt;Lightning-fast rebases with git-move&lt;/a&gt;
    &lt;/td&gt;
  &lt;/tr&gt;

&lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;Want to see more of my posts? Follow me &lt;a href=&quot;https://twitter.com/arxanas&quot;&gt;on Twitter&lt;/a&gt; or subscribe &lt;a href=&quot;/feed.xml&quot;&gt;via RSS&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&quot;comments&quot;&gt;Comments&lt;/h2&gt;

&lt;ul&gt;

&lt;li class=&quot;hacker-news&quot;&gt;&lt;a href=&quot;https://news.ycombinator.com/item?id=27579701 &quot;&gt;Discussion on Hacker News&lt;/a&gt;&lt;/li&gt;


&lt;/ul&gt;

&lt;div id=&quot;disqus_thread&quot;&gt;&lt;/div&gt;
&lt;script&gt;

/**
 *  RECOMMENDED CONFIGURATION VARIABLES: EDIT AND UNCOMMENT THE SECTION BELOW TO INSERT DYNAMIC VALUES FROM YOUR PLATFORM OR CMS.
 *  LEARN WHY DEFINING THESE VARIABLES IS IMPORTANT: https://disqus.com/admin/universalcode/#configuration-variables */
var disqus_config = function () {
    this.page.url = &quot;https://blog.waleedkhan.name/git-undo/&quot;;
    this.page.identifier = &quot;git-undo/&quot;;
};

(function() { // DON'T EDIT BELOW THIS LINE
    var d = document, s = d.createElement('script');
    s.src = '//waleedkhan-name.disqus.com/embed.js';
    s.setAttribute('data-timestamp', +new Date());
    (d.head || d.body).appendChild(s);
})();
&lt;/script&gt;

&lt;noscript&gt;Please enable JavaScript to view the &lt;a href=&quot;https://disqus.com/?ref_noscript&quot;&gt;comments powered by Disqus.&lt;/a&gt;&lt;/noscript&gt;

</description>
        <pubDate>Sat, 19 Jun 2021 00:00:00 -0500</pubDate>
        <link>https://blog.waleedkhan.name/git-undo/</link>
        <guid isPermaLink="true">https://blog.waleedkhan.name/git-undo/</guid>
        
        <category>git</category>
        
        <category>rust</category>
        
        <category>software-engineering</category>
        
        
      </item>
    
      <item>
        <title>My easiest-to-fix Smash mistakes</title>
        <description>&lt;ul id=&quot;markdown-toc&quot;&gt;
  &lt;li&gt;&lt;a href=&quot;#not-jumping-out-of-shield&quot; id=&quot;markdown-toc-not-jumping-out-of-shield&quot;&gt;Not jumping out of shield&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#not-jumping-all-the-way&quot; id=&quot;markdown-toc-not-jumping-all-the-way&quot;&gt;Not jumping all the way&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#not-holding-a-direction-in-the-air&quot; id=&quot;markdown-toc-not-holding-a-direction-in-the-air&quot;&gt;Not holding a direction in the air&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#not-lsi-ing-down&quot; id=&quot;markdown-toc-not-lsi-ing-down&quot;&gt;Not LSI-ing down&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#not-full-hopping-to-follow-up-after-a-throw&quot; id=&quot;markdown-toc-not-full-hopping-to-follow-up-after-a-throw&quot;&gt;Not full-hopping to follow up after a throw&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#pummeling-after-grab-when-seeking-a-follow-up&quot; id=&quot;markdown-toc-pummeling-after-grab-when-seeking-a-follow-up&quot;&gt;Pummeling after grab when seeking a follow-up&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#related-posts&quot; id=&quot;markdown-toc-related-posts&quot;&gt;Related posts&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#comments&quot; id=&quot;markdown-toc-comments&quot;&gt;Comments&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;These are the easiest-to-fix mistakes that I’d been making in Smash so far, even well into Elite Smash. I main Chrom, but these are largely character-agnostic. I’m curious to hear yours in the comments as well.&lt;/p&gt;

&lt;h2 id=&quot;not-jumping-out-of-shield&quot;&gt;Not jumping out of shield&lt;/h2&gt;

&lt;p&gt;When you’re in shield and release the shield button, &lt;a href=&quot;https://www.ssbwiki.com/Out_of_shield&quot;&gt;it takes 11 frames for the animation&lt;/a&gt; to complete. However, you can initiate a jump immediately out of shield, without incurring the shield-drop animation penalty.&lt;/p&gt;

&lt;p&gt;I used to correctly do rising aerial attacks out of shield without dropping shield, but when retreating, I would drop shield and then input jump backwards. The 11-frame penalty is severe, which means I got hit a lot when I could have escaped safely.&lt;/p&gt;

&lt;h2 id=&quot;not-jumping-all-the-way&quot;&gt;Not jumping all the way&lt;/h2&gt;

&lt;p&gt;When jumping away from the opponent, especially out of shield, I would oftentimes only input a 45-degree control stick input. I had gotten in the habit of not pressing directly left or right, because while in shield, I often rolled instead of jumping.&lt;/p&gt;

&lt;p&gt;However, it means that my jump goes much less far than it could, and I often didn’t escape shield pressure. I had to practice pressing the jump button and slamming the control stick all the way backward without inducing a roll.&lt;/p&gt;

&lt;h2 id=&quot;not-holding-a-direction-in-the-air&quot;&gt;Not holding a direction in the air&lt;/h2&gt;

&lt;p&gt;If you hold a horizontal direction while you’re moving, you accelerate in that direction. But I assumed I could let go of the control stick once I reached my character’s maximum horizontal airspeed. It appears that this is not the case: you’ll slow down slightly once you let go of the control stick, so you have to keep holding it. This is important when you’re trying to recover from above and want to avoid the enemy’s attacks from below.&lt;/p&gt;

&lt;h2 id=&quot;not-lsi-ing-down&quot;&gt;Not LSI-ing down&lt;/h2&gt;

&lt;p&gt;&lt;a href=&quot;https://www.ssbwiki.com/Directional_influence#In_Super_Smash_Bros._Ultimate&quot;&gt;Directional Influence (DI)&lt;/a&gt; is the act of holding a direction when you get launched to change the angle, which can help you survive for longer. I heeded the typical advice of DI-ing towards the corner to maximize my flight path length. However, &lt;em&gt;Smash Ultimate&lt;/em&gt; also features &lt;a href=&quot;https://www.ssbwiki.com/Directional_influence#In_Super_Smash_Bros._Ultimate&quot;&gt;Launch Speed Influence (LSI)&lt;/a&gt;, which lets you decrease the amount of knockback when getting launched by adding a downward component to your DI.&lt;/p&gt;

&lt;p&gt;In many cases, LSI-ing straight down is the best option. For example, Bowser’s side-special, Ike’s up-special, and Luigi’s down-special launch you towards the corner anyways, so you benefit more from LSI-ing straight down than DI-ing towards the corner. There are a lot of situations which are improved by LSI-ing down instead of DI-ing up, so try it out if you haven’t been already.&lt;/p&gt;

&lt;p&gt;Note that LSI doesn’t reduce the knockback for moves which launch you straight up.&lt;/p&gt;

&lt;h2 id=&quot;not-full-hopping-to-follow-up-after-a-throw&quot;&gt;Not full-hopping to follow up after a throw&lt;/h2&gt;

&lt;p&gt;This one is a little silly. I practiced my down-throw to up-air combo (as Chrom), which only works at low percents. To execute it as a true combo, you have to input a short-hop aerial. For whatever reason, it never occurred to me that at higher percents, you could just… jump higher, and still go for a follow-up (non-guaranteed). As Chrom, you can still get a follow-up even at 60% or so if you full-hop and read the opponent’s DI. Of course, the advice applies to most characters which have a grab combo. This revelation made throws dramatically more useful!&lt;/p&gt;

&lt;h2 id=&quot;pummeling-after-grab-when-seeking-a-follow-up&quot;&gt;Pummeling after grab when seeking a follow-up&lt;/h2&gt;

&lt;p&gt;I used to always pummel the maximum number of times as I could manage when grabbing. But this allows your opponent to react to the grab and input DI. If you’re seeking an immediate follow-up at low- to mid-percents, then it makes sense to throw them immediately, before they can input DI.&lt;/p&gt;

&lt;p&gt;It does make sense to pummel sometimes:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;When you only care about the damage, because you know you’re not going to get a follow-up anyways.&lt;/li&gt;
  &lt;li&gt;When you want to &lt;a href=&quot;https://www.ssbwiki.com/Stale-move_negation&quot;&gt;un-stale&lt;/a&gt; a different move (e.g. back-air as a kill option).&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;em&gt;Want to improve your Smash? I made &lt;a href=&quot;https://ssb.fit&quot;&gt;the Smash Training app&lt;/a&gt; to help you improve your technical skills for free.&lt;/em&gt;&lt;/p&gt;

&lt;h2 id=&quot;related-posts&quot;&gt;Related posts&lt;/h2&gt;

&lt;p&gt;The following are hand-curated posts which you might find interesting.&lt;/p&gt;

&lt;table class=&quot;related-posts&quot;&gt;
&lt;thead&gt;
  &lt;tr&gt;
    &lt;th&gt;Date&lt;/th&gt;
    &lt;th&gt;&lt;/th&gt;
    &lt;th&gt;Title&lt;/th&gt;
  &lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;

  &lt;tr&gt;
    &lt;td&gt;30&amp;nbsp;July&amp;nbsp;2020&lt;/td&gt;
    &lt;td class=&quot;this-post&quot;&gt;
      
      &lt;/td&gt;
    &lt;td&gt;&lt;a href=&quot;/lan-adapter/&quot;&gt;A LAN adapter isn't everything&lt;/a&gt;
    &lt;/td&gt;
  &lt;/tr&gt;

  &lt;tr&gt;
    &lt;td&gt;04&amp;nbsp;August&amp;nbsp;2020&lt;/td&gt;
    &lt;td class=&quot;this-post&quot;&gt;
      
      &lt;/td&gt;
    &lt;td&gt;&lt;a href=&quot;/smash-bros-parabola-rule/&quot;&gt;Smash Bros: the parabola rule&lt;/a&gt;
    &lt;/td&gt;
  &lt;/tr&gt;

  &lt;tr&gt;
    &lt;td&gt;10&amp;nbsp;March&amp;nbsp;2021&lt;/td&gt;
    &lt;td class=&quot;this-post&quot;&gt;
      
      &lt;/td&gt;
    &lt;td&gt;&lt;a href=&quot;/pro-controller-stick-drift/&quot;&gt;On Pro Controller stick drift&lt;/a&gt;
    &lt;/td&gt;
  &lt;/tr&gt;

  &lt;tr&gt;
    &lt;td&gt;02&amp;nbsp;April&amp;nbsp;2021&lt;/td&gt;
    &lt;td class=&quot;this-post&quot;&gt;
      
      &lt;/td&gt;
    &lt;td&gt;&lt;a href=&quot;/hours-invested-vs-percentile-rank/&quot;&gt;Anecdata: hours invested vs percentile rank&lt;/a&gt;
    &lt;/td&gt;
  &lt;/tr&gt;

  &lt;tr&gt;
    &lt;td&gt;08&amp;nbsp;June&amp;nbsp;2021&lt;/td&gt;
    &lt;td class=&quot;this-post&quot;&gt;
      
      (this&amp;nbsp;post)
      
      &lt;/td&gt;
    &lt;td&gt;&lt;a href=&quot;/smash-mistakes/&quot;&gt;My easiest-to-fix Smash mistakes&lt;/a&gt;
    &lt;/td&gt;
  &lt;/tr&gt;

&lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;Want to see more of my posts? Follow me &lt;a href=&quot;https://twitter.com/arxanas&quot;&gt;on Twitter&lt;/a&gt; or subscribe &lt;a href=&quot;/feed.xml&quot;&gt;via RSS&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&quot;comments&quot;&gt;Comments&lt;/h2&gt;

&lt;ul&gt;


&lt;li&gt;&lt;a href=&quot;https://www.reddit.com/r/CrazyHand/comments/nv7hv5/my_easiesttofix_smash_mistakes/ &quot;&gt;Discussion on Reddit&lt;/a&gt;&lt;/li&gt;

&lt;/ul&gt;

&lt;div id=&quot;disqus_thread&quot;&gt;&lt;/div&gt;
&lt;script&gt;

/**
 *  RECOMMENDED CONFIGURATION VARIABLES: EDIT AND UNCOMMENT THE SECTION BELOW TO INSERT DYNAMIC VALUES FROM YOUR PLATFORM OR CMS.
 *  LEARN WHY DEFINING THESE VARIABLES IS IMPORTANT: https://disqus.com/admin/universalcode/#configuration-variables */
var disqus_config = function () {
    this.page.url = &quot;https://blog.waleedkhan.name/smash-mistakes/&quot;;
    this.page.identifier = &quot;smash-mistakes/&quot;;
};

(function() { // DON'T EDIT BELOW THIS LINE
    var d = document, s = d.createElement('script');
    s.src = '//waleedkhan-name.disqus.com/embed.js';
    s.setAttribute('data-timestamp', +new Date());
    (d.head || d.body).appendChild(s);
})();
&lt;/script&gt;

&lt;noscript&gt;Please enable JavaScript to view the &lt;a href=&quot;https://disqus.com/?ref_noscript&quot;&gt;comments powered by Disqus.&lt;/a&gt;&lt;/noscript&gt;

</description>
        <pubDate>Tue, 08 Jun 2021 00:00:00 -0500</pubDate>
        <link>https://blog.waleedkhan.name/smash-mistakes/</link>
        <guid isPermaLink="true">https://blog.waleedkhan.name/smash-mistakes/</guid>
        
        <category>smash-bros</category>
        
        
      </item>
    
      <item>
        <title>Incrementally porting a small Python project to Rust</title>
        <description>&lt;p&gt;I’ve been working on &lt;a href=&quot;https://github.com/arxanas/git-branchless&quot;&gt;git-branchless&lt;/a&gt;, a Git workflow similar to the Mercurial “stacked-diff” workflows used at Google and Facebook. I originally wrote it in Python, but later ported it to Rust. This post details various aspects of the porting process.&lt;/p&gt;

&lt;ul id=&quot;markdown-toc&quot;&gt;
  &lt;li&gt;&lt;a href=&quot;#introduction&quot; id=&quot;markdown-toc-introduction&quot;&gt;Introduction&lt;/a&gt;    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;#motivation&quot; id=&quot;markdown-toc-motivation&quot;&gt;Motivation&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#why-rust&quot; id=&quot;markdown-toc-why-rust&quot;&gt;Why Rust?&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#previous-rust-experience&quot; id=&quot;markdown-toc-previous-rust-experience&quot;&gt;Previous Rust experience&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#why-incremental&quot; id=&quot;markdown-toc-why-incremental&quot;&gt;Why incremental?&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#porting&quot; id=&quot;markdown-toc-porting&quot;&gt;Porting&lt;/a&gt;    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;#strategy&quot; id=&quot;markdown-toc-strategy&quot;&gt;Strategy&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#ide-ergonomics&quot; id=&quot;markdown-toc-ide-ergonomics&quot;&gt;IDE ergonomics&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#build-ergonomics&quot; id=&quot;markdown-toc-build-ergonomics&quot;&gt;Build ergonomics&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#testing-ergonomics&quot; id=&quot;markdown-toc-testing-ergonomics&quot;&gt;Testing ergonomics&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#interop-ergonomics&quot; id=&quot;markdown-toc-interop-ergonomics&quot;&gt;Interop ergonomics&lt;/a&gt;        &lt;ul&gt;
          &lt;li&gt;&lt;a href=&quot;#pyo3s-hello-world&quot; id=&quot;markdown-toc-pyo3s-hello-world&quot;&gt;PyO3’s hello world&lt;/a&gt;&lt;/li&gt;
          &lt;li&gt;&lt;a href=&quot;#real-example&quot; id=&quot;markdown-toc-real-example&quot;&gt;Real example&lt;/a&gt;&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#bugs-encountered&quot; id=&quot;markdown-toc-bugs-encountered&quot;&gt;Bugs encountered&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#results&quot; id=&quot;markdown-toc-results&quot;&gt;Results&lt;/a&gt;    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;#porting-time&quot; id=&quot;markdown-toc-porting-time&quot;&gt;Porting time&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#lines-of-code&quot; id=&quot;markdown-toc-lines-of-code&quot;&gt;Lines of code&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#time-comparison&quot; id=&quot;markdown-toc-time-comparison&quot;&gt;Time comparison&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#conclusions&quot; id=&quot;markdown-toc-conclusions&quot;&gt;Conclusions&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#related-posts&quot; id=&quot;markdown-toc-related-posts&quot;&gt;Related posts&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#comments&quot; id=&quot;markdown-toc-comments&quot;&gt;Comments&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;introduction&quot;&gt;Introduction&lt;/h2&gt;

&lt;h3 id=&quot;motivation&quot;&gt;Motivation&lt;/h3&gt;

&lt;p&gt;Initially, I prototyped a working version of git-branchless using Python. The &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;git-branchless&lt;/code&gt; executable can be invoked in one of two ways:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;&lt;strong&gt;Explicitly by a user’s command&lt;/strong&gt;. For example, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;git-branchless smartlog&lt;/code&gt;. This is typically aliased to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;git sl&lt;/code&gt;.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;By a &lt;a href=&quot;https://git-scm.com/book/en/v2/Customizing-Git-Git-Hooks&quot;&gt;Git “hook”&lt;/a&gt;&lt;/strong&gt;. This is an event that triggers when specific actions occur in the repository. For example, when a user makes a commit, it triggers the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;post-commit&lt;/code&gt; hook, which then tells &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;git-branchless&lt;/code&gt; to register the commit in its internal database.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;However, some Git operations can result in many Git hook invocations, and therefore Python invocations. For example, a rebase of a stack of several commits will trigger several &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;post-commit&lt;/code&gt; hooks in sequence. The Python interpreter takes tens or hundreds of milliseconds to start up, which degrades performance in the situation where we invoke it many times serially.&lt;/p&gt;

&lt;p&gt;I considered incorporating a long-running background process into the architecture, but I hate the amount of additional complexity and edge-cases associated with such an approach. Instead, I decided to rewrite the project in Rust to address the startup time issue.&lt;/p&gt;

&lt;h3 id=&quot;why-rust&quot;&gt;Why Rust?&lt;/h3&gt;

&lt;p&gt;These were the requirements for my choice of language:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Fast startup time.&lt;/li&gt;
  &lt;li&gt;Bindings to &lt;a href=&quot;https://www.sqlite.org/index.html&quot;&gt;SQLite&lt;/a&gt;, &lt;a href=&quot;https://libgit2.org/&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;libgit2&lt;/code&gt;&lt;/a&gt; (or equivalent).&lt;/li&gt;
  &lt;li&gt;Bindings to some kind of &lt;a href=&quot;https://en.wikipedia.org/wiki/Text-based_user_interface&quot;&gt;TUI&lt;/a&gt; library.&lt;/li&gt;
  &lt;li&gt;Python interop, to support an incremental porting approach.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;I chose Rust because I had some prior experience with it, and I liked the ML-style type system. The Python codebase was already statically-checked with Mypy and written in an ML style, so it was largely a line-by-line port.&lt;/p&gt;

&lt;h3 id=&quot;previous-rust-experience&quot;&gt;Previous Rust experience&lt;/h3&gt;

&lt;p&gt;Before this project, I had a small amount of experience with Rust. I was working in an OCaml codebase, and implemented one module in Rust for performance reasons. This was also a case of interoperating between Rust and another programming language.&lt;/p&gt;

&lt;p&gt;I didn’t have any experience working with a significant amount of Rust code. However, OCaml is similar to Rust (as Rust descends from OCaml), and I had already read a couple of papers on linear types, so the language didn’t surprise me very much.&lt;/p&gt;

&lt;h3 id=&quot;why-incremental&quot;&gt;Why incremental?&lt;/h3&gt;

&lt;p&gt;The small amount of code in the project could conceivably have been rewritten all at once, but I figured it would take a long time to iron out all the bugs that way. I wanted a stable end result, rather than to have to deal with occasional bugs after the initial porting process, so I preferred to use an incremental approach and port the project one module at a time.&lt;/p&gt;

&lt;p&gt;By &lt;em&gt;incremental&lt;/em&gt;, I’m referring to the method of porting modules individually, rather than all at once. I accomplished this by calling between Rust and Python as appropriate at runtime.&lt;/p&gt;

&lt;h2 id=&quot;porting&quot;&gt;Porting&lt;/h2&gt;

&lt;p&gt;The last Python-only version of &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;git-branchless&lt;/code&gt; is &lt;a href=&quot;https://github.com/arxanas/git-branchless/releases/tag/v0.1.0&quot;&gt;version 0.1.0&lt;/a&gt;, and the first Rust-only version is &lt;a href=&quot;https://github.com/arxanas/git-branchless/releases/tag/v0.2.0&quot;&gt;version 0.2.0&lt;/a&gt;. You can browse the 65 commits between these versions to see my progress over time.&lt;/p&gt;

&lt;h3 id=&quot;strategy&quot;&gt;Strategy&lt;/h3&gt;

&lt;p&gt;I used the &lt;a href=&quot;https://github.com/PyO3/pyo3&quot;&gt;PyO3&lt;/a&gt; library for Rust to handle the Python-Rust interop. See &lt;a href=&quot;https://github.com/arxanas/git-branchless/commit/3020395c96f519c2a70da521d4d20f591582d628&quot;&gt;this commit&lt;/a&gt; for the initial setup.&lt;/p&gt;

&lt;p&gt;PyO3 supports calling Rust from Python and vice-versa:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Call Rust from Python: a step is added to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;setup.py&lt;/code&gt; which compiles the Rust modules into modules available to Python.&lt;/li&gt;
  &lt;li&gt;Call Python from Rust: a specific version of the Python interpreter is linked into the Rust executable, which can be used to execute Python code.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;I began porting the lowest-level modules individually and worked my way up the dependency hierarchy until I arrived at the main function.&lt;/p&gt;

&lt;p&gt;Since git-branchless is implemented as a short-lived script, I didn’t face any significant lifetime-related difficulties in the Rust version. The problematic situations arose when the Python and Rust code both needed to keep a reference to a shared resource. I worked around these issues by copying the resources on the Rust side, and then undid those copies when I deleted the Python code. For example, when passing a database connection from Python to Rust, I opened a new database connection to the same database on the Rust side.&lt;/p&gt;

&lt;h3 id=&quot;ide-ergonomics&quot;&gt;IDE ergonomics&lt;/h3&gt;

&lt;p&gt;If you’re using VS Code, do not use the &lt;a href=&quot;https://marketplace.visualstudio.com/items?itemName=rust-lang.rust&quot;&gt;official Rust extension (&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;rust-lang.rust&lt;/code&gt;)&lt;/a&gt;, as it’s fairly unreliable, and doesn’t offer too many features. Instead use the &lt;a href=&quot;https://marketplace.visualstudio.com/items?itemName=matklad.rust-analyzer&quot;&gt;Rust Analyzer plugin (&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;matklad.rust-analyzer&lt;/code&gt;)&lt;/a&gt;, which is more reliable, and offers many quality-of-life features.&lt;/p&gt;

&lt;p&gt;The &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;rust-analyzer&lt;/code&gt; IDE experience is refreshingly productive compared to VS Code’s Python offerings.  Some feature highlights:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Autocomplete works reliably, including for symbols not imported into the current scope. In those cases, selecting the autocomplete item also adds a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;use&lt;/code&gt; statement in the appropriate scope.&lt;/li&gt;
  &lt;li&gt;Useful refactorings are suggested routinely. See &lt;a href=&quot;https://rust-analyzer.github.io/manual.html#assists-code-actions&quot;&gt;the manual&lt;/a&gt; for a full list.
    &lt;ul&gt;
      &lt;li&gt;The most common ones I use are “add borrow”/”remove borrow” as appropriate, and “import this missing symbol”. They’re very convenient!&lt;/li&gt;
      &lt;li&gt;You can rename symbols, even across multiple modules. If you move or rename a module, it also automatically refactors the module name.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Inline type annotations are shown.
    &lt;ul&gt;
      &lt;li&gt;This is really useful for longer &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;.iter()&lt;/code&gt; method chains to see the inferred types for lambda parameters and results.&lt;/li&gt;
      &lt;li&gt;It’s not always obvious when values are borrowed or dereferenced, particularly for a beginner. For example, it’s not necessarily obvious when the fields of a struct are borrowed in a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;match&lt;/code&gt; statement. Even if you know the types involved, seeing the borrows is still useful.&lt;/li&gt;
      &lt;li&gt;It’s also just generally helpful to look at a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;let foo = bar();&lt;/code&gt; binding and see what the type of &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;foo&lt;/code&gt; is.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Documents are formatted using &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;rustfmt&lt;/code&gt; on save (if you enable the “format-on-save” setting in VS Code). If you’re not using an automatic formatter, then you’re doing yourself a disservice.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;See &lt;a href=&quot;https://rust-analyzer.github.io/manual.html&quot;&gt;the manual&lt;/a&gt; for a full list.&lt;/p&gt;

&lt;h3 id=&quot;build-ergonomics&quot;&gt;Build ergonomics&lt;/h3&gt;

&lt;p&gt;The Rust incremental build times weren’t particularly fast, particularly when using macros from dependencies, as they cannot be compiled ahead of time. Nonetheless, the incremental build time was generally much less than the time it took to run the entire test suite. It was only a problem when selecting only a few tests to run.&lt;/p&gt;

&lt;p&gt;On the other hand, the compiler diagnostics, static typing, and IDE support are good enough to write significant amounts of code before having to run a build at all. The typechecker was generally faster than Mypy for Python.&lt;/p&gt;

&lt;h3 id=&quot;testing-ergonomics&quot;&gt;Testing ergonomics&lt;/h3&gt;

&lt;p&gt;Rust lets you write unit tests inside the same module as the unit itself, which is particularly convenient when the unit is small enough that you don’t want to expose it to callers. Of course, you can write inline tests in Python too — this is more of an improvement versus other static languages like C++ and Java.&lt;/p&gt;

&lt;p&gt;The dynamic nature of Python makes testing easier in general. For example, it’s oftentimes useful to mock out a dependency in a test without having to declare an interface for a dependency and inject it. In similar cases in Rust, I created a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;testing&lt;/code&gt; sub-module of the modules in question, which exposed the internals of the module to make them more testable.&lt;/p&gt;

&lt;p&gt;The default test runner for Rust leaves a lot to be desired compared to &lt;a href=&quot;https://docs.pytest.org/en/6.2.x/&quot;&gt;Pytest&lt;/a&gt;. It’s difficult to ascertain how many tests ran and how many passed, especially when you’ve attempted to filter out some of the tests. The test runner API is &lt;a href=&quot;https://github.com/rust-lang/rust/issues/49359&quot;&gt;available under a nightly flag&lt;/a&gt;, so hopefully we will see some better test runners become available soon.&lt;/p&gt;

&lt;h3 id=&quot;interop-ergonomics&quot;&gt;Interop ergonomics&lt;/h3&gt;

&lt;p&gt;The ergonomics of the PyO3 library for Python/Rust interop are great. Interop is &lt;em&gt;safe&lt;/em&gt; and &lt;em&gt;composable&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Safety&lt;/em&gt;: I had no instances of segfaults due to interop. (My only segfault was a stack overflow in Rust-only code, unrelated to interop.) Type mismatches are surfaced as helpful &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;TypeError&lt;/code&gt; exceptions in Python. This was a lot better than the OCaml interop I had to do, where not enough type information is carried at runtime to dynamically check type conversions at the interop boundaries.&lt;/p&gt;

&lt;p&gt;PyO3 also uses Rust’s ownership system to ensure that you have a handle to Python’s &lt;a href=&quot;https://en.wikipedia.org/wiki/Global_interpreter_lock&quot;&gt;Global Interpreter Lock (GIL)&lt;/a&gt; before doing Python operations. Even if you don’t have concurrency in your project, it ensures you have a handle to a correctly-initialized Python runtime before attempting to do Python operations.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Composability&lt;/em&gt;: PyO3 makes strong use of Rust’s trait system and coherence rules. If the type system knows how to convert a given set of base types, then it’s easy to teach it how to build an aggregate type consisting of those base types.  This allows for lightweight implicit type conversions between Python types and Rust types, without it being overly difficult to figure out how a type is converted.&lt;/p&gt;

&lt;p&gt;These conversions are all &lt;em&gt;fallible&lt;/em&gt; as well, so you can fail a type conversion when appropriate, which lets you keep boilerplate error-checking out of the calling code.&lt;/p&gt;

&lt;p&gt;After having dealt with OCaml’s overly-powerful module system, I can say that I prefer &lt;a href=&quot;https://en.wikipedia.org/wiki/Type_class&quot;&gt;typeclasses&lt;/a&gt; (Rust traits) for nearly all day-to-day programming. (The typeclass vs module preference is one reason people prefer Haskell over OCaml or vice-versa.)&lt;/p&gt;

&lt;h4 id=&quot;pyo3s-hello-world&quot;&gt;PyO3’s hello world&lt;/h4&gt;

&lt;p&gt;To start, let’s take a look at this complete example:&lt;/p&gt;

&lt;div class=&quot;language-rust highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;use&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;pyo3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;nn&quot;&gt;prelude&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;fn&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;PyResult&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nn&quot;&gt;Python&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;with_gil&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(|&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;py&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;os&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;py&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;.import&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;os&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;?&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;username&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;os&lt;/span&gt;
            &lt;span class=&quot;nf&quot;&gt;.call1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;getenv&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;USER&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,))&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;?&lt;/span&gt;
            &lt;span class=&quot;nf&quot;&gt;.extract&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;?&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;nd&quot;&gt;println!&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Hello, {}&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;username&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;nf&quot;&gt;Ok&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(())&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;})&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;To summarize:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;You create an instance of a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Python&lt;/code&gt; object using &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Python::with_gil&lt;/code&gt; or similar.&lt;/li&gt;
  &lt;li&gt;You can then access modules, etc., by calling a method like &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;py.import&lt;/code&gt;. Error-checking is handled with the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;?&lt;/code&gt; operator. It will fail e.g. if the module could not be found.&lt;/li&gt;
  &lt;li&gt;To call a method with arguments, use the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;call1&lt;/code&gt; method with a tuple of arguments. The tuple has to contain values of types which implement the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;IntoPy&lt;/code&gt; trait, which is already implemented for Rust built-in types. (The &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;call&lt;/code&gt; method works for calls with both positional and keyword arguments; the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;call0&lt;/code&gt; method works for simple calls without any arguments.) The result is checked with &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;?&lt;/code&gt;. It will fail e.g. if the method threw an exception.&lt;/li&gt;
  &lt;li&gt;To convert the result into a Rust type, call &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;.extract()&lt;/code&gt; on it. The result is checked with &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;?&lt;/code&gt;. It will fail e.g. if the Python type could not be converted into the desired Rust type at runtime. In this case, the desired result type is indicated with the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;: String&lt;/code&gt; type annotation on the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;let&lt;/code&gt;-binding.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;It would be difficult to make this simpler and still be statically-checked!&lt;/p&gt;

&lt;h4 id=&quot;real-example&quot;&gt;Real example&lt;/h4&gt;

&lt;p&gt;Consider this example of the Python wrapper for the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;make_graph&lt;/code&gt; function.&lt;/p&gt;

&lt;div class=&quot;language-rust highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nd&quot;&gt;#[pyfunction]&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;fn&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;py_make_graph&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;py&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Python&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;repo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;PyObject&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;merge_base_db&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;PyMergeBaseDb&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;event_replayer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;PyEventReplayer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;head_oid&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;Option&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;PyOidStr&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;main_branch_oid&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;PyOid&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;branch_oids&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;HashSet&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;PyOidStr&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;hide_commits&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;bool&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;PyResult&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;PyCommitGraph&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;py_repo&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;repo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;PyRepo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;repo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;repo&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;.extract&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;py&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;?&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;PyMergeBaseDb&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;merge_base_db&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;merge_base_db&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;PyEventReplayer&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;event_replayer&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;event_replayer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;head_oid&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;HeadOid&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;head_oid&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;.map&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(|&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;PyOidStr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;oid&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)|&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;oid&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;));&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;PyOid&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;main_branch_oid&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;main_branch_oid&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;main_branch_oid&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;MainBranchOid&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;main_branch_oid&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;branch_oids&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;BranchOids&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;branch_oids&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;.into_iter&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;.map&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(|&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;PyOidStr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;oid&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)|&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;oid&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;.collect&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;());&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;graph&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;make_graph&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;repo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;merge_base_db&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;event_replayer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;head_oid&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;main_branch_oid&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;branch_oids&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;hide_commits&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;graph&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;map_err_to_py_err&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;graph&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;Could not make graph&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;?&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;graph&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;PyResult&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;HashMap&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;PyOidStr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;PyNode&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;graph&lt;/span&gt;
        &lt;span class=&quot;nf&quot;&gt;.into_iter&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
        &lt;span class=&quot;nf&quot;&gt;.map&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(|(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;oid&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;node&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)|&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;py_node&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;node_to_py_node&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;py&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;py_repo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;node&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;?&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
            &lt;span class=&quot;nf&quot;&gt;Ok&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;PyOidStr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;oid&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;py_node&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;})&lt;/span&gt;
        &lt;span class=&quot;nf&quot;&gt;.collect&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;graph&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;graph&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;?&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;nf&quot;&gt;Ok&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;graph&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Going over it:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;The function is annotated with the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;#[pyfunction]&lt;/code&gt; macro. This means that any parameters are automatically converted from &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;PyObject&lt;/code&gt;s into the listed types at runtime. It also inserts the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;py: Python&lt;/code&gt; argument, if your function needs it. The corresponding Python function is registered to be available in a module accessible to Python, not shown here.&lt;/li&gt;
  &lt;li&gt;Most argument types are complex types like &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;PyMergeBaseDb&lt;/code&gt; (which wraps the Rust type &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;MergeBaseDb&lt;/code&gt;) or composite types like &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;HashSet&amp;lt;PyOidStr&amp;gt;&lt;/code&gt;.
    &lt;ul&gt;
      &lt;li&gt;You can actually annotate regular Rust types to make them convertible into Python types. I chose to create separate types like &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;PyMergeBaseDb&lt;/code&gt; so that it would be easier to delete them later, without separating out the Python-specific functionality from the Rust functionality.&lt;/li&gt;
      &lt;li&gt;The type &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;PyOidStr&lt;/code&gt; is a wrapper type which converts from a Python &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;str&lt;/code&gt; into a Rust &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;git2::Oid&lt;/code&gt;. We can’t use a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;String&lt;/code&gt; here, because then PyO3 would convert the Python &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;str&lt;/code&gt; into a Rust &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;String&lt;/code&gt;, which is not what we want. So we use a wrapper type to define a non-default type conversion behavior.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;The &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;repo&lt;/code&gt; argument is left as a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;PyObject&lt;/code&gt;, rather than a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;PyRepo&lt;/code&gt; object, because I call Python methods on it later. I get a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;git2::Repository&lt;/code&gt; object corresponding to it in the body of the function with the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;.extract&lt;/code&gt; function.&lt;/li&gt;
  &lt;li&gt;I explicitly unpack each wrapped argument in the body of the function. This isn’t strictly necessary, and you can just use e.g. &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;repo.0&lt;/code&gt; if you like, which would make the function body significantly shorter. I did this as a stylistic matter to ensure exhaustiveness-checking.&lt;/li&gt;
  &lt;li&gt;The Rust &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;make_graph&lt;/code&gt; function is called with Rust types, and it returns a Rust type.&lt;/li&gt;
  &lt;li&gt;The result of &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;make_graph&lt;/code&gt; is checked with &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;map_err_to_py_err&lt;/code&gt;. I’m pretty sure this is unnecessary, and it could have been handled by &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;?&lt;/code&gt;, but I wasn’t familiar enough when I was writing this code.&lt;/li&gt;
  &lt;li&gt;We convert the result back into a Python type with &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;into_iter().map().collect()&lt;/code&gt;, and then check the result with &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;?&lt;/code&gt;.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;I could have made this example even shorter by using more wrapper types (for &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;head_oid&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;main_branch_oid&lt;/code&gt;, and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;branch_oids&lt;/code&gt;) and by not creating intermediate variables.&lt;/p&gt;

&lt;h3 id=&quot;bugs-encountered&quot;&gt;Bugs encountered&lt;/h3&gt;

&lt;p&gt;I kept track of a selection of bugs encountered while porting from Python to Rust. Nearly all of them were caught by the regular integration tests. The hardest-to-detect ones involved specification mistranslations, such as changing the meaning of domain entities or setting a configuration flag to the wrong default.&lt;/p&gt;

&lt;p&gt;One example of a changed domain entity is that the Python &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;git2&lt;/code&gt; library only allows the construction of valid object IDs (OIDs), while the Rust &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;git2&lt;/code&gt; library allows the construction of arbitrary OIDs. This means that invalid OID errors are detected at different times. I could have wrapped the Rust OID type in a wrapper type which forces me to verify that it exists, but I didn’t bother, and instead relied on tests to expose bugs.&lt;/p&gt;

&lt;p&gt;These are my raw notes. They do not accurately capture the frequency of each kind of issue.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Returned OID instead of string from method (immediately caught by tests).&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;struct&lt;/code&gt; properties not visible from Python (added &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;#[pyo3(get)]&lt;/code&gt;).&lt;/li&gt;
  &lt;li&gt;No &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;==&lt;/code&gt; method for &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;dataclass&lt;/code&gt; replacements. Worked around by some minor
rewrites.&lt;/li&gt;
  &lt;li&gt;Legitimate regression where we didn’t treat the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;0&lt;/code&gt; commit hash as a
non-existent old/new ref (partly due to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;git2::Oid&lt;/code&gt; not verifying that the
OID exists).&lt;/li&gt;
  &lt;li&gt;Forgot to implement some methods (immediately revealed by tests).&lt;/li&gt;
  &lt;li&gt;Panic due to conversion of -1 to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;usize&lt;/code&gt; with &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;try_into().unwrap()&lt;/code&gt;; fixed by
delaying conversion until bounds check.&lt;/li&gt;
  &lt;li&gt;Legitimate regression: old version of code names were misleading, and I
simplified the ported version into an incorrect version (should have checked
the status of an event at a time in the past, but instead checked the current
status). Detected by tests.&lt;/li&gt;
  &lt;li&gt;Double bug: name mixup for two string fields in Rust; and off-by-one error
when translating reverse iteration in Python to Rust.&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;TypeError: argument 'main_branch_oid': 'Oid' object cannot be converted to 'PyString'&lt;/code&gt; (immediately caught by tests). Legitimate type mismatch
between Python and Rust type signatures.&lt;/li&gt;
  &lt;li&gt;TypeError: accidentally wrote list of bytes to TextIO instead of str.&lt;/li&gt;
  &lt;li&gt;Defaulted a configuration setting to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;false&lt;/code&gt; instead of &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;true&lt;/code&gt;, causing
test failures.&lt;/li&gt;
  &lt;li&gt;Several bugs which reproduced only in CI builds, but not on my local machine. Generally, they were due to passing the wrong environment variables around, which caused them to load the wrong dynamically-linked Rust modules (&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;LD_LIBRARY_PATH&lt;/code&gt;) or invoke the wrong version of Git (&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;PATH&lt;/code&gt;).&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;I filed three issues against Rust libraries that I used:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;rustfmt&lt;/code&gt;: &lt;a href=&quot;https://github.com/rust-lang/rustfmt/issues/4624&quot;&gt;https://github.com/rust-lang/rustfmt/issues/4624&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;cursive&lt;/code&gt;: &lt;a href=&quot;https://github.com/gyscos/cursive/issues/563&quot;&gt;https://github.com/gyscos/cursive/issues/563&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;pyo3&lt;/code&gt;: &lt;a href=&quot;https://github.com/PyO3/pyo3/issues/1490&quot;&gt;https://github.com/PyO3/pyo3/issues/1490&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;results&quot;&gt;Results&lt;/h2&gt;

&lt;h3 id=&quot;porting-time&quot;&gt;Porting time&lt;/h3&gt;

&lt;p&gt;I was generally able to port a given module and its tests in one or two days. However, I worked on this over a long period of time as it’s not part of my day job, so it took a a few months to finish the port (from December 18, 2020 to March 15, 2021).&lt;/p&gt;

&lt;p&gt;The Python code was already written in an ML style, with use of algebraic data types and very limited metaprogramming. If you can statically check your code with Mypy, then it will probably be relatively easy to port it to Rust. But if it uses dynamic runtime features, you should expect it to be more difficult.&lt;/p&gt;

&lt;h3 id=&quot;lines-of-code&quot;&gt;Lines of code&lt;/h3&gt;

&lt;p&gt;I used &lt;a href=&quot;https://github.com/AlDanial/cloc&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;cloc&lt;/code&gt;&lt;/a&gt; to perform line counts.&lt;/p&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th style=&quot;text-align: left&quot;&gt;Language&lt;/th&gt;
      &lt;th style=&quot;text-align: left&quot;&gt;Type&lt;/th&gt;
      &lt;th style=&quot;text-align: left&quot;&gt;Files&lt;/th&gt;
      &lt;th style=&quot;text-align: left&quot;&gt;Blank&lt;/th&gt;
      &lt;th style=&quot;text-align: left&quot;&gt;Comment&lt;/th&gt;
      &lt;th style=&quot;text-align: left&quot;&gt;Code&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;Python&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;Source code&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;16&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;614&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;849&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;2481&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;Python&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;Test code&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;14&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;295&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;535&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;1308&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;Python&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;Total&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;30&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;909&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;1384&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;3789&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;Rust&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;Source code&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;18&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;531&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;835&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;4186&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;Rust&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;Source noise&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;18&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt; &lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt; &lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;644&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;Rust&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;Test code&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;9&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;217&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;11&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;1642&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;Rust&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;Test noise&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;9&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt; &lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt; &lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;277&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;Rust&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;Total&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;27&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;748&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;846&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;5828&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;Rust&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;Total minus noise&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;27&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;748&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;846&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;4907&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;The Rust version has significantly more lines of code. A portion of that can be attributed to “line noise” (lines which only consist of whitespace and closing delimiters). I calculated the amount of line noise with this command:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;find &amp;lt;dir&amp;gt; -name '*.rs' -exec egrep '^[ });,]+$' {} \; | wc -l
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;The rest is probably due to more verbose idioms, such as the following:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Chained iterator functions rather than list comprehensions.&lt;/li&gt;
  &lt;li&gt;Can’t use &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;let seq = if cond { vec.iter() } else  { vec.iter().rev() }&lt;/code&gt;; you have to use a helper function or write the code twice.
    &lt;ul&gt;
      &lt;li&gt;Ideally, you would be able to write something like &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;let seq: impl Iterator&amp;lt;Item = Foo&amp;gt; = { ... };&lt;/code&gt;, although this probably has significant compiler difficulties.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Generators are not yet supported in stable Rust, so I had to rewrite one case of a breadth-first search to use callbacks instead.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Despite this, I feel that Rust is nearly as expressive as Python, particularly compared to a language like C++.&lt;/p&gt;

&lt;h3 id=&quot;time-comparison&quot;&gt;Time comparison&lt;/h3&gt;

&lt;p&gt;It’s hard to compare the speedup between Python and Rust, as I didn’t have any end-to-end benchmarks set up.&lt;/p&gt;

&lt;p&gt;I took the following measurements for running the test suites serially. Unfortunately, it’s not very meaningful, because the majority of the time is spent shelling out to Git to set up the test repository.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Python: ~50 seconds.&lt;/li&gt;
  &lt;li&gt;Rust: ~20 seconds.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The specific case of Git hooks taking too long to run was considerably improved. I initiated a rebase of a stack of 20 commits with the Python and Rust versions. The Python version got through only a couple of commits in 10 seconds or so before I cancelled it, whereas the Rust version finished rebasing all the commits in a few seconds. So the particular use-case I was optimizing for was greatly improved.&lt;/p&gt;

&lt;h2 id=&quot;conclusions&quot;&gt;Conclusions&lt;/h2&gt;

&lt;p&gt;In summary:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;The static typing and IDE support is better for Rust compared to Python.&lt;/li&gt;
  &lt;li&gt;The build and testing workflow is worse for Rust compared to Python.&lt;/li&gt;
  &lt;li&gt;The performance is greatly improved for Rust compared to Python, but I didn’t measure it in a quantitative way.&lt;/li&gt;
  &lt;li&gt;Incremental porting with PyO3 was quite reasonable for this small project.
    &lt;ul&gt;
      &lt;li&gt;It would presumably be more difficult with a larger project which has more nuanced runtime resource management.&lt;/li&gt;
      &lt;li&gt;For “hub-and-spoke” projects, which don’t have deep dependency trees, an incremental approach is likely tractable.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;related-posts&quot;&gt;Related posts&lt;/h2&gt;

&lt;p&gt;The following are hand-curated posts which you might find interesting.&lt;/p&gt;

&lt;table class=&quot;related-posts&quot;&gt;
&lt;thead&gt;
  &lt;tr&gt;
    &lt;th&gt;Date&lt;/th&gt;
    &lt;th&gt;&lt;/th&gt;
    &lt;th&gt;Title&lt;/th&gt;
  &lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;

  &lt;tr&gt;
    &lt;td&gt;03&amp;nbsp;January&amp;nbsp;2021&lt;/td&gt;
    &lt;td class=&quot;this-post&quot;&gt;
      
      &lt;/td&gt;
    &lt;td&gt;&lt;a href=&quot;/rust-modules-for-python-users/&quot;&gt;The Rust module system for Python users&lt;/a&gt;
    &lt;/td&gt;
  &lt;/tr&gt;

  &lt;tr&gt;
    &lt;td&gt;29&amp;nbsp;April&amp;nbsp;2021&lt;/td&gt;
    &lt;td class=&quot;this-post&quot;&gt;
      
      (this&amp;nbsp;post)
      
      &lt;/td&gt;
    &lt;td&gt;&lt;a href=&quot;/port-python-to-rust/&quot;&gt;Incrementally porting a small Python project to Rust&lt;/a&gt;
    &lt;/td&gt;
  &lt;/tr&gt;

&lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;Want to see more of my posts? Follow me &lt;a href=&quot;https://twitter.com/arxanas&quot;&gt;on Twitter&lt;/a&gt; or subscribe &lt;a href=&quot;/feed.xml&quot;&gt;via RSS&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&quot;comments&quot;&gt;Comments&lt;/h2&gt;

&lt;ul&gt;


&lt;/ul&gt;

&lt;div id=&quot;disqus_thread&quot;&gt;&lt;/div&gt;
&lt;script&gt;

/**
 *  RECOMMENDED CONFIGURATION VARIABLES: EDIT AND UNCOMMENT THE SECTION BELOW TO INSERT DYNAMIC VALUES FROM YOUR PLATFORM OR CMS.
 *  LEARN WHY DEFINING THESE VARIABLES IS IMPORTANT: https://disqus.com/admin/universalcode/#configuration-variables */
var disqus_config = function () {
    this.page.url = &quot;https://blog.waleedkhan.name/port-python-to-rust/&quot;;
    this.page.identifier = &quot;port-python-to-rust/&quot;;
};

(function() { // DON'T EDIT BELOW THIS LINE
    var d = document, s = d.createElement('script');
    s.src = '//waleedkhan-name.disqus.com/embed.js';
    s.setAttribute('data-timestamp', +new Date());
    (d.head || d.body).appendChild(s);
})();
&lt;/script&gt;

&lt;noscript&gt;Please enable JavaScript to view the &lt;a href=&quot;https://disqus.com/?ref_noscript&quot;&gt;comments powered by Disqus.&lt;/a&gt;&lt;/noscript&gt;

</description>
        <pubDate>Thu, 29 Apr 2021 00:00:00 -0500</pubDate>
        <link>https://blog.waleedkhan.name/port-python-to-rust/</link>
        <guid isPermaLink="true">https://blog.waleedkhan.name/port-python-to-rust/</guid>
        
        <category>python</category>
        
        <category>rust</category>
        
        <category>software-engineering</category>
        
        
      </item>
    
      <item>
        <title>Anecdata: hours invested vs percentile rank</title>
        <description>&lt;p&gt;The “10,000-hour rule” is the idea suggested in Malcolm Gladwell’s book &lt;a href=&quot;https://en.wikipedia.org/wiki/Outliers_(book)&quot;&gt;&lt;em&gt;Outliers&lt;/em&gt;&lt;/a&gt; that you need about 10,000 hours of practice to become an expert in a given field. The specifics are disputed (both in terms of the absolute amount of time, and how much of skill is explained by practice time), but it’s a simple way to evaluate one’s progress towards experthood.&lt;/p&gt;

&lt;p&gt;I switched from competitive chess to competitive videogaming. It’s interesting to compare the amount of time invested in each and examine how skillful I became in their respective competitive scenes as a result.&lt;/p&gt;

&lt;ul id=&quot;markdown-toc&quot;&gt;
  &lt;li&gt;&lt;a href=&quot;#switching-away-from-chess&quot; id=&quot;markdown-toc-switching-away-from-chess&quot;&gt;Switching away from chess&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#data&quot; id=&quot;markdown-toc-data&quot;&gt;Data&lt;/a&gt;    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;#chess&quot; id=&quot;markdown-toc-chess&quot;&gt;Chess&lt;/a&gt;        &lt;ul&gt;
          &lt;li&gt;&lt;a href=&quot;#background-practicing-chess&quot; id=&quot;markdown-toc-background-practicing-chess&quot;&gt;Background: practicing chess&lt;/a&gt;&lt;/li&gt;
          &lt;li&gt;&lt;a href=&quot;#percentile-calculation&quot; id=&quot;markdown-toc-percentile-calculation&quot;&gt;Percentile calculation&lt;/a&gt;&lt;/li&gt;
          &lt;li&gt;&lt;a href=&quot;#practice-time-breakdown&quot; id=&quot;markdown-toc-practice-time-breakdown&quot;&gt;Practice time breakdown&lt;/a&gt;&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#smash&quot; id=&quot;markdown-toc-smash&quot;&gt;Smash&lt;/a&gt;        &lt;ul&gt;
          &lt;li&gt;&lt;a href=&quot;#background-practicing-smash&quot; id=&quot;markdown-toc-background-practicing-smash&quot;&gt;Background: practicing Smash&lt;/a&gt;&lt;/li&gt;
          &lt;li&gt;&lt;a href=&quot;#percentile-calculation-1&quot; id=&quot;markdown-toc-percentile-calculation-1&quot;&gt;Percentile calculation&lt;/a&gt;&lt;/li&gt;
          &lt;li&gt;&lt;a href=&quot;#practice-time-breakdown-1&quot; id=&quot;markdown-toc-practice-time-breakdown-1&quot;&gt;Practice time breakdown&lt;/a&gt;&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#analysis&quot; id=&quot;markdown-toc-analysis&quot;&gt;Analysis&lt;/a&gt;    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;#summary&quot; id=&quot;markdown-toc-summary&quot;&gt;Summary&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#caveats&quot; id=&quot;markdown-toc-caveats&quot;&gt;Caveats&lt;/a&gt;        &lt;ul&gt;
          &lt;li&gt;&lt;a href=&quot;#blitz-chess&quot; id=&quot;markdown-toc-blitz-chess&quot;&gt;Blitz chess&lt;/a&gt;&lt;/li&gt;
          &lt;li&gt;&lt;a href=&quot;#online-smash&quot; id=&quot;markdown-toc-online-smash&quot;&gt;Online Smash&lt;/a&gt;&lt;/li&gt;
          &lt;li&gt;&lt;a href=&quot;#differing-player-pools&quot; id=&quot;markdown-toc-differing-player-pools&quot;&gt;Differing player pools&lt;/a&gt;&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#conclusions&quot; id=&quot;markdown-toc-conclusions&quot;&gt;Conclusions&lt;/a&gt;    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;#is-smash-a-better-use-of-my-time&quot; id=&quot;markdown-toc-is-smash-a-better-use-of-my-time&quot;&gt;Is &lt;em&gt;Smash&lt;/em&gt; a better use of my time?&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#can-i-reach-expert-strength-in-smash&quot; id=&quot;markdown-toc-can-i-reach-expert-strength-in-smash&quot;&gt;Can I reach expert strength in &lt;em&gt;Smash&lt;/em&gt;?&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#are-there-any-lessons-for-my-other-hobbies&quot; id=&quot;markdown-toc-are-there-any-lessons-for-my-other-hobbies&quot;&gt;Are there any lessons for my other hobbies?&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#related-posts&quot; id=&quot;markdown-toc-related-posts&quot;&gt;Related posts&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#comments&quot; id=&quot;markdown-toc-comments&quot;&gt;Comments&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;switching-away-from-chess&quot;&gt;Switching away from chess&lt;/h2&gt;

&lt;p&gt;For the last few years, I have been aiming at becoming a world-class player in my choice of game. Of course, whether I will achieve that goal is a different matter!&lt;/p&gt;

&lt;p&gt;I started investing in competitive chess in January 2014, while studying at university, around the time &lt;a href=&quot;https://en.wikipedia.org/wiki/Magnus_Carlsen&quot;&gt;Magnus Carlsen&lt;/a&gt; won the world championship and consequently sparked a renewed interest in chess for many.&lt;/p&gt;

&lt;p&gt;I graduated from university in April 2016, took up a full-time job, and played continuously until March 2019. I decided to quit in favor of playing the fighting game &lt;a href=&quot;https://en.wikipedia.org/wiki/Super_Smash_Bros._Ultimate&quot;&gt;&lt;em&gt;Super Smash Bros. Ultimate&lt;/em&gt;&lt;/a&gt; competitively. It was released in December 2018, just a few months prior.&lt;/p&gt;

&lt;p&gt;I decided to switch for two main reasons:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;The competition in chess is much fiercer. The game has been popular for hundreds of years, and the learning tools and resources have developed much more than for the &lt;em&gt;Smash Bros.&lt;/em&gt; franchise, whose first entrant was released in 1999.&lt;/li&gt;
  &lt;li&gt;I generally enjoy playing &lt;em&gt;Smash&lt;/em&gt; more than chess, which means that I naturally invest more practice time into it.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Since I invested a significant amount of time in chess before dropping it, I want to look back at the data in this article and decide it was justified from a strictly numerical point of view. This might also impart some useful lessons for my other hobbies (currently piano and learning Polish).&lt;/p&gt;

&lt;h2 id=&quot;data&quot;&gt;Data&lt;/h2&gt;

&lt;p&gt;You can skip this section to go to &lt;a href=&quot;#analysis&quot;&gt;Analysis&lt;/a&gt; if the details of the data don’t interest you.&lt;/p&gt;

&lt;h3 id=&quot;chess&quot;&gt;Chess&lt;/h3&gt;

&lt;p&gt;As a kid, I knew the rules and played in a handful of scholastic tournaments of laughable strength. For my chess blitz rating, I started at an estimated &lt;strong&gt;22nd percentile&lt;/strong&gt; and spent &lt;strong&gt;1068 hours practicing&lt;/strong&gt; to proceed to the &lt;strong&gt;77th percentile&lt;/strong&gt;.  Blitz strength may not be a good measure of skill, so see the analysis later.&lt;/p&gt;

&lt;h4 id=&quot;background-practicing-chess&quot;&gt;Background: practicing chess&lt;/h4&gt;

&lt;p&gt;Chess practice is primarily broken into time spent playing games and time spent studying. Studying is further divided into many areas:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;em&gt;Tactics training&lt;/em&gt;: The majority of training time is spent here. There are many automated tools to improve tactical skill, since it can be evaluated entirely by computer.&lt;/li&gt;
  &lt;li&gt;&lt;em&gt;Strategic training&lt;/em&gt;: This is harder to train. Usually, one learns by reading about abstract principles in books, analyzing games, or receiving professional instruction.&lt;/li&gt;
  &lt;li&gt;&lt;em&gt;Endgame training&lt;/em&gt;: At the endgame of chess, there are few pieces remaining on the board, and a mix of endgame-specific tactical and strategic principles need to be studied.&lt;/li&gt;
  &lt;li&gt;&lt;em&gt;Opening training&lt;/em&gt;: Usually, it’s recommended for beginners not to focus on this, as the advantages are marginal compared to time spent on other areas of the game.&lt;/li&gt;
  &lt;li&gt;Analyzing one’s own games.&lt;/li&gt;
  &lt;li&gt;Analyzing top players’ games.&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;percentile-calculation&quot;&gt;Percentile calculation&lt;/h4&gt;

&lt;p&gt;I estimated the percentile for my blitz strength. In a blitz game, each side has under ten minutes (or equivalent, due to chess clock rules) to make all their moves.&lt;/p&gt;

&lt;p&gt;I started a blitz rating of 850 at Chess.com. I wasn’t able to access the estimated percentile on Chess.com, so I added 300 rating points to roughly convert it to a Lichess rating, and used their leaderboards. I switched to primarly playing on Lichess for most games, where I ended with a blitz rating of 1801, which is the 77th percentile according to the Lichess leaderboards.&lt;/p&gt;

&lt;h4 id=&quot;practice-time-breakdown&quot;&gt;Practice time breakdown&lt;/h4&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://chesstempo.com/&quot;&gt;ChessTempo&lt;/a&gt; tactics training: 746.5 hours.&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://lichess.org/&quot;&gt;Lichess&lt;/a&gt; game time: 275 hours (1753 games).&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://chess.com/&quot;&gt;Chess.com&lt;/a&gt; game time: estimated 47 hours (300 games).
    &lt;ul&gt;
      &lt;li&gt;I couldn’t find this information on Chess.com easily. I took the average time per game from Lichess (275 hours / 1753 games) and multiplied it by my total number of games on Chess.com (300 games).&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Lichess percentile: 77% blitz (from the &lt;a href=&quot;https://lichess.org/stat/rating/distribution/blitz&quot;&gt;blitz leaderboard&lt;/a&gt;), 80% rapid (from the &lt;a href=&quot;https://lichess.org/stat/rating/distribution/rapid&quot;&gt;rapid leaderboard&lt;/a&gt;).
    &lt;ul&gt;
      &lt;li&gt;Chess.com also has percentile information, but it’s not available to me unless I’ve played a game recently.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;A small amount of time (&amp;lt;20 hours) reading a couple of chess books.&lt;/li&gt;
  &lt;li&gt;A small amount of time (&amp;lt;20 hours) playing at the local chess club. (The events take place in a windowless basement for up to 12 hours at a time, so I only went a couple of times.)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;I took the lower bound of 746 + 275 + 47 = 1068 hours.&lt;/p&gt;

&lt;h3 id=&quot;smash&quot;&gt;Smash&lt;/h3&gt;

&lt;p&gt;I played &lt;em&gt;Super Smash Bros. Brawl&lt;/em&gt; as a kid, but only very casually. I’ve also had a variety of other dexterity-focused video games and hobbies.&lt;/p&gt;

&lt;p&gt;I started at the &lt;strong&gt;4th percentile&lt;/strong&gt; and spent an estimated &lt;strong&gt;1204&lt;/strong&gt; hours to reach the &lt;strong&gt;99th percentile&lt;/strong&gt; of online players.&lt;/p&gt;

&lt;h4 id=&quot;background-practicing-smash&quot;&gt;Background: practicing Smash&lt;/h4&gt;

&lt;p&gt;There is a “training mode” in &lt;em&gt;Smash Ultimate&lt;/em&gt;, which allows you to test out moves and combos against CPU opponents or real training partners. People use training mode to do drills, which are necessary to execute the fine-grained movements required by the game.&lt;/p&gt;

&lt;p&gt;The training mode is somewhat deficient compared to other fighting games when it comes to practicing combos rather than doing drills. While you’re executing a combo, the opponent may be able to input certain moves to escape, which the CPU will not do. If you don’t have a training partner, there are some software mods and hardware devices which can simulate these inputs. I didn’t have access to a training partner, and I didn’t use one of these automated solutions.&lt;/p&gt;

&lt;p&gt;I watched a few training videos on YouTube for general &lt;em&gt;Smash&lt;/em&gt; skills and specific to my character. I even &lt;a href=&quot;/smash-training-retrospective/&quot;&gt;created a training tool&lt;/a&gt; for myself to practice drills. This is an example of where I think the training tools are not well-developed in Smash compared to chess, and having access to a new tool could in principle accelerate the growth of new entrants.&lt;/p&gt;

&lt;p&gt;Other than training mode, players play games, either in-person or online. They can also analyze them later, although the built-in tools for doing so are not convenient to use. I spent a significant amount of time in training mode, but I mostly played games.&lt;/p&gt;

&lt;h4 id=&quot;percentile-calculation-1&quot;&gt;Percentile calculation&lt;/h4&gt;

&lt;p&gt;The &lt;em&gt;Smash&lt;/em&gt; online gameplay uses an inverted ranking system, in which your ranking is the number of players that you’re better than. It’s probably backed by an traditional rating system. Annoyingly, this means that your ranking will change over time without any meaningful differences in your skill.&lt;/p&gt;

&lt;p&gt;When a player reaches a percentile certain threshold, they’re admitted into “Elite Smash”. User-reported numbers have allowed people to reverse-engineer the total number of ranked players at any given time. In my experience, the estimate is fairly accurate (say, within 25,000).&lt;/p&gt;

&lt;p&gt;Unfortunately, I don’t remember the exact player count when I started. Some trawling through historical Reddit threads suggests it was at least 3,000,000 players. I remember being below 100,000 rank when I started, so that optimistically puts me at the 4th percentile.&lt;/p&gt;

&lt;h4 id=&quot;practice-time-breakdown-1&quot;&gt;Practice time breakdown&lt;/h4&gt;

&lt;p&gt;The Nintendo Switch records in-game time for the games you play. According to the Nintendo Switch’s in-game play time, I spent approximately 1204 hours to reach the 99.0th percentile. Some of that time was spent in loading screens or playing casually with friends.&lt;/p&gt;

&lt;h2 id=&quot;analysis&quot;&gt;Analysis&lt;/h2&gt;

&lt;h3 id=&quot;summary&quot;&gt;Summary&lt;/h3&gt;

&lt;p&gt;The data is summarized below:&lt;/p&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th style=&quot;text-align: left&quot;&gt;Game&lt;/th&gt;
      &lt;th style=&quot;text-align: right&quot;&gt;Start percentile&lt;/th&gt;
      &lt;th style=&quot;text-align: right&quot;&gt;Hours spent&lt;/th&gt;
      &lt;th style=&quot;text-align: right&quot;&gt;End percentile&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;Chess&lt;/td&gt;
      &lt;td style=&quot;text-align: right&quot;&gt;22%&lt;/td&gt;
      &lt;td style=&quot;text-align: right&quot;&gt;1068&lt;/td&gt;
      &lt;td style=&quot;text-align: right&quot;&gt;77%&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;&lt;em&gt;Smash Ultimate&lt;/em&gt;&lt;/td&gt;
      &lt;td style=&quot;text-align: right&quot;&gt;4%&lt;/td&gt;
      &lt;td style=&quot;text-align: right&quot;&gt;1204&lt;/td&gt;
      &lt;td style=&quot;text-align: right&quot;&gt;99%&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;Based on just the numbers, it looks like practicing &lt;em&gt;Smash Ultimate&lt;/em&gt; is a significantly better use of my time!&lt;/p&gt;

&lt;h3 id=&quot;caveats&quot;&gt;Caveats&lt;/h3&gt;

&lt;h4 id=&quot;blitz-chess&quot;&gt;Blitz chess&lt;/h4&gt;

&lt;p&gt;I primarily played “blitz” chess. In a blitz game, each side has under ten minutes (or equivalent, due to chess clock rules) to make all their moves. The conventional wisdom is that one should focus on standard chess to improve their general skills, and blitz chess to improve their blitz skills.&lt;/p&gt;

&lt;p&gt;I also played “rapid” chess games (which range between ten and thirty minutes). These games are much closer to the kind of games played in tournaments, but arguably still not slow enough. Interestingly, my rapid ratings were almost exactly the same as my blitz ratings:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Chess.com: blitz 1644, rapid 1645&lt;/li&gt;
  &lt;li&gt;Lichess: blitz 1801, rapid 1804&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;One could reasonably argue that I made much less progress in chess than in &lt;em&gt;Smash&lt;/em&gt; because I didn’t play enough slow chess. I’m not necessarily convinced by this conclusion:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Playing blitz games rather than slow games means more games with shorter feedback loops. Why should that be a bad thing? I think the determination of quality of this practice time is how much I thought about the game while playing it, rather than how long the game happened to be. Personally, I played blitz chess deliberately, focusing on finding a strong move, rather than running down the clock or playing on instinct.&lt;/li&gt;
  &lt;li&gt;746 hours / 1068 hours = 69% of my practice time was spent on tactics training. Does that mean that the other 31% of time was so poorly spent that it explains the 22-point percentile difference between chess and &lt;em&gt;Smash&lt;/em&gt;?&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;I have not formally researched this topic to see if the question has been answered in the literature.&lt;/p&gt;

&lt;h4 id=&quot;online-smash&quot;&gt;Online Smash&lt;/h4&gt;

&lt;p&gt;The online experience for chess is as good or better than over-the-board experience. It’s generally easier to see all the pieces and move them around. Most chess sites implement a “pre-move” system, which is convenient, and makes it possible to play games at a speed which aren’t realistic over-the board.&lt;/p&gt;

&lt;p&gt;On the other hand, the online experience for &lt;em&gt;Smash Ultimate&lt;/em&gt; is not very good. In an in-person game, there are six frames (0.1 seconds) of input delay between pressing a button and having it happen. The online gameplay automatically enforces a minimum of five extra frames of delay, almost doubling the input delay compared to an in-person game, regardless of the actual geographic latency between players.&lt;/p&gt;

&lt;p&gt;Furthermore, the netcode for &lt;em&gt;Smash Ultimate&lt;/em&gt; uses a primarily “delay-based” mechanism, where all messages have to be acknowledged by all parties before gameplay can proceed. The current state-of-the-art for online fighting games is “rollback-based”, where each party can speculatively execute actions on behalf of the other party, and fix the game state only if the prediction was wrong.&lt;/p&gt;

&lt;p&gt;As a result of these factors, &lt;em&gt;Smash Ultimate&lt;/em&gt; has more latency than you would expect from a different fighting game, to the point where the metagame changes significantly online, and players generally can’t play optimally. Online &lt;em&gt;Smash Ultimate&lt;/em&gt; tournaments are not regarded seriously in the competitive scene, compared to in-person tournaments.&lt;/p&gt;

&lt;h4 id=&quot;differing-player-pools&quot;&gt;Differing player pools&lt;/h4&gt;

&lt;p&gt;&lt;em&gt;Smash Bros.&lt;/em&gt; has always been marketed by Nintendo as a primarily casual game, whereas chess may be considered to have a more serious player-base. So reaching the 99th percentile in online &lt;em&gt;Smash&lt;/em&gt; play is not as meaningful as reaching the 99th percentile in online chess play.&lt;/p&gt;

&lt;p&gt;In-person tournaments have a more serious self-selected pool of players. Since I quit my local chess club, and since COVID-19 shut down in-person &lt;em&gt;Smash&lt;/em&gt; tournaments, it’s hard for me to get a sense of how I compare in the competitive scene. My guess is that I’m below the 50th percentile among in-person tournament players for both games.&lt;/p&gt;

&lt;h2 id=&quot;conclusions&quot;&gt;Conclusions&lt;/h2&gt;

&lt;h3 id=&quot;is-smash-a-better-use-of-my-time&quot;&gt;Is &lt;em&gt;Smash&lt;/em&gt; a better use of my time?&lt;/h3&gt;

&lt;p&gt;Certainly. Regardless of the absolute amount of time spent or the percentiles achieved, I managed to spend about the same amount of practice time in chess over five years as I did in &lt;em&gt;Smash&lt;/em&gt; over two years. This indicates that I naturally enjoy it a lot more, and I will probably be better at it as a result.&lt;/p&gt;

&lt;h3 id=&quot;can-i-reach-expert-strength-in-smash&quot;&gt;Can I reach expert strength in &lt;em&gt;Smash&lt;/em&gt;?&lt;/h3&gt;

&lt;p&gt;If we assume that it takes 10,000 hours of practice, then maybe. At the rate of 1200 practice hours over two years, one would expect that I could reach the 10,000 hour mark in about 6.3 years from now.&lt;/p&gt;

&lt;p&gt;A particular concern for competitive videogaming is that one can expect response times to &lt;a href=&quot;https://journals.plos.org/plosone/article?id=10.1371/journal.pone.0094215&quot;&gt;start declining at the age of 24&lt;/a&gt;. I am 24 at the time of this writing, so I would be 30 years of age by the time I reached 10,000 hours, which will put me at a natural disadvantage compared to younger players. It might not be an insurmountable obstacle — it’s not as if 30-year-olds are known for their infamously-poor response times.&lt;/p&gt;

&lt;p&gt;One case-study is the &lt;em&gt;Super Smash Bros. Melee&lt;/em&gt; player &lt;a href=&quot;https://www.ssbwiki.com/Smasher:Zain&quot;&gt;Zain&lt;/a&gt;, who started playing competitively in 2014, and started producing top results within five years. It’s an encouraging result in terms of the absolute timeline. On the other hand, it’s possible that he simply practices around 3.5x as much as me (that is, 2000 hours a year, rather than 1200 hours in two years).&lt;/p&gt;

&lt;p&gt;Since &lt;em&gt;Smash&lt;/em&gt; is not as well developed as chess, it might be that I could reach an expert level in less time than the 10,000 hours. Or it simply might not require 10,000 hours.&lt;/p&gt;

&lt;h3 id=&quot;are-there-any-lessons-for-my-other-hobbies&quot;&gt;Are there any lessons for my other hobbies?&lt;/h3&gt;

&lt;p&gt;My piano-playing ability is quite poor at the moment. I would estimate I’ve spent around 300 total practice hours on it, since it took it up in November 2019. Unfortunately, I took no objective measurements.&lt;/p&gt;

&lt;p&gt;Unlike competitive videogaming, where one is matched to an opponent of similar strength, a piano player typically compares themselves to the best players in the field. It’s sometimes demoralizing to compare my performances of the same pieces with theirs. But it’s a relief to see that no matter how I feel now, I can expect to see significant improvements in ability as I reach even the 1000-hour mark.&lt;/p&gt;

&lt;h2 id=&quot;related-posts&quot;&gt;Related posts&lt;/h2&gt;

&lt;p&gt;The following are hand-curated posts which you might find interesting.&lt;/p&gt;

&lt;table class=&quot;related-posts&quot;&gt;
&lt;thead&gt;
  &lt;tr&gt;
    &lt;th&gt;Date&lt;/th&gt;
    &lt;th&gt;&lt;/th&gt;
    &lt;th&gt;Title&lt;/th&gt;
  &lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;

  &lt;tr&gt;
    &lt;td&gt;30&amp;nbsp;July&amp;nbsp;2020&lt;/td&gt;
    &lt;td class=&quot;this-post&quot;&gt;
      
      &lt;/td&gt;
    &lt;td&gt;&lt;a href=&quot;/lan-adapter/&quot;&gt;A LAN adapter isn't everything&lt;/a&gt;
    &lt;/td&gt;
  &lt;/tr&gt;

  &lt;tr&gt;
    &lt;td&gt;04&amp;nbsp;August&amp;nbsp;2020&lt;/td&gt;
    &lt;td class=&quot;this-post&quot;&gt;
      
      &lt;/td&gt;
    &lt;td&gt;&lt;a href=&quot;/smash-bros-parabola-rule/&quot;&gt;Smash Bros: the parabola rule&lt;/a&gt;
    &lt;/td&gt;
  &lt;/tr&gt;

  &lt;tr&gt;
    &lt;td&gt;10&amp;nbsp;March&amp;nbsp;2021&lt;/td&gt;
    &lt;td class=&quot;this-post&quot;&gt;
      
      &lt;/td&gt;
    &lt;td&gt;&lt;a href=&quot;/pro-controller-stick-drift/&quot;&gt;On Pro Controller stick drift&lt;/a&gt;
    &lt;/td&gt;
  &lt;/tr&gt;

  &lt;tr&gt;
    &lt;td&gt;02&amp;nbsp;April&amp;nbsp;2021&lt;/td&gt;
    &lt;td class=&quot;this-post&quot;&gt;
      
      (this&amp;nbsp;post)
      
      &lt;/td&gt;
    &lt;td&gt;&lt;a href=&quot;/hours-invested-vs-percentile-rank/&quot;&gt;Anecdata: hours invested vs percentile rank&lt;/a&gt;
    &lt;/td&gt;
  &lt;/tr&gt;

  &lt;tr&gt;
    &lt;td&gt;08&amp;nbsp;June&amp;nbsp;2021&lt;/td&gt;
    &lt;td class=&quot;this-post&quot;&gt;
      
      &lt;/td&gt;
    &lt;td&gt;&lt;a href=&quot;/smash-mistakes/&quot;&gt;My easiest-to-fix Smash mistakes&lt;/a&gt;
    &lt;/td&gt;
  &lt;/tr&gt;

&lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;Want to see more of my posts? Follow me &lt;a href=&quot;https://twitter.com/arxanas&quot;&gt;on Twitter&lt;/a&gt; or subscribe &lt;a href=&quot;/feed.xml&quot;&gt;via RSS&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&quot;comments&quot;&gt;Comments&lt;/h2&gt;

&lt;ul&gt;


&lt;/ul&gt;

&lt;div id=&quot;disqus_thread&quot;&gt;&lt;/div&gt;
&lt;script&gt;

/**
 *  RECOMMENDED CONFIGURATION VARIABLES: EDIT AND UNCOMMENT THE SECTION BELOW TO INSERT DYNAMIC VALUES FROM YOUR PLATFORM OR CMS.
 *  LEARN WHY DEFINING THESE VARIABLES IS IMPORTANT: https://disqus.com/admin/universalcode/#configuration-variables */
var disqus_config = function () {
    this.page.url = &quot;https://blog.waleedkhan.name/hours-invested-vs-percentile-rank/&quot;;
    this.page.identifier = &quot;hours-invested-vs-percentile-rank/&quot;;
};

(function() { // DON'T EDIT BELOW THIS LINE
    var d = document, s = d.createElement('script');
    s.src = '//waleedkhan-name.disqus.com/embed.js';
    s.setAttribute('data-timestamp', +new Date());
    (d.head || d.body).appendChild(s);
})();
&lt;/script&gt;

&lt;noscript&gt;Please enable JavaScript to view the &lt;a href=&quot;https://disqus.com/?ref_noscript&quot;&gt;comments powered by Disqus.&lt;/a&gt;&lt;/noscript&gt;

</description>
        <pubDate>Fri, 02 Apr 2021 00:00:00 -0500</pubDate>
        <link>https://blog.waleedkhan.name/hours-invested-vs-percentile-rank/</link>
        <guid isPermaLink="true">https://blog.waleedkhan.name/hours-invested-vs-percentile-rank/</guid>
        
        <category>chess</category>
        
        <category>deliberate-practice</category>
        
        <category>smash-bros</category>
        
        
      </item>
    
      <item>
        <title>On Pro Controller stick drift</title>
        <description>&lt;p&gt;The Nintendo Switch Pro Controller is one of the main controllers used for competitive &lt;em&gt;Smash Bros.&lt;/em&gt; play. Most players use either the Pro Controller or a GameCube controller.&lt;/p&gt;

&lt;p&gt;These controllers are prone to &lt;em&gt;stick drift&lt;/em&gt;: a phenomenon where inputs are registered for a control stick in a certain direction, despite the control stick being pressed in a different direction or not at all. As one can expect, this would significantly impair gameplay at the competitive level, and is frustrating at even the casual level.&lt;/p&gt;

&lt;p&gt;This post is a brief summary of stick drift problems, which may be relevant to those interested in playing &lt;em&gt;Smash Bros.&lt;/em&gt; (particularly &lt;em&gt;Ultimate&lt;/em&gt;) competitively.&lt;/p&gt;

&lt;ul id=&quot;markdown-toc&quot;&gt;
  &lt;li&gt;&lt;a href=&quot;#reputation&quot; id=&quot;markdown-toc-reputation&quot;&gt;Reputation&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#warranty&quot; id=&quot;markdown-toc-warranty&quot;&gt;Warranty&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#my-experience&quot; id=&quot;markdown-toc-my-experience&quot;&gt;My experience&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#possible-causes&quot; id=&quot;markdown-toc-possible-causes&quot;&gt;Possible causes&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#prevention&quot; id=&quot;markdown-toc-prevention&quot;&gt;Prevention&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#manual-repair&quot; id=&quot;markdown-toc-manual-repair&quot;&gt;Manual repair&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#related-posts&quot; id=&quot;markdown-toc-related-posts&quot;&gt;Related posts&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#comments&quot; id=&quot;markdown-toc-comments&quot;&gt;Comments&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;reputation&quot;&gt;Reputation&lt;/h2&gt;

&lt;p&gt;Original GameCube controllers, produced contemporaneously with the original GameCube, have a reputation of rock-solid reliability. Many players use their old GameCube controllers to this day. At the time of this writing, such controllers sell for USD ~70 used or USD ~200 new on eBay and Amazon, which is significantly more than their original MSRP.&lt;/p&gt;

&lt;p&gt;Unfortunately, both modern Pro Controllers and GameCube controllers are plagued with reliability issues. The build quality in Nintendo’s controller manufacturing processes seems to have dropped significantly since the time of the original GameCube controller.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://www.reddit.com/r/NintendoSwitch/comments/cj0au7/has_anyone_experienced_drift_on_the_pro_controller/&quot;&gt;Anecdotal experiences with Pro Controller stick drift&lt;/a&gt; vary from “no issues after several hundred hours of use” to “several of my pro controllers have drift”. Generally, issues arise with the left control stick, which sees more use. See also &lt;a href=&quot;#my-experience&quot;&gt;My experience&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;One could try a third-party controller. However, they are generally cheaper and have a reputation of inferior build quality, battery life, etc. They also tend to feel different than first-party Pro Controllers, so it may take a while to adjust when switching between them.&lt;/p&gt;

&lt;h2 id=&quot;warranty&quot;&gt;Warranty&lt;/h2&gt;

&lt;p&gt;In the US, the Pro Controller’s warrant period is only 30 days. This is a shameful support period time for a device that should last several years.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://www.beuc.eu/publications/beuc-x-2021-002_nintendo_-_premature_obsolescence_complaint_to_the_ec.pdf&quot;&gt;Complaints have been filed in the EU&lt;/a&gt; about Nintendo’s shoddy controllers, suggesting that controllers should last approximately the lifetime of the console itself:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Nintendo is thus artificially creating an aftermarket in a sector in which this should not be the case, in a sector in which the average consumer should not expect the lifespan for the game controllers to be more limited than that of the console and does in any event not take into account the eventual cost of repair or replacement of game controllers when buying the console.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;You can opt to have Nintendo repair a malfunctioning Pro Controller for around USD 30, or half the MSRP. Some players report that the problems persist even after sending their controller to Nintendo. At these prices, it may not make sense to risk a repair that might not fix the problem.&lt;/p&gt;

&lt;p&gt;Some vendors sell additional insurance for a small fee on top of the controller. Walmart offers up to 3 years of insurance for USD 7, which is a significantly better price than Nintendo’s offered repair price. I recently purchased a new Pro Controller from Target with the same insurance plan, but I have not yet filed a claim with it. This may be more economical than suffering through the official repair process. At my controller failure rates, this should be a good investment (see &lt;a href=&quot;#my-experience&quot;&gt;My experience&lt;/a&gt;).&lt;/p&gt;

&lt;h2 id=&quot;my-experience&quot;&gt;My experience&lt;/h2&gt;

&lt;p&gt;I have now purchased three Pro controllers, all of which have started exhibiting downward drifting of the left control stick by the 900-hour mark in &lt;em&gt;Smash Ultimate&lt;/em&gt;. So I go through them at a rate of about one controller (USD 60) per 300 hours.&lt;/p&gt;

&lt;p&gt;By now, they are all in various states of usability. One is completely unusable (the stick drifts down at all times), one has frequent stick drift (which makes it only reasonable for casual play), and one has mild stick drift (which I can use to practice, but which sometimes causes premature deaths anyways).&lt;/p&gt;

&lt;h2 id=&quot;possible-causes&quot;&gt;Possible causes&lt;/h2&gt;

&lt;p&gt;There are two main theories for stick drift in the Pro controller:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;The analog stick sensor wheel component used in modern controllers is simply not durable compared to older controllers.&lt;/li&gt;
  &lt;li&gt;The grinding of the stick against the enclosure, particularly during mashing, causes an accumulation of white dust which impairs the sensor.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Both are consistent with the left control stick being particularly vulnerable, since it sees significantly more use than the right control stick during normal play.&lt;/p&gt;

&lt;h2 id=&quot;prevention&quot;&gt;Prevention&lt;/h2&gt;

&lt;p&gt;To prevent the first issue, one could in principle replace the analog sensor immediately with a more reliable one, but I had difficulty doing this (see &lt;a href=&quot;#manual-repair&quot;&gt;Manual repair&lt;/a&gt;).&lt;/p&gt;

&lt;p&gt;To prevent the second issue, one can wrap the left control stick with a piece of tape, so that it doesn’t produce dust when grinding against its enclosure.&lt;/p&gt;

&lt;p&gt;I have also taken to labeling my controllers and using only a certain controller for competitive play. This ensures that load is primarily focused on one controller so as to diagnose stick drift more easily, as it starts out sporadically at first. It also leaves a maximum number of functioning controllers available for multiplayer casual play.&lt;/p&gt;

&lt;p&gt;One could also use one of the known-good controllers for tournaments to ensure there’s no stick drift at the least opportune time, while using one of the heavily-loaded controllers for practice, when it’s less of an issue.&lt;/p&gt;

&lt;h2 id=&quot;manual-repair&quot;&gt;Manual repair&lt;/h2&gt;

&lt;p&gt;To resolve the first issue by replacing the analog stick sensor wheel, I followed the guide at &lt;a href=&quot;https://www.reddit.com/r/NintendoSwitch/comments/bscoz9/nintendo_switch_pro_controller_analog_stick/&quot;&gt;Nintendo Switch Pro Controller PERMANENT Fix&lt;/a&gt;, but it &lt;strong&gt;did not&lt;/strong&gt; work for me. It claimed that the analog stick sensor wheel would not be soldered into place, and could be easily replaced. However, when I opened up my Pro Controller, I found that it was indeed soldered into place, so I couldn’t remove it.&lt;/p&gt;

&lt;p&gt;Nonetheless, the above document is still a good reference for Pro Controller internals and repair, as it includes instructions to open the Pro Controller and a discussion of the relevant components, with many pictures.&lt;/p&gt;

&lt;p&gt;To resolve the second issue, one can clean out dust and debris using electric contact cleaner or compressed air. This is a relatively cheap and simple fix to carry out, and many people have reported that it fixes their stick drift for a reasonable length of time.&lt;/p&gt;

&lt;h2 id=&quot;related-posts&quot;&gt;Related posts&lt;/h2&gt;

&lt;p&gt;The following are hand-curated posts which you might find interesting.&lt;/p&gt;

&lt;table class=&quot;related-posts&quot;&gt;
&lt;thead&gt;
  &lt;tr&gt;
    &lt;th&gt;Date&lt;/th&gt;
    &lt;th&gt;&lt;/th&gt;
    &lt;th&gt;Title&lt;/th&gt;
  &lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;

  &lt;tr&gt;
    &lt;td&gt;30&amp;nbsp;July&amp;nbsp;2020&lt;/td&gt;
    &lt;td class=&quot;this-post&quot;&gt;
      
      &lt;/td&gt;
    &lt;td&gt;&lt;a href=&quot;/lan-adapter/&quot;&gt;A LAN adapter isn't everything&lt;/a&gt;
    &lt;/td&gt;
  &lt;/tr&gt;

  &lt;tr&gt;
    &lt;td&gt;04&amp;nbsp;August&amp;nbsp;2020&lt;/td&gt;
    &lt;td class=&quot;this-post&quot;&gt;
      
      &lt;/td&gt;
    &lt;td&gt;&lt;a href=&quot;/smash-bros-parabola-rule/&quot;&gt;Smash Bros: the parabola rule&lt;/a&gt;
    &lt;/td&gt;
  &lt;/tr&gt;

  &lt;tr&gt;
    &lt;td&gt;10&amp;nbsp;March&amp;nbsp;2021&lt;/td&gt;
    &lt;td class=&quot;this-post&quot;&gt;
      
      (this&amp;nbsp;post)
      
      &lt;/td&gt;
    &lt;td&gt;&lt;a href=&quot;/pro-controller-stick-drift/&quot;&gt;On Pro Controller stick drift&lt;/a&gt;
    &lt;/td&gt;
  &lt;/tr&gt;

  &lt;tr&gt;
    &lt;td&gt;02&amp;nbsp;April&amp;nbsp;2021&lt;/td&gt;
    &lt;td class=&quot;this-post&quot;&gt;
      
      &lt;/td&gt;
    &lt;td&gt;&lt;a href=&quot;/hours-invested-vs-percentile-rank/&quot;&gt;Anecdata: hours invested vs percentile rank&lt;/a&gt;
    &lt;/td&gt;
  &lt;/tr&gt;

  &lt;tr&gt;
    &lt;td&gt;08&amp;nbsp;June&amp;nbsp;2021&lt;/td&gt;
    &lt;td class=&quot;this-post&quot;&gt;
      
      &lt;/td&gt;
    &lt;td&gt;&lt;a href=&quot;/smash-mistakes/&quot;&gt;My easiest-to-fix Smash mistakes&lt;/a&gt;
    &lt;/td&gt;
  &lt;/tr&gt;

&lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;Want to see more of my posts? Follow me &lt;a href=&quot;https://twitter.com/arxanas&quot;&gt;on Twitter&lt;/a&gt; or subscribe &lt;a href=&quot;/feed.xml&quot;&gt;via RSS&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&quot;comments&quot;&gt;Comments&lt;/h2&gt;

&lt;ul&gt;


&lt;li&gt;&lt;a href=&quot;https://www.reddit.com/r/CrazyHand/comments/m2599t/on_pro_controller_stick_drift/ &quot;&gt;Discussion on Reddit&lt;/a&gt;&lt;/li&gt;

&lt;/ul&gt;

&lt;div id=&quot;disqus_thread&quot;&gt;&lt;/div&gt;
&lt;script&gt;

/**
 *  RECOMMENDED CONFIGURATION VARIABLES: EDIT AND UNCOMMENT THE SECTION BELOW TO INSERT DYNAMIC VALUES FROM YOUR PLATFORM OR CMS.
 *  LEARN WHY DEFINING THESE VARIABLES IS IMPORTANT: https://disqus.com/admin/universalcode/#configuration-variables */
var disqus_config = function () {
    this.page.url = &quot;https://blog.waleedkhan.name/pro-controller-stick-drift/&quot;;
    this.page.identifier = &quot;pro-controller-stick-drift/&quot;;
};

(function() { // DON'T EDIT BELOW THIS LINE
    var d = document, s = d.createElement('script');
    s.src = '//waleedkhan-name.disqus.com/embed.js';
    s.setAttribute('data-timestamp', +new Date());
    (d.head || d.body).appendChild(s);
})();
&lt;/script&gt;

&lt;noscript&gt;Please enable JavaScript to view the &lt;a href=&quot;https://disqus.com/?ref_noscript&quot;&gt;comments powered by Disqus.&lt;/a&gt;&lt;/noscript&gt;

</description>
        <pubDate>Wed, 10 Mar 2021 00:00:00 -0600</pubDate>
        <link>https://blog.waleedkhan.name/pro-controller-stick-drift/</link>
        <guid isPermaLink="true">https://blog.waleedkhan.name/pro-controller-stick-drift/</guid>
        
        <category>smash-bros</category>
        
        
      </item>
    
      <item>
        <title>The USB-C dream</title>
        <description>&lt;p&gt;For work, I got one of the new Macbooks with only four USB-C ports. So, naturally, I need a dongle to connect it to my USB-A peripherals.&lt;/p&gt;

&lt;p&gt;I got a USB-C hub, which lets me connect an HDMI cable, my mouse and keyboard, and power cable to the laptop. So now I can connect my laptop to my workstation by plugging in only one wire (without the need for a specialized dock). This is actually more convenient than my previous setup with my personal laptop, where I had to connect the HDMI cable separately from the USB hub.&lt;/p&gt;

&lt;p&gt;One day, I plugged in my Android phone to the same USB hub to charge it. To my surprise, my monitor powered on. It turned out that it accepted mouse and keyboard inputs over the same hub, so I had a fully-functioning workstation!&lt;/p&gt;

&lt;p&gt;The idea is kind of nice, isn’t it? Like the &lt;a href=&quot;https://en.wikipedia.org/wiki/Nintendo_Switch&quot;&gt;Nintendo Switch&lt;/a&gt; gaming console, but for general-purpose computing.&lt;/p&gt;

&lt;p&gt;Suppose you’re having trouble with your work, so you unplug your device, walk over to your coworker’s desk, and plug it in right there to show them your issue.&lt;/p&gt;

&lt;p&gt;Or you’re working from home at your desk. You decide you need to go into the office, so you unplug your device, put it in your pocket, and get on the bus, where you continue to do mobile-capable work using your phone’s mobile data. And then you arrive at work and plug it back into a workstation.&lt;/p&gt;

&lt;p&gt;Or you’re working, and you need to read a document. So you unplug your device and walk over to the couch and get comfortable and read it there.&lt;/p&gt;

&lt;p&gt;Phones will have to get a little bit more powerful and flexible, and drivers will have to get a little bit more reliable — my Macbook still regularly crashes in its sleep, due to faulty power management of the USB hub. But I look forward to this future.&lt;/p&gt;

&lt;h2 id=&quot;comments&quot;&gt;Comments&lt;/h2&gt;

&lt;ul&gt;


&lt;/ul&gt;

&lt;div id=&quot;disqus_thread&quot;&gt;&lt;/div&gt;
&lt;script&gt;

/**
 *  RECOMMENDED CONFIGURATION VARIABLES: EDIT AND UNCOMMENT THE SECTION BELOW TO INSERT DYNAMIC VALUES FROM YOUR PLATFORM OR CMS.
 *  LEARN WHY DEFINING THESE VARIABLES IS IMPORTANT: https://disqus.com/admin/universalcode/#configuration-variables */
var disqus_config = function () {
    this.page.url = &quot;https://blog.waleedkhan.name/the-usb-c-dream/&quot;;
    this.page.identifier = &quot;the-usb-c-dream/&quot;;
};

(function() { // DON'T EDIT BELOW THIS LINE
    var d = document, s = d.createElement('script');
    s.src = '//waleedkhan-name.disqus.com/embed.js';
    s.setAttribute('data-timestamp', +new Date());
    (d.head || d.body).appendChild(s);
})();
&lt;/script&gt;

&lt;noscript&gt;Please enable JavaScript to view the &lt;a href=&quot;https://disqus.com/?ref_noscript&quot;&gt;comments powered by Disqus.&lt;/a&gt;&lt;/noscript&gt;

</description>
        <pubDate>Mon, 08 Mar 2021 00:00:00 -0600</pubDate>
        <link>https://blog.waleedkhan.name/the-usb-c-dream/</link>
        <guid isPermaLink="true">https://blog.waleedkhan.name/the-usb-c-dream/</guid>
        
        <category>technology</category>
        
        
      </item>
    
      <item>
        <title>The Rust module system for Python users</title>
        <description>&lt;p&gt;Every time I go back to Rust, I have to figure out how the module system works again. Here are some of my notes comparing it to Python’s module system.&lt;/p&gt;

&lt;p&gt;These notes are for Rust 2018.&lt;/p&gt;

&lt;ul id=&quot;markdown-toc&quot;&gt;
  &lt;li&gt;&lt;a href=&quot;#crates&quot; id=&quot;markdown-toc-crates&quot;&gt;Crates&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#packages&quot; id=&quot;markdown-toc-packages&quot;&gt;Packages&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#file-layout&quot; id=&quot;markdown-toc-file-layout&quot;&gt;File layout&lt;/a&gt;    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;#crate-roots&quot; id=&quot;markdown-toc-crate-roots&quot;&gt;Crate roots&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#module-lookups&quot; id=&quot;markdown-toc-module-lookups&quot;&gt;Module lookups&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#nested-modules&quot; id=&quot;markdown-toc-nested-modules&quot;&gt;Nested modules&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#related-posts&quot; id=&quot;markdown-toc-related-posts&quot;&gt;Related posts&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#comments&quot; id=&quot;markdown-toc-comments&quot;&gt;Comments&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;crates&quot;&gt;Crates&lt;/h3&gt;

&lt;p&gt;A &lt;strong&gt;crate&lt;/strong&gt; is a build target in Rust. A crate can either be a library or a binary. It can be built with &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;cargo build&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;In Python, libraries are called “packages”. Binaries are an entirely heterogenous concept, typically installed by configuring &lt;a href=&quot;https://packaging.python.org/specifications/entry-points/&quot;&gt;entry points&lt;/a&gt;. Such a binary doesn’t even need to be Python code (for example, it can be a shell script instead).&lt;/p&gt;

&lt;h3 id=&quot;packages&quot;&gt;Packages&lt;/h3&gt;

&lt;p&gt;A &lt;strong&gt;package&lt;/strong&gt; in Rust consists of up to one library crate and any number of binary crates. (It’s required that there be at least one library or binary crate.)&lt;/p&gt;

&lt;p&gt;In Python, a single “distribution package” (i.e. one that you can &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;pip install&lt;/code&gt;) can contain multiple “import packages” (i.e. one that you can &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;import&lt;/code&gt;), while Rust allows at most one import package per distribution package.&lt;/p&gt;

&lt;h3 id=&quot;file-layout&quot;&gt;File layout&lt;/h3&gt;

&lt;h4 id=&quot;crate-roots&quot;&gt;Crate roots&lt;/h4&gt;

&lt;p&gt;Python places &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;__init__.py&lt;/code&gt; at the root of a package to indicate that it’s importable as a package. Similarly, Rust conventionally puts &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;lib.rs&lt;/code&gt; at the root of a crate as the library &lt;strong&gt;crate root&lt;/strong&gt;. (Unlike Python, the name can be re-configured, but &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;lib.rs&lt;/code&gt; is the default.)&lt;/p&gt;

&lt;p&gt;In Python, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;__main__.py&lt;/code&gt; corresponds to the main entry point for the module when run with &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;python -m&lt;/code&gt;. Rust conventionally puts &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;main.rs&lt;/code&gt; as a binary crate root. (This can also be renamed, which is probably desirable if you have more than one binary.)&lt;/p&gt;

&lt;h4 id=&quot;module-lookups&quot;&gt;Module lookups&lt;/h4&gt;

&lt;p&gt;In Python, all modules are available by importing them via their filesystem path name. For example, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;import foo.bar&lt;/code&gt; first looks for a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;foo/&lt;/code&gt; directory on the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;PYTHONPATH&lt;/code&gt;. Then it looks for a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;bar/&lt;/code&gt; package or a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;bar.py&lt;/code&gt; module underneath the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;foo/&lt;/code&gt; directory.&lt;/p&gt;

&lt;p&gt;In Rust, modules also correspond to their paths on the filesystem (by default; &lt;a href=&quot;https://doc.rust-lang.org/reference/items/modules.html#the-path-attribute&quot;&gt;you can use the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;path&lt;/code&gt; attribute&lt;/a&gt; to change this behavior). However, they are not immediately &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;use&lt;/code&gt;-able just because the corresponding file is present! They must be declared with a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;mod foo;&lt;/code&gt; declaration in the crate root file (e.g. &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;lib.rs&lt;/code&gt;).&lt;/p&gt;

&lt;h4 id=&quot;nested-modules&quot;&gt;Nested modules&lt;/h4&gt;

&lt;p&gt;In Python, a nested module &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;foo.bar&lt;/code&gt; is implemented either by &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;foo/bar.py&lt;/code&gt; or &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;foo/bar/__init__.py&lt;/code&gt;. You can’t use both. If you want to have sub-modules of &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;foo.bar&lt;/code&gt;, you’ll place additional modules or packages under &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;foo/bar/&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;A statement like &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;from foo.bar import qux&lt;/code&gt; could either be importing a symbol declared in &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;foo/bar/__init__.py&lt;/code&gt; or the module &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;foo/bar/qux.py&lt;/code&gt;. Some developers choose to explicitly re-export the public interface of &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;bar&lt;/code&gt; in &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;__init__.py&lt;/code&gt; for clarity, and prefix sub-modules with underscores (e.g. &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;_qux.py&lt;/code&gt; instead of &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;qux.py&lt;/code&gt;).&lt;/p&gt;

&lt;p&gt;In Rust, you use &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;foo/bar.rs&lt;/code&gt; to declare members of the namespace &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;foo::bar&lt;/code&gt;. If you also want to have sub-namespaces of bar (e.g. &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;foo::bar::qux&lt;/code&gt;), then you additionally create the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;bar/&lt;/code&gt; directory alongside &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;bar.rs&lt;/code&gt;. To access a sub-namespace &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;qux&lt;/code&gt; inside &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;bar.rs&lt;/code&gt;, the line &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;mod qux;&lt;/code&gt; must be added to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;bar.rs&lt;/code&gt;. (This is similar to how we have to add &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;mod foo;&lt;/code&gt; at the top-level &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;lib.rs&lt;/code&gt;.)&lt;/p&gt;

&lt;p&gt;To re-export the namespace and make it available to all users outside of &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;bar&lt;/code&gt;, it should be changed to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;pub mod qux;&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;The main take-away is that Rust requires the explicit re-exporting of nested modules using &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;mod&lt;/code&gt; at each step of the hierarchy, while Python does not.&lt;/p&gt;

&lt;h2 id=&quot;related-posts&quot;&gt;Related posts&lt;/h2&gt;

&lt;p&gt;The following are hand-curated posts which you might find interesting.&lt;/p&gt;

&lt;table class=&quot;related-posts&quot;&gt;
&lt;thead&gt;
  &lt;tr&gt;
    &lt;th&gt;Date&lt;/th&gt;
    &lt;th&gt;&lt;/th&gt;
    &lt;th&gt;Title&lt;/th&gt;
  &lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;

  &lt;tr&gt;
    &lt;td&gt;03&amp;nbsp;January&amp;nbsp;2021&lt;/td&gt;
    &lt;td class=&quot;this-post&quot;&gt;
      
      (this&amp;nbsp;post)
      
      &lt;/td&gt;
    &lt;td&gt;&lt;a href=&quot;/rust-modules-for-python-users/&quot;&gt;The Rust module system for Python users&lt;/a&gt;
    &lt;/td&gt;
  &lt;/tr&gt;

  &lt;tr&gt;
    &lt;td&gt;29&amp;nbsp;April&amp;nbsp;2021&lt;/td&gt;
    &lt;td class=&quot;this-post&quot;&gt;
      
      &lt;/td&gt;
    &lt;td&gt;&lt;a href=&quot;/port-python-to-rust/&quot;&gt;Incrementally porting a small Python project to Rust&lt;/a&gt;
    &lt;/td&gt;
  &lt;/tr&gt;

&lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;Want to see more of my posts? Follow me &lt;a href=&quot;https://twitter.com/arxanas&quot;&gt;on Twitter&lt;/a&gt; or subscribe &lt;a href=&quot;/feed.xml&quot;&gt;via RSS&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&quot;comments&quot;&gt;Comments&lt;/h2&gt;

&lt;ul&gt;


&lt;/ul&gt;

&lt;div id=&quot;disqus_thread&quot;&gt;&lt;/div&gt;
&lt;script&gt;

/**
 *  RECOMMENDED CONFIGURATION VARIABLES: EDIT AND UNCOMMENT THE SECTION BELOW TO INSERT DYNAMIC VALUES FROM YOUR PLATFORM OR CMS.
 *  LEARN WHY DEFINING THESE VARIABLES IS IMPORTANT: https://disqus.com/admin/universalcode/#configuration-variables */
var disqus_config = function () {
    this.page.url = &quot;https://blog.waleedkhan.name/rust-modules-for-python-users/&quot;;
    this.page.identifier = &quot;rust-modules-for-python-users/&quot;;
};

(function() { // DON'T EDIT BELOW THIS LINE
    var d = document, s = d.createElement('script');
    s.src = '//waleedkhan-name.disqus.com/embed.js';
    s.setAttribute('data-timestamp', +new Date());
    (d.head || d.body).appendChild(s);
})();
&lt;/script&gt;

&lt;noscript&gt;Please enable JavaScript to view the &lt;a href=&quot;https://disqus.com/?ref_noscript&quot;&gt;comments powered by Disqus.&lt;/a&gt;&lt;/noscript&gt;

</description>
        <pubDate>Sun, 03 Jan 2021 00:00:00 -0600</pubDate>
        <link>https://blog.waleedkhan.name/rust-modules-for-python-users/</link>
        <guid isPermaLink="true">https://blog.waleedkhan.name/rust-modules-for-python-users/</guid>
        
        <category>python</category>
        
        <category>rust</category>
        
        <category>software-engineering</category>
        
        
      </item>
    
  </channel>
</rss>
