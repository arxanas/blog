<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Steno &amp; PL</title>
    <description>This is a personal blog. Unless otherwise stated, the opinions
expressed here are my own, and not those of my past or present
employers.</description>
    <link>https://blog.waleedkhan.name/</link>
    <atom:link href="https://blog.waleedkhan.name/feed.xml" rel="self" type="application/rss+xml"/>
    <pubDate>Tue, 14 Mar 2023 15:52:48 -0500</pubDate>
    <lastBuildDate>Tue, 14 Mar 2023 15:52:48 -0500</lastBuildDate>
    <generator>Jekyll v4.2.0</generator>
    
      <item>
        <title>e69de29bb2d1d6434b8b29ae775ad8c2e48c5391</title>
        <description>&lt;p&gt;&lt;em&gt;Intended audience: software engineers working with Git who happen to come across this value and want to confirm that it has particular significance.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;The hash &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;e69de29bb2d1d6434b8b29ae775ad8c2e48c5391&lt;/code&gt; is used by Git to indicate an empty blob (an empty file).&lt;/p&gt;

&lt;p&gt;To verify this, we can construct the object content manually and hash it. The format for object contents is &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;&amp;lt;type&amp;gt; &amp;lt;size&amp;gt;\0&amp;lt;contents&amp;gt;&lt;/code&gt; (where &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;\0&lt;/code&gt; denotes the &lt;a href=&quot;https://en.wikipedia.org/wiki/Null_character&quot;&gt;null byte&lt;/a&gt;). In this case, the type is &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;blob&lt;/code&gt; and the size is &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;0&lt;/code&gt;, and there are no contents. We can compute the hash with one of the following commands:&lt;/p&gt;

&lt;div class=&quot;language-sh highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;printf&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&apos;blob 0\0&apos;&lt;/span&gt; | shasum
e69de29bb2d1d6434b8b29ae775ad8c2e48c5391  -

&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;printf&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&apos;blob 0\0&apos;&lt;/span&gt; | openssl dgst &lt;span class=&quot;nt&quot;&gt;-sha1&lt;/span&gt;  
e69de29bb2d1d6434b8b29ae775ad8c2e48c5391
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;See also &lt;a href=&quot;https://stackoverflow.com/q/47465226/344643&quot;&gt;&lt;em&gt;Why does Git hash only the Contents of A File?&lt;/em&gt;&lt;/a&gt; for some related discussion.&lt;/p&gt;

&lt;h2 id=&quot;comments&quot;&gt;Comments&lt;/h2&gt;

&lt;ul&gt;



&lt;/ul&gt;

&lt;script type=&quot;text/javascript&quot; src=&quot;/scripts/github-comment-links.js&quot;&gt;&lt;/script&gt;

&lt;div id=&quot;disqus_thread&quot;&gt;&lt;/div&gt;
&lt;script&gt;

/**
 *  RECOMMENDED CONFIGURATION VARIABLES: EDIT AND UNCOMMENT THE SECTION BELOW TO INSERT DYNAMIC VALUES FROM YOUR PLATFORM OR CMS.
 *  LEARN WHY DEFINING THESE VARIABLES IS IMPORTANT: https://disqus.com/admin/universalcode/#configuration-variables */
var disqus_config = function () {
    this.page.url = &quot;https://blog.waleedkhan.name/e69de29bb2d1d6434b8b29ae775ad8c2e48c5391/&quot;;
    this.page.identifier = &quot;e69de29bb2d1d6434b8b29ae775ad8c2e48c5391/&quot;;
};

(function() { // DON&apos;T EDIT BELOW THIS LINE
    var d = document, s = d.createElement(&apos;script&apos;);
    s.src = &apos;//waleedkhan-name.disqus.com/embed.js&apos;;
    s.setAttribute(&apos;data-timestamp&apos;, +new Date());
    (d.head || d.body).appendChild(s);
})();
&lt;/script&gt;

&lt;noscript&gt;Please enable JavaScript to view the &lt;a href=&quot;https://disqus.com/?ref_noscript&quot;&gt;comments powered by Disqus.&lt;/a&gt;&lt;/noscript&gt;

</description>
        <pubDate>Tue, 14 Mar 2023 00:00:00 -0500</pubDate>
        <link>https://blog.waleedkhan.name/e69de29bb2d1d6434b8b29ae775ad8c2e48c5391/</link>
        <guid isPermaLink="true">https://blog.waleedkhan.name/e69de29bb2d1d6434b8b29ae775ad8c2e48c5391/</guid>
        
        <category>git</category>
        
        <category>reference</category>
        
        <category>software-engineering</category>
        
        
      </item>
    
      <item>
        <title>My compensation history</title>
        <description>&lt;p&gt;&lt;em&gt;Intended audience: current software engineers seeking information for their own job search or negotation; people curious about the compensation in software engineering in the US (“tier 3”).&lt;/em&gt;&lt;/p&gt;

&lt;ul id=&quot;markdown-toc&quot;&gt;
  &lt;li&gt;&lt;a href=&quot;#compensation-history&quot; id=&quot;markdown-toc-compensation-history&quot;&gt;Compensation history&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#comments&quot; id=&quot;markdown-toc-comments&quot;&gt;Comments&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;compensation-history&quot;&gt;Compensation history&lt;/h2&gt;

&lt;p&gt;Some others have &lt;a href=&quot;https://www.jvt.me/posts/2021/09/09/public-salary-history/&quot;&gt;shared their compensation in the software engineering market&lt;/a&gt;. For the same reasons, I’m making mine available &lt;a href=&quot;https://docs.google.com/spreadsheets/d/1agEtwxcpS0HB8HSJJjy2u6wIUbi5LFUQMAus4ADu7mU/edit?usp=sharing&quot;&gt;at this Google Sheets link&lt;/a&gt;. I consider this information somewhat sensitive, so you’ll have to request access.&lt;/p&gt;

&lt;p&gt;In the &lt;a href=&quot;https://blog.pragmaticengineer.com/software-engineering-salaries-in-the-netherlands-and-europe/&quot;&gt;trimodal salary model&lt;/a&gt;, having worked in the US in &lt;a href=&quot;https://en.wikipedia.org/wiki/Big_Tech&quot;&gt;big tech&lt;/a&gt; and now finance, I rank well into “tier 3”. Thus, this information is most useful for those negotiating with tier 3 companies.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;In big tech, compensation is usually awarded in the form of salary, stock (&lt;a href=&quot;https://en.wikipedia.org/wiki/Restricted_stock&quot;&gt;RSUs&lt;/a&gt;), and a yearly performance-based bonus.&lt;/li&gt;
  &lt;li&gt;In finance, compensation is usually awarded in the form of salary and a yearly performance-based bonus.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;If you have questions about compensation or negotiation as a software engineer in the US, you can &lt;a href=&quot;/about/&quot;&gt;find my contact information here&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&quot;comments&quot;&gt;Comments&lt;/h2&gt;

&lt;ul&gt;



&lt;/ul&gt;

&lt;script type=&quot;text/javascript&quot; src=&quot;/scripts/github-comment-links.js&quot;&gt;&lt;/script&gt;

&lt;div id=&quot;disqus_thread&quot;&gt;&lt;/div&gt;
&lt;script&gt;

/**
 *  RECOMMENDED CONFIGURATION VARIABLES: EDIT AND UNCOMMENT THE SECTION BELOW TO INSERT DYNAMIC VALUES FROM YOUR PLATFORM OR CMS.
 *  LEARN WHY DEFINING THESE VARIABLES IS IMPORTANT: https://disqus.com/admin/universalcode/#configuration-variables */
var disqus_config = function () {
    this.page.url = &quot;https://blog.waleedkhan.name/compensation-history/&quot;;
    this.page.identifier = &quot;compensation-history/&quot;;
};

(function() { // DON&apos;T EDIT BELOW THIS LINE
    var d = document, s = d.createElement(&apos;script&apos;);
    s.src = &apos;//waleedkhan-name.disqus.com/embed.js&apos;;
    s.setAttribute(&apos;data-timestamp&apos;, +new Date());
    (d.head || d.body).appendChild(s);
})();
&lt;/script&gt;

&lt;noscript&gt;Please enable JavaScript to view the &lt;a href=&quot;https://disqus.com/?ref_noscript&quot;&gt;comments powered by Disqus.&lt;/a&gt;&lt;/noscript&gt;

</description>
        <pubDate>Wed, 08 Mar 2023 00:00:00 -0600</pubDate>
        <link>https://blog.waleedkhan.name/compensation-history/</link>
        <guid isPermaLink="true">https://blog.waleedkhan.name/compensation-history/</guid>
        
        <category>finance</category>
        
        <category>software-engineering</category>
        
        
      </item>
    
      <item>
        <title>Improving incremental test times in Rust</title>
        <description>&lt;p&gt;&lt;em&gt;Intended audience: prospective-to-intermediate Rust developers who worry about slow compilation times, the scale thereof, and preventative practices; advanced Rust developers who can help me improve my own compilation times.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Rust is known for slow compilation times. I spent a long time trying to improve incremental test build times for my project &lt;a href=&quot;https://github.com/arxanas/git-branchless&quot;&gt;git-branchless&lt;/a&gt; in &lt;a href=&quot;https://github.com/arxanas/git-branchless/pull/650&quot;&gt;https://github.com/arxanas/git-branchless/pull/650&lt;/a&gt;. This is a discussion of the results.&lt;/p&gt;

&lt;ul id=&quot;markdown-toc&quot;&gt;
  &lt;li&gt;&lt;a href=&quot;#executive-summary&quot; id=&quot;markdown-toc-executive-summary&quot;&gt;Executive summary&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#project-details&quot; id=&quot;markdown-toc-project-details&quot;&gt;Project details&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#splitting-into-more-crates&quot; id=&quot;markdown-toc-splitting-into-more-crates&quot;&gt;Splitting into more crates&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#no-op-timing&quot; id=&quot;markdown-toc-no-op-timing&quot;&gt;No-op timing&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#no-more-profiling&quot; id=&quot;markdown-toc-no-more-profiling&quot;&gt;No more profiling?&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#no-more-ideas&quot; id=&quot;markdown-toc-no-more-ideas&quot;&gt;No more ideas?&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#comments&quot; id=&quot;markdown-toc-comments&quot;&gt;Comments&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;executive-summary&quot;&gt;Executive summary&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;Incremental testing refers only to changing the &lt;em&gt;integration test code&lt;/em&gt; and rebuilding. The source code remains unchanged.&lt;/li&gt;
  &lt;li&gt;In the end, I was able to reduce incremental test time from ~6.9sec to ~1.7sec (~4x). Other techniques to improve compilation time produced marginal or no improvements.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;For your reference, here’s the best articles for conceptual understanding of the Rust build model and improving compilation time:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://matklad.github.io/2021/09/04/fast-rust-builds.html&quot;&gt;Fast Rust Builds&lt;/a&gt; (&lt;a href=&quot;https://matklad.github.io&quot;&gt;matklad.github.io&lt;/a&gt;, 2021)&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://matklad.github.io/2021/05/31/how-to-test.html&quot;&gt;How to Test&lt;/a&gt; (&lt;a href=&quot;https://matklad.github.io&quot;&gt;matklad.github.io&lt;/a&gt;, 2021)&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://fasterthanli.me/articles/why-is-my-rust-build-so-slow&quot;&gt;Why is my Rust build so slow?&lt;/a&gt; (&lt;a href=&quot;https://fasterthanli.me/&quot;&gt;fasterthanli.me&lt;/a&gt;, 2021)&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://endler.dev/2020/rust-compile-times/&quot;&gt;Tips for Faster Rust Builds&lt;/a&gt; (&lt;a href=&quot;https://endler.dev&quot;&gt;endler.dev&lt;/a&gt;, 2020-2022)
    &lt;ul&gt;
      &lt;li&gt;Actually, I didn’t review this article at the time, but I did at the time of this writing.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;project-details&quot;&gt;Project details&lt;/h2&gt;

&lt;p&gt;Here’s how big my project &lt;a href=&quot;https://github.com/arxanas/git-branchless&quot;&gt;git-branchless&lt;/a&gt; was before the pull request:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;git-branchless/src&lt;/code&gt;: 12060 lines.&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;git-branchless/tests&lt;/code&gt;: 12897 lines.
    &lt;ul&gt;
      &lt;li&gt;Note that it relies heavily on snapshot testing, so most of these lines of code are multiline string literals.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;git-branchless-lib/src&lt;/code&gt;: 12406 lines.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;It’s permissible that compilation and linking time should be slow, but in order to optimize my development feedback loop, I need test times to be fast. Specifically, I want to be able to iterate on the development of a single certain test. (IntelliJ has a nice feature to automatically re-run a given test when there are source changes, but the utility is diminished when it takes too long to recompile the test.)&lt;/p&gt;

&lt;p&gt;To start, building the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;test_amend&lt;/code&gt; binary (which tests the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;amend&lt;/code&gt; subcommand) after a single comment addition to the test file itself (no library changes!) takes ~6.9sec:&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;hyperfine &lt;span class=&quot;nt&quot;&gt;--warmup&lt;/span&gt; 3 &lt;span class=&quot;nt&quot;&gt;--prepare&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&apos;echo &quot;// @nocommit test&quot; &amp;gt;&amp;gt;git-branchless/tests/command/test_amend.rs&apos;&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&apos;cargo test --test mod --no-run&apos;&lt;/span&gt;   
Benchmark 1: cargo &lt;span class=&quot;nb&quot;&gt;test&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;--test&lt;/span&gt; mod &lt;span class=&quot;nt&quot;&gt;--no-run&lt;/span&gt;
  Time &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;mean ± σ&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;:      6.927 s ±  0.123 s    &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;User: 7.652 s, System: 1.738 s]
  Range &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;min … max&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;:    6.754 s …  7.161 s    10 runs
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Staggering! This is not a large project, and we’re only making changes to the &lt;em&gt;tests&lt;/em&gt;, so it shouldn’t require so much iteration time.&lt;/p&gt;

&lt;h2 id=&quot;splitting-into-more-crates&quot;&gt;Splitting into more crates&lt;/h2&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/arxanas/git-branchless/pull/650&quot;&gt;In the pull request&lt;/a&gt;, I extract code into an additional nine crates, resulting in an incremental test build time of ~1.7sec (~4x improvement):&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;hyperfine &lt;span class=&quot;nt&quot;&gt;--warmup&lt;/span&gt; 3 &lt;span class=&quot;nt&quot;&gt;--prepare&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&apos;echo &quot;// @nocommit test&quot; &amp;gt;&amp;gt;git-branchless/tests/test_amend.rs&apos;&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&apos;cargo test --test test_amend --no-run&apos;&lt;/span&gt;   
Benchmark 1: cargo &lt;span class=&quot;nb&quot;&gt;test&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;--test&lt;/span&gt; test_amend &lt;span class=&quot;nt&quot;&gt;--no-run&lt;/span&gt;
  Time &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;mean ± σ&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;:      1.771 s ±  0.012 s    &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;User: 1.471 s, System: 0.330 s]
  Range &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;min … max&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;:    1.750 s …  1.793 s    10 runs
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;In relative terms, this is a significant improvement, but in absolute terms, this is rather poor, in my opinion. I would expect 100-200ms to parse, expand macros, typecheck, and generate code (with no optimizations) for a file of this size (~1k lines, mostly long string values).&lt;/p&gt;

&lt;p&gt;Furthermore, splitting into multiple crates makes it harder to distribute my project via &lt;a href=&quot;https://crates.io/&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;crates.io&lt;/code&gt;&lt;/a&gt;:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Each crate must individually be published to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;crates.io&lt;/code&gt; (you cannot publish a crate with &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;git&lt;/code&gt; dependencies to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;crates.io&lt;/code&gt;)
    &lt;ul&gt;
      &lt;li&gt;So I have to manage versioning and licensing of each crate.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;According to my user survey, the majority of my users install via &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;cargo&lt;/code&gt;. For the question “How did you install git-branchless?”, the responses are as follows (as of 2023-02-07):
    &lt;ul&gt;
      &lt;li&gt;7/18 (38.9%): via &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;cargo install git-branchless&lt;/code&gt;&lt;/li&gt;
      &lt;li&gt;4/18 (22.2%): via traditional system package manager&lt;/li&gt;
      &lt;li&gt;4/18 (22.2%): via Nix or NixOS&lt;/li&gt;
      &lt;li&gt;2/18 (11.1%): via cloning the repository and manually building and installing&lt;/li&gt;
      &lt;li&gt;1/18 (5.6%): via GitHub Actions build artifact&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;It’s unfortunate that I have to expose internal modules publicly on &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;crates.io&lt;/code&gt; just to get reasonable compilation times.&lt;/p&gt;

&lt;h2 id=&quot;no-op-timing&quot;&gt;No-op timing&lt;/h2&gt;

&lt;p&gt;At this point, I measure the no-op time to be ~350ms for a smaller test crate with few dependencies:&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;hyperfine &lt;span class=&quot;nt&quot;&gt;--warmup&lt;/span&gt; 3 &lt;span class=&quot;s1&quot;&gt;&apos;cargo test -p git-branchless-test --no-run&apos;&lt;/span&gt;      	 
Benchmark 1: cargo &lt;span class=&quot;nb&quot;&gt;test&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-p&lt;/span&gt; git-branchless-test &lt;span class=&quot;nt&quot;&gt;--no-run&lt;/span&gt;
  Time &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;mean ± σ&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;: 	344.2 ms ±   3.5 ms	&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;User: 246.2 ms, System: 91.9 ms]
  Range &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;min … max&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;:   340.4 ms … 351.0 ms	10 runs
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;This is surprising. I would expect the overhead for a no-op build to be similar to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;git status&lt;/code&gt;, maybe 15ms:&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;hyperfine &lt;span class=&quot;nt&quot;&gt;--warmup&lt;/span&gt; 3 &lt;span class=&quot;s1&quot;&gt;&apos;git status&apos;&lt;/span&gt;
Benchmark 1: git status
  Time &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;mean ± σ&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;:  	13.5 ms ±   2.5 ms	&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;User: 4.9 ms, System: 6.1 ms]
  Range &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;min … max&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;:	11.1 ms …  24.7 ms	197 runs
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;There might be some kind of deeper issue here. &lt;a href=&quot;https://nexte.st/book/antivirus-gatekeeper.html&quot;&gt;The &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;cargo nextest&lt;/code&gt; documentation&lt;/a&gt; warns that some anti-malware systems can introduce artificial startup latency when checking executables:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;A typical sign of this happening is even the simplest of tests in cargo nextest run taking more than 0.2 seconds.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;As per the documentation, I marked my terminal software as “Developer Tools” under macOS, but couldn’t reduce the no-op compilation time.&lt;/p&gt;

&lt;h2 id=&quot;no-more-profiling&quot;&gt;No more profiling?&lt;/h2&gt;

&lt;p&gt;I tried with a subcommand crate that I made recently which should still have few dependencies:&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;hyperfine &lt;span class=&quot;nt&quot;&gt;--warmup&lt;/span&gt; 3 &lt;span class=&quot;nt&quot;&gt;--prepare&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&apos;echo &quot;// @nocommit test&quot; &amp;gt;&amp;gt;git-branchless-test/tests/test_test.rs&apos;&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&apos;cargo test -p git-branchless-test --no-run&apos;&lt;/span&gt;
Benchmark 1: cargo &lt;span class=&quot;nb&quot;&gt;test&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-p&lt;/span&gt; git-branchless-test &lt;span class=&quot;nt&quot;&gt;--no-run&lt;/span&gt;
  Time &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;mean ± σ&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;:  	1.855 s ±  0.034 s	&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;User: 1.476 s, System: 0.335 s]
  Range &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;min … max&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;:	1.831 s …  1.939 s	10 runs
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;The cargo build timings for the incremental build doesn’t help. It just shows that the test I’m building takes 100% of the spent time.&lt;/p&gt;

&lt;figure class=&quot;figure&quot;&gt;
        &lt;a href=&quot;/assets/posts/rust-incremental-test-times/cargo-timings-git-branchless-test-crate.png&quot;&gt;&lt;img class=&quot;center-image&quot; src=&quot;/assets/posts/rust-incremental-test-times/cargo-timings-git-branchless-test-crate.png&quot; alt=&quot;The timing graph for building the `git-branchless-test` crate.&quot; title=&quot;The timing graph for building the `git-branchless-test` crate.&quot; /&gt;&lt;/a&gt;
        &lt;figcaption class=&quot;caption&quot;&gt;&lt;p&gt;The timing graph for building the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;git-branchless-test&lt;/code&gt; crate.&lt;/p&gt;
&lt;/figcaption&gt;
      &lt;/figure&gt;

&lt;h2 id=&quot;no-more-ideas&quot;&gt;No more ideas?&lt;/h2&gt;

&lt;p&gt;Some ideas that didn’t work:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Combining integration tests into a single binary. (I’m happy to run individual binaries as necessary, anyways.)&lt;/li&gt;
  &lt;li&gt;Reducing the top monomorphization sites them (&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;AsRef&lt;/code&gt; calls, etc. appeared in &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;cargo llvm-lines&lt;/code&gt;, but reducing them didn’t seem to improve compilation times).&lt;/li&gt;
  &lt;li&gt;Using &lt;a href=&quot;https://github.com/mozilla/sccache&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;sccache&lt;/code&gt;&lt;/a&gt;.&lt;/li&gt;
  &lt;li&gt;Using &lt;a href=&quot;https://nexte.st/&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;cargo-nextest&lt;/code&gt;&lt;/a&gt;.&lt;/li&gt;
  &lt;li&gt;Using &lt;a href=&quot;https://github.com/michaeleisel/zld&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;zld&lt;/code&gt;&lt;/a&gt;/&lt;a href=&quot;https://github.com/rui314/mold&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;mold&lt;/code&gt;&lt;/a&gt;/&lt;a href=&quot;https://github.com/bluewhalesystems/sold&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;sold&lt;/code&gt;&lt;/a&gt; as the linker.&lt;/li&gt;
  &lt;li&gt;Setting &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;profile.dev.split-debuginfo = “unpacked”&lt;/code&gt; (for macOS).&lt;/li&gt;
  &lt;li&gt;Setting &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;profile.dev.build-override.opt-level = 3&lt;/code&gt;.
    &lt;ul&gt;
      &lt;li&gt;Unfortunately, there are lots of procedural macros, particularly &lt;a href=&quot;https://docs.rs/tracing/latest/tracing/&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;tracing&lt;/code&gt;&lt;/a&gt;’s &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;#[instrument]&lt;/code&gt;.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Setting &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;profile.dev.debug = 0&lt;/code&gt;. This actually does save ~20ms, but it’s not enough of an improvement by itself.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;So now I’m stuck. That’s the most I can improve Rust incremental test times. Let me know if you have any other ideas.&lt;/p&gt;

&lt;h2 id=&quot;comments&quot;&gt;Comments&lt;/h2&gt;

&lt;ul&gt;



&lt;/ul&gt;

&lt;script type=&quot;text/javascript&quot; src=&quot;/scripts/github-comment-links.js&quot;&gt;&lt;/script&gt;

&lt;div id=&quot;disqus_thread&quot;&gt;&lt;/div&gt;
&lt;script&gt;

/**
 *  RECOMMENDED CONFIGURATION VARIABLES: EDIT AND UNCOMMENT THE SECTION BELOW TO INSERT DYNAMIC VALUES FROM YOUR PLATFORM OR CMS.
 *  LEARN WHY DEFINING THESE VARIABLES IS IMPORTANT: https://disqus.com/admin/universalcode/#configuration-variables */
var disqus_config = function () {
    this.page.url = &quot;https://blog.waleedkhan.name/rust-incremental-test-times/&quot;;
    this.page.identifier = &quot;rust-incremental-test-times/&quot;;
};

(function() { // DON&apos;T EDIT BELOW THIS LINE
    var d = document, s = d.createElement(&apos;script&apos;);
    s.src = &apos;//waleedkhan-name.disqus.com/embed.js&apos;;
    s.setAttribute(&apos;data-timestamp&apos;, +new Date());
    (d.head || d.body).appendChild(s);
})();
&lt;/script&gt;

&lt;noscript&gt;Please enable JavaScript to view the &lt;a href=&quot;https://disqus.com/?ref_noscript&quot;&gt;comments powered by Disqus.&lt;/a&gt;&lt;/noscript&gt;

</description>
        <pubDate>Tue, 07 Feb 2023 00:00:00 -0600</pubDate>
        <link>https://blog.waleedkhan.name/rust-incremental-test-times/</link>
        <guid isPermaLink="true">https://blog.waleedkhan.name/rust-incremental-test-times/</guid>
        
        <category>rust</category>
        
        <category>software-engineering</category>
        
        
      </item>
    
      <item>
        <title>Yandex&apos;s Arc source control system</title>
        <description>&lt;p&gt;&lt;em&gt;Intended audience: developers of source control systems like Git or Mercurial.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;There was a recent &lt;a href=&quot;https://arseniyshestakov.com/2023/01/26/yandex-services-source-code-leak/&quot;&gt;source code leak&lt;/a&gt; from &lt;a href=&quot;https://en.wikipedia.org/wiki/Yandex&quot;&gt;Yandex&lt;/a&gt;. I haven’t examined any of the files, but the topic itself reminds us that Yandex maintains a large &lt;a href=&quot;https://monorepo.tools/&quot;&gt;monorepo&lt;/a&gt;, and has even built their own source control system to handle it, called Arc.&lt;/p&gt;

&lt;p&gt;Original article from Yandex (2020): &lt;a href=&quot;https://habr.com/ru/company/yandex/blog/482926/&quot;&gt;https://habr.com/ru/company/yandex/blog/482926/&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Brief notes (&lt;a href=&quot;https://discord.com/channels/1042895022950994071/1042907270473850890/1068630001240514691&quot;&gt;originally posted to Discord&lt;/a&gt;):&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Seems to be based on &lt;a href=&quot;https://subversion.apache.org/&quot;&gt;SVN&lt;/a&gt; for the back-end&lt;/li&gt;
  &lt;li&gt;Trunk-based development&lt;/li&gt;
  &lt;li&gt;6M commits, 2M files, 2TB repo size&lt;/li&gt;
  &lt;li&gt;Tried &lt;a href=&quot;https://www.mercurial-scm.org/&quot;&gt;Mercurial&lt;/a&gt; but didn’t solve performance problems&lt;/li&gt;
  &lt;li&gt;Uses generation numbers for merge-base calculation
    &lt;ul&gt;
      &lt;li&gt;This is now available in Git via the &lt;a href=&quot;https://git-scm.com/docs/commit-graph&quot;&gt;commit-graph mechanism&lt;/a&gt;.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Probably based on Git for the front-end UI, but they complain about Git’s UI being bad, so they’re improving it&lt;/li&gt;
  &lt;li&gt;Used by 20% of developers internally at the time of writing&lt;/li&gt;
  &lt;li&gt;Uses a &lt;a href=&quot;https://en.wikipedia.org/wiki/Virtual_file_system&quot;&gt;virtual filesystem&lt;/a&gt; (VFS) heavily (&lt;a href=&quot;https://en.wikipedia.org/wiki/Filesystem_in_Userspace&quot;&gt;FUSE&lt;/a&gt; on macOS, possibly they’ve changed since then?)
    &lt;ul&gt;
      &lt;li&gt;VFS support on macOS is fairly flaky these days.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Uses Yandex Database (YDB) for the back-end database, with some kind of conversion tool from SVN&lt;/li&gt;
  &lt;li&gt;As part of the code review system, Arc commits are eventually converted to SVN commits, including some additional Arc metadata&lt;/li&gt;
  &lt;li&gt;Implicitly uses a working copy commit for some internal algorithms, which includes untracked files since they’re providing a VFS
    &lt;ul&gt;
      &lt;li&gt;I mentioned this in the context of &lt;a href=&quot;https://github.com/martinvonz/jj&quot;&gt;Jujutsu VCS&lt;/a&gt;.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Overall, it doesn’t seem like there’s a whole lot to advance the state-of-the-art in monorepo management compared to large tech companies like Google and Meta.&lt;/p&gt;

&lt;h2 id=&quot;comments&quot;&gt;Comments&lt;/h2&gt;

&lt;ul&gt;



&lt;/ul&gt;

&lt;script type=&quot;text/javascript&quot; src=&quot;/scripts/github-comment-links.js&quot;&gt;&lt;/script&gt;

&lt;div id=&quot;disqus_thread&quot;&gt;&lt;/div&gt;
&lt;script&gt;

/**
 *  RECOMMENDED CONFIGURATION VARIABLES: EDIT AND UNCOMMENT THE SECTION BELOW TO INSERT DYNAMIC VALUES FROM YOUR PLATFORM OR CMS.
 *  LEARN WHY DEFINING THESE VARIABLES IS IMPORTANT: https://disqus.com/admin/universalcode/#configuration-variables */
var disqus_config = function () {
    this.page.url = &quot;https://blog.waleedkhan.name/yandex-arc/&quot;;
    this.page.identifier = &quot;yandex-arc/&quot;;
};

(function() { // DON&apos;T EDIT BELOW THIS LINE
    var d = document, s = d.createElement(&apos;script&apos;);
    s.src = &apos;//waleedkhan-name.disqus.com/embed.js&apos;;
    s.setAttribute(&apos;data-timestamp&apos;, +new Date());
    (d.head || d.body).appendChild(s);
})();
&lt;/script&gt;

&lt;noscript&gt;Please enable JavaScript to view the &lt;a href=&quot;https://disqus.com/?ref_noscript&quot;&gt;comments powered by Disqus.&lt;/a&gt;&lt;/noscript&gt;

</description>
        <pubDate>Fri, 27 Jan 2023 00:00:00 -0600</pubDate>
        <link>https://blog.waleedkhan.name/yandex-arc/</link>
        <guid isPermaLink="true">https://blog.waleedkhan.name/yandex-arc/</guid>
        
        <category>git</category>
        
        <category>software-engineering</category>
        
        
      </item>
    
      <item>
        <title>Using `tracing` with Rust CLI applications</title>
        <description>&lt;ul id=&quot;markdown-toc&quot;&gt;
  &lt;li&gt;&lt;a href=&quot;#for-cargo&quot; id=&quot;markdown-toc-for-cargo&quot;&gt;For Cargo&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#full-notes&quot; id=&quot;markdown-toc-full-notes&quot;&gt;Full notes&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#comments&quot; id=&quot;markdown-toc-comments&quot;&gt;Comments&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/epage&quot;&gt;@epage&lt;/a&gt; in &lt;a href=&quot;https://github.com/arxanas/git-branchless/discussions/732&quot;&gt;https://github.com/arxanas/git-branchless/discussions/732&lt;/a&gt; asked:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;I see talk of tracing but mostly from a web perspective and I’m curious how the experience translates to a CLI. I am looking to adopt it in some smaller CLIs to get some experience to understand how it could possibly help cargo.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;I’m republishing my answer here, in &lt;a href=&quot;/on-bullet-points/&quot;&gt;bullet point form&lt;/a&gt;:&lt;/p&gt;

&lt;h2 id=&quot;for-cargo&quot;&gt;For Cargo&lt;/h2&gt;

&lt;p&gt;For Cargo, I would emphasize these points:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;It encourages doing the right thing via the structured logging macros. Extra computation isn’t carried out if it wouldn’t be used by a subscriber, which could otherwise cause a performance regression.&lt;/li&gt;
  &lt;li&gt;Tracking spantraces for profiling is annoying, because you have to manually annotate each function that you want to sample. I’m not sure if this can be improved via using backtraces instead.&lt;/li&gt;
  &lt;li&gt;You can easily output to a number of different subscribers, including custom ones (…if you know what functions to call). For example, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;tracing_subscriber::fmt_layer::Layer::with_writer&lt;/code&gt; will let you construct a layer which consumes formatted logging information and write it to somewhere arbitrary.
    &lt;ul&gt;
      &lt;li&gt;You can use off-the-shelf components, like the Chrome tracing subscriber.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Somebody can configure it once and others don’t have to worry about it much.&lt;/li&gt;
  &lt;li&gt;It has been very effective for profiling for me.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;full-notes&quot;&gt;Full notes&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;Using &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;eyre&lt;/code&gt;/&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;color_eyre&lt;/code&gt;, you can include function parameters in spantraces. This is quite valuable during debugging, since I can see e.g. a commit OID in the spantrace for a commit which is causing problems, without having to manually extract it by adding more logging.&lt;/li&gt;
  &lt;li&gt;Configuring tracing for the first time is a pain, but you largely don’t have to touch it after that.
    &lt;ul&gt;
      &lt;li&gt;Here’s my function which does that: &lt;a href=&quot;https://github.com/arxanas/git-branchless/blob/4b76af669258e80a6f6eb4ddf45bbb358da80248/git-branchless/src/commands/mod.rs#L437&quot;&gt;https://github.com/arxanas/git-branchless/blob/4b76af669258e80a6f6eb4ddf45bbb358da80248/git-branchless/src/commands/mod.rs#L437&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;I successfully configured logging statements to be printed via my own type (&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Effects&lt;/code&gt;), rather than being printed directly to stdout/stderr, because it may clobber progress meters or other interactive output.&lt;/li&gt;
      &lt;li&gt;I configured it so that subprocesses are not included in the parent trace; they get their own output files. To be honest, I don’t think I’ve needed to examine subprocess tracing.&lt;/li&gt;
      &lt;li&gt;It used to be less ergonomic, but they improved things around the composition of layers at some point recently, like filtering one layer based on another layer; see &lt;a href=&quot;https://github.com/arxanas/git-branchless/commit/5428f1b9dbed356accf854774cad053c22d19b1f&quot;&gt;https://github.com/arxanas/git-branchless/commit/5428f1b9dbed356accf854774cad053c22d19b1f&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;Some of the error messages for layer composition can be inscrutable because of the use of static polymorphism by default. For example, it’s hard to conditionally construct a layer for inclusion. The types become very long chains of nested generic type parameters.
        &lt;ul&gt;
          &lt;li&gt;Fortunately, an &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Option&amp;lt;Layer&amp;gt;&lt;/code&gt; is also a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Layer&lt;/code&gt;, so you can pass &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Some(layer)&lt;/code&gt; or &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;None&lt;/code&gt; depending on your condition, rather than attempt to call methods on the registry directly.&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;The &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;#[instrument]&lt;/code&gt; macro is the only realistic way of including functions in spantraces for &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;eyre&lt;/code&gt;/&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;color_eyre&lt;/code&gt;.
    &lt;ul&gt;
      &lt;li&gt;This ruins autofixes (probably should be considered a bug in rust-analyzer).&lt;/li&gt;
      &lt;li&gt;This can ruin error locations, as sometimes the error is attributed to the function as a whole, instead of the specific line.&lt;/li&gt;
      &lt;li&gt;This can increase compilation times, since it’s a procedural macro. As you might be aware, procedural macro stuff like &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;syn&lt;/code&gt; tends to be on the critical path for crate compilation, but if you commit to not using procedural macros at all, then you can skip it.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Profiling via dumping to the Chrome tracing layer is effective.
    &lt;ul&gt;
      &lt;li&gt;See &lt;a href=&quot;https://github.com/arxanas/git-branchless/wiki/Runbook#profiling&quot;&gt;https://github.com/arxanas/git-branchless/wiki/Runbook#profiling&lt;/a&gt; for details on profiling procedures.&lt;/li&gt;
      &lt;li&gt;I’ve used this system to debug performance issues/regressions a number of times. The existing Chrome tracing visualizers are quite usable for analyzing the breakdown of time spent.&lt;/li&gt;
      &lt;li&gt;Including function parameters has been amazingly useful, because I’ve been able to directly see a slice in the profiling output which was taking too long and check the corresponding commit OID, so that I could examine and test that specific commit.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;I tried to use &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;tracing&lt;/code&gt; as an input to my own progress-reporting system (so that function calls are directly tied to progress bars which appear on the screen). It was possible, but, in the end, I gave up on this approach, because logical operations didn’t correspond exactly one-to-one with function calls, and it was too easy to forget to annotate an instrumented method correctly.&lt;/li&gt;
  &lt;li&gt;Haven’t tried &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;tracing&lt;/code&gt; with &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;async&lt;/code&gt;/&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;.await&lt;/code&gt; at all.&lt;/li&gt;
  &lt;li&gt;Haven’t tried &lt;a href=&quot;https://github.com/tokio-rs/console&quot;&gt;https://github.com/tokio-rs/console&lt;/a&gt; at all, but I would be interested to know if it’s useful for you.&lt;/li&gt;
  &lt;li&gt;Structured logging is great.
    &lt;ul&gt;
      &lt;li&gt;Just using the structured logging macros with debugging representations (i.e. &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;warn(?var, &quot;Message&quot;)&lt;/code&gt;) is substantially more ergonomic than interpolating values into strings manually.&lt;/li&gt;
      &lt;li&gt;It also handles things like rendering unprintable characters, where before I would have to be careful to include string values in quotes., etc.&lt;/li&gt;
      &lt;li&gt;In principle, you can see these events and their values in the profiling output, although I haven’t needed to profile based on individual events, only based on spans.&lt;/li&gt;
      &lt;li&gt;It’s more efficient, since we won’t construct the strings if the values are not consumed by any subscriber at runtime.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;There’s a weird incompatibility between the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;tracing_subscriber&lt;/code&gt; version used by my code and by &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;color_eyre&lt;/code&gt;, which means that I’ve locked it at a known-good version here: &lt;a href=&quot;https://github.com/arxanas/git-branchless/pull/533/commits/e97954a9a9fab4039ad269d6b8982bb8bd95b133&quot;&gt;https://github.com/arxanas/git-branchless/pull/533/commits/e97954a9a9fab4039ad269d6b8982bb8bd95b133&lt;/a&gt;.
    &lt;ul&gt;
      &lt;li&gt;In principle, I think &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;color_eyre&lt;/code&gt; just needs to upgrade their version of &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;tracing-subscriber&lt;/code&gt;, but I haven’t looked into it since then.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;comments&quot;&gt;Comments&lt;/h2&gt;

&lt;ul&gt;



&lt;/ul&gt;

&lt;script type=&quot;text/javascript&quot; src=&quot;/scripts/github-comment-links.js&quot;&gt;&lt;/script&gt;

&lt;div id=&quot;disqus_thread&quot;&gt;&lt;/div&gt;
&lt;script&gt;

/**
 *  RECOMMENDED CONFIGURATION VARIABLES: EDIT AND UNCOMMENT THE SECTION BELOW TO INSERT DYNAMIC VALUES FROM YOUR PLATFORM OR CMS.
 *  LEARN WHY DEFINING THESE VARIABLES IS IMPORTANT: https://disqus.com/admin/universalcode/#configuration-variables */
var disqus_config = function () {
    this.page.url = &quot;https://blog.waleedkhan.name/tracing-rust-cli-apps/&quot;;
    this.page.identifier = &quot;tracing-rust-cli-apps/&quot;;
};

(function() { // DON&apos;T EDIT BELOW THIS LINE
    var d = document, s = d.createElement(&apos;script&apos;);
    s.src = &apos;//waleedkhan-name.disqus.com/embed.js&apos;;
    s.setAttribute(&apos;data-timestamp&apos;, +new Date());
    (d.head || d.body).appendChild(s);
})();
&lt;/script&gt;

&lt;noscript&gt;Please enable JavaScript to view the &lt;a href=&quot;https://disqus.com/?ref_noscript&quot;&gt;comments powered by Disqus.&lt;/a&gt;&lt;/noscript&gt;

</description>
        <pubDate>Tue, 24 Jan 2023 00:00:00 -0600</pubDate>
        <link>https://blog.waleedkhan.name/tracing-rust-cli-apps/</link>
        <guid isPermaLink="true">https://blog.waleedkhan.name/tracing-rust-cli-apps/</guid>
        
        <category>rust</category>
        
        <category>software-engineering</category>
        
        
      </item>
    
      <item>
        <title>Interactive blogs</title>
        <description>&lt;ul id=&quot;markdown-toc&quot;&gt;
  &lt;li&gt;&lt;a href=&quot;#perish-not-this-blog&quot; id=&quot;markdown-toc-perish-not-this-blog&quot;&gt;Perish not this blog&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#comments&quot; id=&quot;markdown-toc-comments&quot;&gt;Comments&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;My ideal blogging platform is &lt;a href=&quot;https://www.google.com/docs&quot;&gt;Google Docs&lt;/a&gt;, because it supports the following:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Live collaboration.&lt;/li&gt;
  &lt;li&gt;Leaving inline comments on the text, rather than in a separate area.&lt;/li&gt;
  &lt;li&gt;Suggesting inline edits. What a low-friction way to apply incremental improvements!
    &lt;ul&gt;
      &lt;li&gt;For this reason, I also prefer Wikis to Git when it comes to writing documentation, because the barrier to entry is much lower.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Unfortunately, Google Docs isn’t particularly accessible:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;It seems to not be indexable by search engines?&lt;/li&gt;
  &lt;li&gt;Requires Javascript.&lt;/li&gt;
  &lt;li&gt;Requires Google, which some people are opposed to, for privacy reasons.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;So I don’t publish my blog posts that way.&lt;/p&gt;

&lt;style type=&quot;text/css&quot;&gt;
@keyframes hypermedia {
  0%, 100% {
    left: -1em;
    top: 0.4em;
    z-index: 1;
    font-size: normal;
  }
  
  25% {
    font-size: 1.3em;
  }
  
  75% {
    font-size: 0.7em;
  }

  50% {
    left: 97%;
    top: -0.6em;
    z-index: 1;
    font-size: normal;
  }
  
  51%, 99% {
    z-index: -1;
  }
}

.hypermedia {
  letter-spacing: 0.1em;
  position: relative;
  font-variant: small-caps;
}

.hypermedia::before {
  content: &quot;✨&quot;;
  position: absolute;
  animation-name: hypermedia;
  animation-duration: 6s;
  animation-iteration-count: infinite;
  animation-timing-function: ease-in-out;
}
&lt;/style&gt;

&lt;p&gt;But in the era of &lt;span class=&quot;hypermedia&quot;&gt;hypermedia&lt;/span&gt;, these features ought to be standard! We ought to &lt;span class=&quot;hypermedia&quot;&gt;have discussions&lt;/span&gt;, not fling articles into &lt;span class=&quot;hypermedia&quot;&gt;the void&lt;/span&gt;!&lt;/p&gt;

&lt;p&gt;Medium used to show inline comments, &lt;a href=&quot;https://medium.com/@jashan/how-to-make-the-best-of-a-broken-commenting-system-113c8cc1fe71&quot;&gt;but doesn’t anymore&lt;/a&gt; (not that I am particularly keen to publish on Medium). I haven’t seen many other blogs that invite discussion via interactive features.&lt;/p&gt;

&lt;p&gt;I was once reading &lt;a href=&quot;https://dev.realworldocaml.org/&quot;&gt;&lt;em&gt;Real World OCaml&lt;/em&gt;&lt;/a&gt; while its second edition was in draft. After each &lt;em&gt;sentence&lt;/em&gt;, it had a link to leave a comment. Now that’s a way to write a book! Why should a literal book be more interactive than our blogs?&lt;/p&gt;

&lt;h2 id=&quot;perish-not-this-blog&quot;&gt;Perish not this blog&lt;/h2&gt;

&lt;p&gt;As of recently, you can leave inline comments on paragraphs on my blog by hovering/tapping and clicking the “Comment” link that appears.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Other solutions:
    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;https://utteranc.es&quot;&gt;https://utteranc.es&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;https://disqus.com/&quot;&gt;Disqus&lt;/a&gt;
        &lt;ul&gt;
          &lt;li&gt;Already used for comments on this blog, although it’s a little shady with respect to cookie usage.&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;These alternatives require spawning a comment thread for each commentable paragraph.
        &lt;ul&gt;
          &lt;li&gt;The UIs are not designed to be compact, so they didn’t fit into the flow of the blog well. You’d have a massive comment form for each paragraph.&lt;/li&gt;
          &lt;li&gt;This would induce unnecessary load on the commenting servers, which is a little rude to them.&lt;/li&gt;
          &lt;li&gt;This would make the page load more slowly as it queries &lt;em&gt;n&lt;/em&gt; comment threads.&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;You could take inspiration from a project like &lt;a href=&quot;https://aroc.github.io/side-comments-demo/&quot;&gt;SideComments.js&lt;/a&gt;.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;My implementation unfortunately relies on GitHub as the authentication provider and database. I’m sure many readers won’t have GitHub accounts.
    &lt;ul&gt;
      &lt;li&gt;That was the easiest way for me to implement it.&lt;/li&gt;
      &lt;li&gt;The GitHub API is expressive enough to query all of the comments for a document in a single request.&lt;/li&gt;
      &lt;li&gt;The GitHub API doesn’t need authentication or an API key to make requests!
        &lt;ul&gt;
          &lt;li&gt;Presumably you’ll be rate-limited more aggressively than if you were authenticated.&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;Opening a new GitHub Issues page to leave your comment is clumsy.&lt;/li&gt;
      &lt;li&gt;In retrospect, perhaps I should have used GitHub discussions instead of GitHub Issues as the backing store, since they’re… discussions.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Paragraphs are identified using the post permalink/”slug” and by taking the first few normalized bytes of data in the paragraph and encoding as base64.
    &lt;ul&gt;
      &lt;li&gt;In theory, paragraph IDs therefore aren’t stable if the content changes later, but it seems like a minor problem.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Here’s the implementation at the time of this writing (137 lines of code): &lt;a href=&quot;https://github.com/arxanas/blog/blob/c34f0e18b81ed1d1b22636eaef2cabe7b6afd77e/scripts/github-comment-links.js&quot;&gt;github-comment-links.js&lt;/a&gt;.
    &lt;ul&gt;
      &lt;li&gt;Modern browser APIs make querying the GitHub API quite simple.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;comments&quot;&gt;Comments&lt;/h2&gt;

&lt;ul&gt;



&lt;/ul&gt;

&lt;script type=&quot;text/javascript&quot; src=&quot;/scripts/github-comment-links.js&quot;&gt;&lt;/script&gt;

&lt;div id=&quot;disqus_thread&quot;&gt;&lt;/div&gt;
&lt;script&gt;

/**
 *  RECOMMENDED CONFIGURATION VARIABLES: EDIT AND UNCOMMENT THE SECTION BELOW TO INSERT DYNAMIC VALUES FROM YOUR PLATFORM OR CMS.
 *  LEARN WHY DEFINING THESE VARIABLES IS IMPORTANT: https://disqus.com/admin/universalcode/#configuration-variables */
var disqus_config = function () {
    this.page.url = &quot;https://blog.waleedkhan.name/interactive-blogs/&quot;;
    this.page.identifier = &quot;interactive-blogs/&quot;;
};

(function() { // DON&apos;T EDIT BELOW THIS LINE
    var d = document, s = d.createElement(&apos;script&apos;);
    s.src = &apos;//waleedkhan-name.disqus.com/embed.js&apos;;
    s.setAttribute(&apos;data-timestamp&apos;, +new Date());
    (d.head || d.body).appendChild(s);
})();
&lt;/script&gt;

&lt;noscript&gt;Please enable JavaScript to view the &lt;a href=&quot;https://disqus.com/?ref_noscript&quot;&gt;comments powered by Disqus.&lt;/a&gt;&lt;/noscript&gt;

</description>
        <pubDate>Wed, 11 Jan 2023 00:00:00 -0600</pubDate>
        <link>https://blog.waleedkhan.name/interactive-blogs/</link>
        <guid isPermaLink="true">https://blog.waleedkhan.name/interactive-blogs/</guid>
        
        <category>rant</category>
        
        <category>writing</category>
        
        
      </item>
    
      <item>
        <title>Where are my Git UI features from the future?</title>
        <description>&lt;ul id=&quot;markdown-toc&quot;&gt;
  &lt;li&gt;&lt;a href=&quot;#git-sucks&quot; id=&quot;markdown-toc-git-sucks&quot;&gt;Git sucks&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#rubric&quot; id=&quot;markdown-toc-rubric&quot;&gt;Rubric&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#clients&quot; id=&quot;markdown-toc-clients&quot;&gt;Clients&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#awards&quot; id=&quot;markdown-toc-awards&quot;&gt;Awards&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#related-posts&quot; id=&quot;markdown-toc-related-posts&quot;&gt;Related posts&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#comments&quot; id=&quot;markdown-toc-comments&quot;&gt;Comments&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;git-sucks&quot;&gt;Git sucks&lt;/h2&gt;

&lt;p&gt;The &lt;a href=&quot;https://git-scm.com/&quot;&gt;Git version control system&lt;/a&gt; has been causing us misery for 15+ years. Since its inception, a thousand people have tried to make new clients for Git to improve usability.&lt;/p&gt;

&lt;p&gt;But practically everyone has focused on providing a pretty facade to do more or less the same operations as Git on the command-line — as if Git’s command-line interface were already the pinnacle of usability.&lt;/p&gt;

&lt;p&gt;No one bothers to consider: what are the &lt;em&gt;workflows&lt;/em&gt; that people actually want to do? What are the &lt;em&gt;features&lt;/em&gt; that would make those workflows easier? So instead we get clients which think that &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;git rebase -i&lt;/code&gt; as the best possible way to reword a commit message, or edit an old commit, or split a commit, or even worth exposing in the UI.&lt;/p&gt;

&lt;h2 id=&quot;rubric&quot;&gt;Rubric&lt;/h2&gt;

&lt;p&gt;I thought about some of the workflows I carry out frequently, and examined several Git clients (some of which are &lt;a href=&quot;https://en.wikipedia.org/wiki/Graphical_user_interface&quot;&gt;GUIs&lt;/a&gt; and some of which are &lt;a href=&quot;https://en.wikipedia.org/wiki/Text-based_user_interface&quot;&gt;TUIs&lt;/a&gt;) to see how well they supported these workflows.&lt;/p&gt;

&lt;p&gt;Many of my readers won’t care for these workflows, but it’s not just about the workflows themselves; it’s about the resolve to improve workflows by not using the faulty set of primitives offered by Git. I do not care to argue about which workflows are best or should be supported.&lt;/p&gt;

&lt;p&gt;Workflows:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;reword&lt;/code&gt;&lt;/strong&gt;: It should be possible to update the commit message of a commit which isn’t currently checked out.
    &lt;ul&gt;
      &lt;li&gt;Rewording a commit is guaranteed to not cause a merge conflict, so requiring that the commit be checked out is unnecessary.&lt;/li&gt;
      &lt;li&gt;It should also be possible to reword a commit which is the ancestor of multiple branches without abandoning some of those branches, but let’s not get our hopes up…&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;sync&lt;/code&gt;&lt;/strong&gt;: It should be possible to sync &lt;em&gt;all&lt;/em&gt; of my branches (or some subset) via merge or rebase, in a single operation.
    &lt;ul&gt;
      &lt;li&gt;I do this all the time! Practically the first thing every morning when coming into work.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;split&lt;/code&gt;&lt;/strong&gt;: There should be a specific command to split a commit into two or more commits, including commits which aren’t currently checked out.
    &lt;ul&gt;
      &lt;li&gt;Splitting a commit is guaranteed to not cause a merge conflict, so requiring that the commit be checked out is unnecessary.&lt;/li&gt;
      &lt;li&gt;Not accepting &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;git rebase -i&lt;/code&gt; solutions, as it’s very confusing to examine the state of the repository during a rebase.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;preview&lt;/code&gt;&lt;/strong&gt;: Before carrying out a merge or rebase, it should be possible to preview the result, including any conflicts that would arise.
    &lt;ul&gt;
      &lt;li&gt;That way, I don’t have to start the merge/rebase operation in order to see if it will succeed or whether it will be hard to resolve conflicts.&lt;/li&gt;
      &lt;li&gt;Merge conflicts are perhaps the worst part about using Git, so it should be much easier to work with them (and avoid dealing with them!).&lt;/li&gt;
      &lt;li&gt;The only people who seem to want this feature are people who come from other version control systems.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;undo&lt;/code&gt;&lt;/strong&gt;: I should be able to undo arbitrary operations, ideally including tracked but uncommitted changes.
    &lt;ul&gt;
      &lt;li&gt;This is &lt;em&gt;not&lt;/em&gt; the same as reverting a commit. Reverting a commit creates an altogether new commit with the inverse changes, whereas undoing an operation should restore the repository to the state it was in before the operation was carried out, so there would be no original commit to revert.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;large-load&lt;/code&gt;&lt;/strong&gt;: The UI should load large repositories quickly.
    &lt;ul&gt;
      &lt;li&gt;The UI shouldn’t hang at any point, and should show useful information as soon as it’s loaded. You shouldn’t have to wait for the entire repository to load before you can examine commits or branches.&lt;/li&gt;
      &lt;li&gt;The program is allowed to be slow on the first invocation to build any necessary caches, but must be responsive on subsequent invocations.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;large-ops&lt;/code&gt;&lt;/strong&gt;: The UI should be responsive when carrying out various operations, such as examining commits and branches, or merging or rebasing.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Extra points:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;I will award &lt;strong&gt;honorary negative points&lt;/strong&gt; for any client which dares to treat &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;git rebase -i&lt;/code&gt; as if it were a fundamental primitive.&lt;/li&gt;
  &lt;li&gt;I will award &lt;strong&gt;honorary bonus points&lt;/strong&gt; for any client which seems to respect the empirical usability research for Git (or other VCSes). Examples:
    &lt;ul&gt;
      &lt;li&gt;Gitless: &lt;a href=&quot;https://gitless.com/&quot;&gt;https://gitless.com/&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;IASGE: &lt;a href=&quot;https://investigating-archiving-git.gitlab.io/&quot;&gt;https://investigating-archiving-git.gitlab.io/&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Since I didn’t actually note down any of this, these criteria are just so that any vendors of these clients can know whether I am impressed or disappointed by them.&lt;/p&gt;

&lt;h2 id=&quot;clients&quot;&gt;Clients&lt;/h2&gt;

&lt;p&gt;I picked some clients arbitrarily from &lt;a href=&quot;https://git-scm.com/downloads/guis&quot;&gt;this list of clients&lt;/a&gt;. I am surely wrong about some of these points (or they’ve changed since I last looked), so leave a comment.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;em&gt;Update 2022-01-09: Added IntelliJ.&lt;/em&gt;&lt;/li&gt;
  &lt;li&gt;&lt;em&gt;Update 2022-01-10: Added Tower.&lt;/em&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;I included my own project &lt;a href=&quot;https://github.com/arxanas/git-branchless&quot;&gt;git-branchless&lt;/a&gt;, so it doesn’t really count as an example of innovation in the industry. I’m including it to demonstrate that many of these workflows are very much possible.&lt;/p&gt;

&lt;style type=&quot;text/css&quot;&gt;
th.rotate {
  /* Something you can count on */
  height: 140px;
  white-space: nowrap;
}

th.rotate &gt; div {
  transform: 
    translate(20px, 51px) /* magic numbers */
    rotate(320deg);
  width: 30px;
}
th.rotate &gt; div &gt; span {
  padding: 5px 10px;
}

#data th:nth-child(even) &gt; div &gt; span, #data td:nth-child(even) {
  background-color: #eee;
}

&lt;/style&gt;

&lt;table id=&quot;data&quot;&gt;
&lt;thead&gt;
  &lt;tr&gt;
    &lt;th&gt;&lt;/th&gt;
    &lt;th class=&quot;rotate&quot;&gt;&lt;div&gt;&lt;span&gt;&lt;a href=&quot;https://git-scm.com/&quot;&gt;Git CLI&lt;/a&gt;&lt;/span&gt;&lt;/div&gt;&lt;/th&gt;
    &lt;th class=&quot;rotate&quot;&gt;&lt;div&gt;&lt;span&gt;&lt;a href=&quot;https://www.gitkraken.com/&quot;&gt;GitKraken&lt;/a&gt;&lt;/span&gt;&lt;/div&gt;&lt;/th&gt;
    &lt;th class=&quot;rotate&quot;&gt;&lt;div&gt;&lt;span&gt;&lt;a href=&quot;https://git-fork.com/&quot;&gt;Fork&lt;/a&gt;&lt;/span&gt;&lt;/div&gt;&lt;/th&gt;
    &lt;th class=&quot;rotate&quot;&gt;&lt;div&gt;&lt;span&gt;&lt;a href=&quot;https://www.sourcetreeapp.com/&quot;&gt;Sourcetree&lt;/a&gt;&lt;/span&gt;&lt;/div&gt;&lt;/th&gt;
    &lt;th class=&quot;rotate&quot;&gt;&lt;div&gt;&lt;span&gt;&lt;a href=&quot;https://www.sublimemerge.com/&quot;&gt;Sublime Merge&lt;/a&gt;&lt;/span&gt;&lt;/div&gt;&lt;/th&gt;
    &lt;th class=&quot;rotate&quot;&gt;&lt;div&gt;&lt;span&gt;&lt;a href=&quot;https://www.syntevo.com/smartgit/&quot;&gt;SmartGit&lt;/a&gt;&lt;/span&gt;&lt;/div&gt;&lt;/th&gt;
    &lt;th class=&quot;rotate&quot;&gt;&lt;div&gt;&lt;span&gt;&lt;a href=&quot;https://www.git-tower.com/&quot;&gt;Tower&lt;/a&gt;&lt;/span&gt;&lt;/div&gt;&lt;/th&gt;
    &lt;th class=&quot;rotate&quot;&gt;&lt;div&gt;&lt;span&gt;&lt;a href=&quot;https://gitup.co/&quot;&gt;GitUp&lt;/a&gt;&lt;/span&gt;&lt;/div&gt;&lt;/th&gt;
    &lt;th class=&quot;rotate&quot;&gt;&lt;div&gt;&lt;span&gt;&lt;a href=&quot;https://www.jetbrains.com/idea/&quot;&gt;IntelliJ&lt;/a&gt;&lt;/span&gt;&lt;/div&gt;&lt;/th&gt;
    &lt;th class=&quot;rotate&quot;&gt;&lt;div&gt;&lt;span&gt;&lt;a href=&quot;https://magit.vc/&quot;&gt;Magit&lt;/a&gt;&lt;/span&gt;&lt;/div&gt;&lt;/th&gt;
    &lt;th class=&quot;rotate&quot;&gt;&lt;div&gt;&lt;span&gt;&lt;a href=&quot;https://github.com/jesseduffield/lazygit&quot;&gt;Lazygit&lt;/a&gt;&lt;/span&gt;&lt;/div&gt;&lt;/th&gt;
    &lt;th class=&quot;rotate&quot;&gt;&lt;div&gt;&lt;span&gt;&lt;a href=&quot;https://github.com/extrawurst/gitui&quot;&gt;Gitui&lt;/a&gt;&lt;/span&gt;&lt;/div&gt;&lt;/th&gt;
    &lt;th class=&quot;rotate&quot;&gt;&lt;div&gt;&lt;span&gt;&lt;a href=&quot;https://github.com/arxanas/git-branchless&quot;&gt;git-branchless&lt;/a&gt;&lt;/span&gt;&lt;/div&gt;&lt;/th&gt;
    &lt;th class=&quot;rotate&quot;&gt;&lt;div&gt;&lt;span&gt;&lt;a href=&quot;https://github.com/martinvonz/jj&quot;&gt;Jujutsu&lt;/a&gt;&lt;/span&gt;&lt;/div&gt;&lt;/th&gt;
  &lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
  &lt;tr&gt;
    &lt;th&gt;&lt;code&gt;reword&lt;/code&gt;&lt;/th&gt;
    &lt;td&gt;❌&amp;nbsp;&lt;sup&gt;1&lt;/sup&gt;&lt;/td&gt; &lt;!-- Git CLI --&gt;
    &lt;td&gt;❌&lt;/td&gt; &lt;!-- GitKraken --&gt;
    &lt;td&gt;❌&lt;/td&gt; &lt;!-- Fork --&gt;
    &lt;td&gt;❌&lt;/td&gt; &lt;!-- Sourcetree --&gt;
    &lt;td&gt;⚠️&amp;nbsp;&lt;sup&gt;2&lt;/sup&gt;&lt;/td&gt; &lt;!-- Sublime Merge --&gt;
    &lt;td&gt;❌&lt;/td&gt; &lt;!-- SmartGit --&gt;
    &lt;td&gt;⚠️&amp;nbsp;&lt;sup&gt;2&lt;/sup&gt;&lt;/td&gt; &lt;!-- Tower --&gt;
    &lt;td&gt;✅&lt;/td&gt; &lt;!-- GitUp --&gt;
    &lt;td&gt;⚠️&amp;nbsp;&lt;sup&gt;2&lt;/sup&gt;&lt;/td&gt; &lt;!-- IntelliJ --&gt;
    &lt;td&gt;❌&lt;/td&gt; &lt;!-- Magit --&gt;
    &lt;td&gt;❌&lt;/td&gt; &lt;!-- Lazygit --&gt;
    &lt;td&gt;❌&lt;/td&gt; &lt;!-- Gitui --&gt;
    &lt;td&gt;✅&lt;/td&gt; &lt;!-- git-branchless --&gt;
    &lt;td&gt;✅&lt;/td&gt; &lt;!-- jj --&gt;
  &lt;/tr&gt;
  
  &lt;tr&gt;
    &lt;th&gt;&lt;code&gt;sync&lt;/code&gt;&lt;/th&gt;
    &lt;td&gt;❌&lt;/td&gt; &lt;!-- Git CLI --&gt;
    &lt;td&gt;❌&lt;/td&gt; &lt;!-- GitKraken --&gt;
    &lt;td&gt;❌&lt;/td&gt; &lt;!-- Fork --&gt;
    &lt;td&gt;❌&lt;/td&gt; &lt;!-- Sourcetree --&gt;
    &lt;td&gt;❌&lt;/td&gt; &lt;!-- Sublime Merge --&gt;
    &lt;td&gt;❌&lt;/td&gt; &lt;!-- SmartGit --&gt;
    &lt;td&gt;❌&lt;/td&gt; &lt;!-- Tower --&gt;
    &lt;td&gt;❌&lt;/td&gt; &lt;!-- GitUp --&gt;
    &lt;td&gt;❌&lt;/td&gt; &lt;!-- IntelliJ --&gt;
    &lt;td&gt;❌&lt;/td&gt; &lt;!-- Magit --&gt;
    &lt;td&gt;❌&lt;/td&gt; &lt;!-- Lazygit --&gt;
    &lt;td&gt;❌&lt;/td&gt; &lt;!-- Gitui --&gt;
    &lt;td&gt;✅&lt;/td&gt; &lt;!-- git-branchless --&gt;
    &lt;td&gt;❌&lt;/td&gt; &lt;!-- jj --&gt;
  &lt;/tr&gt;
  
  &lt;tr&gt;
    &lt;th&gt;&lt;code&gt;split&lt;/code&gt;&lt;/th&gt;
    &lt;td&gt;❌&amp;nbsp;&lt;sup&gt;1&lt;/sup&gt;&lt;/td&gt; &lt;!-- Git CLI --&gt;
    &lt;td&gt;❌&lt;/td&gt; &lt;!-- GitKraken --&gt;
    &lt;td&gt;❌&lt;/td&gt; &lt;!-- Fork --&gt;
    &lt;td&gt;❌&lt;/td&gt; &lt;!-- Sourcetree --&gt;
    &lt;td&gt;❌&lt;/td&gt; &lt;!-- Sublime Merge --&gt;
    &lt;td&gt;❌&lt;/td&gt; &lt;!-- SmartGit --&gt;
    &lt;td&gt;❌&lt;/td&gt; &lt;!-- Tower --&gt;
    &lt;td&gt;✅&lt;/td&gt; &lt;!-- GitUp --&gt;
    &lt;td&gt;❌&lt;/td&gt; &lt;!-- IntelliJ --&gt;
    &lt;td&gt;❌&lt;/td&gt; &lt;!-- Magit --&gt;
    &lt;td&gt;❌&lt;/td&gt; &lt;!-- Lazygit --&gt;
    &lt;td&gt;❌&lt;/td&gt; &lt;!-- Gitui --&gt;
    &lt;td&gt;❌&lt;/td&gt; &lt;!-- git-branchless --&gt;
    &lt;td&gt;✅&lt;/td&gt; &lt;!-- jj --&gt;
  &lt;/tr&gt;
  
  &lt;tr&gt;
    &lt;th&gt;&lt;code&gt;preview&lt;/code&gt;&lt;/th&gt;
    &lt;td&gt;❌&lt;/td&gt; &lt;!-- Git CLI --&gt;
    &lt;td&gt;❌&lt;/td&gt; &lt;!-- GitKraken --&gt;
    &lt;td&gt;⚠️&amp;nbsp;&lt;sup&gt;3&lt;/sup&gt;&lt;/td&gt; &lt;!-- Fork --&gt;
    &lt;td&gt;❌&lt;/td&gt; &lt;!-- Sourcetree --&gt;
    &lt;td&gt;⚠️&amp;nbsp;&lt;sup&gt;3&lt;/sup&gt;&lt;/td&gt; &lt;!-- Sublime Merge --&gt;
    &lt;td&gt;❌&lt;/td&gt; &lt;!-- SmartGit --&gt;
    &lt;td&gt;⚠️&amp;nbsp;&lt;sup&gt;3&lt;/sup&gt;&lt;/td&gt; &lt;!-- Tower --&gt;
    &lt;td&gt;❌&lt;/td&gt; &lt;!-- GitUp --&gt;
    &lt;td&gt;❌&lt;/td&gt; &lt;!-- IntelliJ --&gt;
    &lt;td&gt;✅&amp;nbsp;&lt;sup&gt;4&lt;/sup&gt;&lt;/td&gt; &lt;!-- Magit --&gt;
    &lt;td&gt;❌&lt;/td&gt; &lt;!-- Lazygit --&gt;
    &lt;td&gt;❌&lt;/td&gt; &lt;!-- Gitui --&gt;
    &lt;td&gt;⚠️&amp;nbsp;&lt;sup&gt;5&lt;/sup&gt;&lt;/td&gt; &lt;!-- git-branchless --&gt;
    &lt;td&gt;✅&amp;nbsp;&lt;sup&gt;6&lt;/sup&gt;&lt;/td&gt; &lt;!-- jj --&gt;
  &lt;/tr&gt;

  &lt;tr&gt;
    &lt;th&gt;&lt;code&gt;undo&lt;/code&gt;&lt;/th&gt;
    &lt;td&gt;❌&lt;/td&gt; &lt;!-- Git CLI --&gt;
    &lt;td&gt;✅&lt;/td&gt; &lt;!-- GitKraken --&gt;
    &lt;td&gt;❓&lt;/td&gt; &lt;!-- Fork --&gt;
    &lt;td&gt;✅&lt;/td&gt; &lt;!-- Sourcetree --&gt;
    &lt;td&gt;✅&lt;/td&gt; &lt;!-- Sublime Merge --&gt;
    &lt;td&gt;❌&lt;/td&gt; &lt;!-- SmartGit --&gt;
    &lt;td&gt;✅&lt;/td&gt; &lt;!-- Tower --&gt;
    &lt;td&gt;✅&lt;/td&gt; &lt;!-- GitUp --&gt;
    &lt;td&gt;❌&lt;/td&gt; &lt;!-- IntelliJ --&gt;
    &lt;td&gt;❌&lt;/td&gt; &lt;!-- Magit --&gt;
    &lt;td&gt;⚠️&amp;nbsp;&lt;sup&gt;7&lt;/sup&gt;&lt;/td&gt; &lt;!-- Lazygit --&gt;
    &lt;td&gt;❌&lt;/td&gt; &lt;!-- Gitui --&gt;
    &lt;td&gt;✅&lt;/td&gt; &lt;!-- git-branchless --&gt;
    &lt;td&gt;✅&lt;/td&gt; &lt;!-- jj --&gt;
  &lt;/tr&gt;

  &lt;tr&gt;
    &lt;th&gt;&lt;code&gt;large-load&lt;/code&gt;&lt;/th&gt;
    &lt;td&gt;✅&amp;nbsp;&lt;sup&gt;8&lt;/sup&gt;&lt;/td&gt; &lt;!-- Git CLI --&gt;
    &lt;td&gt;❌&lt;/td&gt; &lt;!-- GitKraken --&gt;
    &lt;td&gt;❌&lt;/td&gt; &lt;!-- Fork --&gt;
    &lt;td&gt;❌&lt;/td&gt; &lt;!-- Sourcetree --&gt;
    &lt;td&gt;✅&lt;/td&gt; &lt;!-- Sublime Merge --&gt;
    &lt;td&gt;❌&lt;/td&gt; &lt;!-- SmartGit --&gt;
    &lt;td&gt;❌&lt;/td&gt; &lt;!-- Tower --&gt;
    &lt;td&gt;❌&lt;/td&gt; &lt;!-- GitUp --&gt;
    &lt;td&gt;✅&lt;/td&gt; &lt;!-- IntelliJ --&gt;
    &lt;td&gt;✅&amp;nbsp;&lt;sup&gt;9&lt;/sup&gt;&lt;/td&gt; &lt;!-- Magit --&gt;
    &lt;td&gt;✅&lt;/td&gt; &lt;!-- Lazygit --&gt;
    &lt;td&gt;✅&lt;/td&gt; &lt;!-- Gitui --&gt;
    &lt;td&gt;✅&lt;/td&gt; &lt;!-- git-branchless --&gt;
    &lt;td&gt;❌&lt;/td&gt; &lt;!-- jj --&gt;
  &lt;/tr&gt;
  
  &lt;tr&gt;
    &lt;th&gt;&lt;code&gt;large-ops&lt;/code&gt;&lt;/th&gt;
    &lt;td&gt;✅&amp;nbsp;&lt;sup&gt;8&lt;/sup&gt;&lt;/td&gt; &lt;!-- Git CLI --&gt;
    &lt;td&gt;❌&lt;/td&gt; &lt;!-- GitKraken --&gt;
    &lt;td&gt;❌&lt;/td&gt; &lt;!-- Fork --&gt;
    &lt;td&gt;✅&lt;/td&gt; &lt;!-- Sourcetree --&gt;
    &lt;td&gt;✅&lt;/td&gt; &lt;!-- Sublime Merge --&gt;
    &lt;td&gt;❌&lt;/td&gt; &lt;!-- SmartGit --&gt;
    &lt;td&gt;❌&lt;/td&gt; &lt;!-- Tower --&gt;
    &lt;td&gt;✅&lt;/td&gt; &lt;!-- GitUp --&gt;
    &lt;td&gt;✅&lt;/td&gt; &lt;!-- IntelliJ --&gt;
    &lt;td&gt;✅&amp;nbsp;&lt;sup&gt;9&lt;/sup&gt;&lt;/td&gt; &lt;!-- Magit --&gt;
    &lt;td&gt;✅&lt;/td&gt; &lt;!-- Lazygit --&gt;
    &lt;td&gt;✅&lt;/td&gt; &lt;!-- Gitui --&gt;
    &lt;td&gt;✅&lt;/td&gt; &lt;!-- git-branchless --&gt;
    &lt;td&gt;❌&lt;/td&gt; &lt;!-- jj --&gt;
  &lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;Notes:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;sup&gt;1&lt;/sup&gt; It can be done via &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;git rebase -i&lt;/code&gt; or equivalent, but it’s not ergonomic, and it only works for commits reachable from &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;HEAD&lt;/code&gt; instead of from other branches.&lt;/li&gt;
  &lt;li&gt;&lt;sup&gt;2&lt;/sup&gt; Rewording can be done without checking out the commit, but only for commits reachable from &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;HEAD&lt;/code&gt;. There may be additional limitations.&lt;/li&gt;
  &lt;li&gt;&lt;sup&gt;3&lt;/sup&gt; Partial support; it can show whether the merge is fast-forward or not, but no additional details.&lt;/li&gt;
  &lt;li&gt;&lt;sup&gt;4&lt;/sup&gt; Can be done via &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;magit-merge-preview&lt;/code&gt;.&lt;/li&gt;
  &lt;li&gt;&lt;sup&gt;5&lt;/sup&gt; Partial support; if an operation would cause a merge conflict and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;--merge&lt;/code&gt; wasn’t passed, then instead aborts and shows the number of files that would conflict.&lt;/li&gt;
  &lt;li&gt;&lt;sup&gt;6&lt;/sup&gt; Jujutsu doesn’t let you preview merge conflicts &lt;em&gt;per se&lt;/em&gt;, but merges and rebases always succeed and the conflicts are stored in the commit, and then you can undo the operation if you don’t want to deal with the merge conflicts. You can even restore the old version of the commit well after you carried out the merge/rebase, if desired. This avoids interrupting your workflow, which is the ultimate goal of this feature, so I’m scoring it as a pass for this category.&lt;/li&gt;
  &lt;li&gt;&lt;sup&gt;7&lt;/sup&gt; Undo support is experimental and based on the reflog, &lt;a href=&quot;https://github.com/arxanas/git-branchless/wiki/Architecture#comparison-with-the-reflog&quot;&gt;which can’t undo all types of operations&lt;/a&gt;.&lt;/li&gt;
  &lt;li&gt;&lt;sup&gt;8&lt;/sup&gt; Git struggles with some operations on large repositories and can be improved upon, but we’ll consider this to be the baseline performance for large repositories.&lt;/li&gt;
  &lt;li&gt;&lt;sup&gt;9&lt;/sup&gt; Presumably Magit has the same performance as Git, but I didn’t check because I don’t use Emacs.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;awards&quot;&gt;Awards&lt;/h2&gt;

&lt;p&gt;Commendations:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;GitUp: the most innovative Git GUI of the above.&lt;/li&gt;
  &lt;li&gt;GitKraken: innovating in some spaces, such as improved support for centralized workflows by warning about concurrently-edited files. These areas aren’t reflected above; I just noticed them on other occasions.&lt;/li&gt;
  &lt;li&gt;Sublime Merge: incredibly responsive, as to be expected from the folks responsible for &lt;a href=&quot;https://www.sublimetext.com/&quot;&gt;Sublime Text&lt;/a&gt;.&lt;/li&gt;
  &lt;li&gt;Tower: for having a pleasing undo implementation.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Demerits:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Fork: for making it really hard to search for documentation (“git fork undo” mostly produces results for undoing forking in general, not for the Fork client).&lt;/li&gt;
  &lt;li&gt;SmartGit: for being deficient in every category tested.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;related-posts&quot;&gt;Related posts&lt;/h2&gt;

&lt;p&gt;The following are hand-curated posts which you might find interesting.&lt;/p&gt;

&lt;table class=&quot;related-posts&quot;&gt;
&lt;thead&gt;
  &lt;tr&gt;
    &lt;th&gt;Date&lt;/th&gt;
    &lt;th&gt;&lt;/th&gt;
    &lt;th&gt;Title&lt;/th&gt;
  &lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;

  &lt;tr&gt;
    &lt;td&gt;19&amp;nbsp;Jun&amp;nbsp;2021&lt;/td&gt;
    &lt;td class=&quot;this-post&quot;&gt;
      
      &lt;/td&gt;
    &lt;td&gt;&lt;a href=&quot;/git-undo/&quot;&gt;git undo: We can do better&lt;/a&gt;
    &lt;/td&gt;
  &lt;/tr&gt;

  &lt;tr&gt;
    &lt;td&gt;12&amp;nbsp;Oct&amp;nbsp;2021&lt;/td&gt;
    &lt;td class=&quot;this-post&quot;&gt;
      
      &lt;/td&gt;
    &lt;td&gt;&lt;a href=&quot;/in-memory-rebases/&quot;&gt;Lightning-fast rebases with git-move&lt;/a&gt;
    &lt;/td&gt;
  &lt;/tr&gt;

  &lt;tr&gt;
    &lt;td&gt;19&amp;nbsp;Oct&amp;nbsp;2022&lt;/td&gt;
    &lt;td class=&quot;this-post&quot;&gt;
      
      &lt;/td&gt;
    &lt;td&gt;&lt;a href=&quot;/build-aware-sparse-checkouts/&quot;&gt;Build-aware sparse checkouts&lt;/a&gt;
    &lt;/td&gt;
  &lt;/tr&gt;

  &lt;tr&gt;
    &lt;td&gt;16&amp;nbsp;Nov&amp;nbsp;2022&lt;/td&gt;
    &lt;td class=&quot;this-post&quot;&gt;
      
      &lt;/td&gt;
    &lt;td&gt;&lt;a href=&quot;/bringing-revsets-to-git/&quot;&gt;Bringing revsets to Git&lt;/a&gt;
    &lt;/td&gt;
  &lt;/tr&gt;

  &lt;tr&gt;
    &lt;td&gt;05&amp;nbsp;Jan&amp;nbsp;2023&lt;/td&gt;
    &lt;td class=&quot;this-post&quot;&gt;
      
      (this&amp;nbsp;post)
      
      &lt;/td&gt;
    &lt;td&gt;&lt;a href=&quot;/git-ui-features/&quot;&gt;Where are my Git UI features from the future?&lt;/a&gt;
    &lt;/td&gt;
  &lt;/tr&gt;

&lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;Want to see more of my posts? Follow me &lt;a href=&quot;https://twitter.com/arxanas&quot;&gt;on Twitter&lt;/a&gt; or subscribe &lt;a href=&quot;/feed.xml&quot;&gt;via RSS&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&quot;comments&quot;&gt;Comments&lt;/h2&gt;

&lt;ul&gt;

&lt;li&gt;&lt;a class=&quot;icon-hacker-news&quot; href=&quot;https://news.ycombinator.com/item?id=34301543 &quot;&gt;Discussion on Hacker News&lt;/a&gt;&lt;/li&gt;


&lt;li&gt;&lt;a class=&quot;icon-lobsters&quot; href=&quot;https://lobste.rs/s/7tnnbq/where_are_my_git_ui_features_from_future &quot;&gt;Discussion on Lobsters&lt;/a&gt;&lt;/li&gt;


&lt;/ul&gt;

&lt;script type=&quot;text/javascript&quot; src=&quot;/scripts/github-comment-links.js&quot;&gt;&lt;/script&gt;

&lt;div id=&quot;disqus_thread&quot;&gt;&lt;/div&gt;
&lt;script&gt;

/**
 *  RECOMMENDED CONFIGURATION VARIABLES: EDIT AND UNCOMMENT THE SECTION BELOW TO INSERT DYNAMIC VALUES FROM YOUR PLATFORM OR CMS.
 *  LEARN WHY DEFINING THESE VARIABLES IS IMPORTANT: https://disqus.com/admin/universalcode/#configuration-variables */
var disqus_config = function () {
    this.page.url = &quot;https://blog.waleedkhan.name/git-ui-features/&quot;;
    this.page.identifier = &quot;git-ui-features/&quot;;
};

(function() { // DON&apos;T EDIT BELOW THIS LINE
    var d = document, s = d.createElement(&apos;script&apos;);
    s.src = &apos;//waleedkhan-name.disqus.com/embed.js&apos;;
    s.setAttribute(&apos;data-timestamp&apos;, +new Date());
    (d.head || d.body).appendChild(s);
})();
&lt;/script&gt;

&lt;noscript&gt;Please enable JavaScript to view the &lt;a href=&quot;https://disqus.com/?ref_noscript&quot;&gt;comments powered by Disqus.&lt;/a&gt;&lt;/noscript&gt;

</description>
        <pubDate>Thu, 05 Jan 2023 00:00:00 -0600</pubDate>
        <link>https://blog.waleedkhan.name/git-ui-features/</link>
        <guid isPermaLink="true">https://blog.waleedkhan.name/git-ui-features/</guid>
        
        <category>git</category>
        
        <category>rant</category>
        
        <category>software-engineering</category>
        
        
      </item>
    
      <item>
        <title>On bullet points</title>
        <description>&lt;p&gt;In 1972&lt;sup id=&quot;fnref:1&quot; role=&quot;doc-noteref&quot;&gt;&lt;a href=&quot;#fn:1&quot; class=&quot;footnote&quot; rel=&quot;footnote&quot;&gt;1&lt;/a&gt;&lt;/sup&gt;, the first “computer” was created. This has made a lot of people very angry and been widely regarded as a bad move.&lt;/p&gt;

&lt;p&gt;One of the original uses for “computers” was to write documents. They promised us a novel way to read and write documents: &lt;a href=&quot;https://en.wikipedia.org/wiki/Hypermedia&quot;&gt;&lt;em&gt;hypermedia&lt;/em&gt;&lt;/a&gt;. A brilliant, “nonlinear” presentation of information. We could write documents more like a &lt;em&gt;conversation&lt;/em&gt;. We could embed references to other media, or take tangents and then return to the main topic, but only if the reader &lt;em&gt;wanted&lt;/em&gt; to.&lt;/p&gt;

&lt;p&gt;And then every article written on the Internet since then has been in a linear, &lt;em&gt;boring&lt;/em&gt; fashion.&lt;/p&gt;

&lt;p&gt;We’ve been had.&lt;/p&gt;

&lt;p&gt;I have several “notes” documents in &lt;a href=&quot;https://docs.google.com&quot;&gt;Google Docs&lt;/a&gt; with ideas for writings that I haven’t fleshed out into proper blog posts. Recently, I took one and
asked &lt;a href=&quot;https://chat.openai.com/&quot;&gt;ChatGPT&lt;/a&gt; to make an article out of it. And it did! It successfully inserted enough transition words into the article to resemble a linear, &lt;em&gt;boring&lt;/em&gt; article.&lt;/p&gt;

&lt;p&gt;Then I realized that the reader then has to ingest all of those useful words and transform them back into bullet points of takeaways in their heads. Hell, maybe you’ll feed &lt;em&gt;this&lt;/em&gt; article into a auto-summarization bot and get a list of succinct bullet points out of it.&lt;/p&gt;

&lt;p&gt;How incredible! With the power of AI, we’ve come full circle: I can write bullet points, a bot can turn it into an article, then another bot can turn them back into bullet points, and you can quickly skim the bullet points. What a time to be alive.&lt;/p&gt;

&lt;p&gt;I’m just going to publish the bullet points directly. And you know what bullet points can do? Represent information &lt;em&gt;succinctly&lt;/em&gt; and &lt;em&gt;non-linearly&lt;/em&gt;:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;You can skip all those transition words.
    &lt;ul&gt;&lt;li&gt;Especially the
    &lt;span style=&quot;display: inline-block; height: 2em&quot;&gt;&lt;u style=&quot;font-family: &apos;Comic Sans MS&apos;, &apos;Comic Sans&apos;, sans-serif;&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;fluffy&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/u&gt;&lt;br /&gt;&lt;span aria-label=&quot;&quot; style=&quot;margin-top: -0.5em; margin-left: 0.75em; font-variant: small-caps; font-size: smaller; position: absolute&quot;&gt;adjective&lt;/span&gt;&lt;/span&gt;
    &lt;span style=&quot;display: inline-block; width: auto; height: 2em&quot;&gt;&lt;u style=&quot;font-family: &apos;Comic Sans MS&apos;, &apos;Comic Sans&apos;, sans-serif;&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;redundant&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/u&gt;&lt;br /&gt;&lt;span aria-label=&quot;&quot; style=&quot;margin-top: -0.5em; margin-left: 2em; font-variant: small-caps; font-size: smaller; position: absolute&quot;&gt;adjective&lt;/span&gt;&lt;/span&gt;
    ones, which I can delegate to sub-points, if desired.&lt;/li&gt;&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;You can skip over sub-points for topics you don&apos;t care about.
    &lt;ul&gt;&lt;li&gt;Like if I waste your time with this sub-point!&lt;/li&gt;&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;You can construct a concept map directly in your head by absorbing the bullet point structure.
    &lt;table style=&quot;margin-top: 1em; text-align: center&quot;&gt;
    &lt;thead&gt;
    &lt;tr&gt;&lt;th&gt;Before&lt;/th&gt;&lt;th&gt;&lt;/th&gt;&lt;th&gt;After&lt;/th&gt;&lt;/tr&gt;
    &lt;/thead&gt;
    &lt;tbody style=&quot;padding: 0&quot;&gt;
    &lt;tr&gt;
    &lt;td style=&quot;padding-top: 0&quot;&gt;You&apos;d have to reconstruct it from a block of text.&lt;/td&gt;
    &lt;td style=&quot;padding-top: 0; font-size: 300%; padding-left: 1em; padding-right: 1em&quot;&gt;⇨&lt;/td&gt;
    &lt;td style=&quot;padding-top: 0&quot;&gt;I can guide you along my argumentation using the literal structure of the text on the page.&lt;/td&gt;
    &lt;/tr&gt;
    &lt;/tbody&gt;
    &lt;/table&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;I’ll reserve long-form, &lt;em&gt;boring&lt;/em&gt; articles for &lt;em&gt;stories&lt;/em&gt; and &lt;em&gt;rants&lt;/em&gt; where I don’t &lt;em&gt;want&lt;/em&gt; you to consume the information efficiently. Where I’ll &lt;a href=&quot;https://tvtropes.org/pmwiki/pmwiki.php/Main/BoldInflation&quot;&gt;insert lots of &lt;em&gt;italics&lt;/em&gt;&lt;/a&gt; so that you have to read it with my tone of &lt;em&gt;cynicism&lt;/em&gt;!&lt;/p&gt;

&lt;h2 id=&quot;comments&quot;&gt;Comments&lt;/h2&gt;

&lt;ul&gt;



&lt;/ul&gt;

&lt;script type=&quot;text/javascript&quot; src=&quot;/scripts/github-comment-links.js&quot;&gt;&lt;/script&gt;

&lt;div id=&quot;disqus_thread&quot;&gt;&lt;/div&gt;
&lt;script&gt;

/**
 *  RECOMMENDED CONFIGURATION VARIABLES: EDIT AND UNCOMMENT THE SECTION BELOW TO INSERT DYNAMIC VALUES FROM YOUR PLATFORM OR CMS.
 *  LEARN WHY DEFINING THESE VARIABLES IS IMPORTANT: https://disqus.com/admin/universalcode/#configuration-variables */
var disqus_config = function () {
    this.page.url = &quot;https://blog.waleedkhan.name/on-bullet-points/&quot;;
    this.page.identifier = &quot;on-bullet-points/&quot;;
};

(function() { // DON&apos;T EDIT BELOW THIS LINE
    var d = document, s = d.createElement(&apos;script&apos;);
    s.src = &apos;//waleedkhan-name.disqus.com/embed.js&apos;;
    s.setAttribute(&apos;data-timestamp&apos;, +new Date());
    (d.head || d.body).appendChild(s);
})();
&lt;/script&gt;

&lt;noscript&gt;Please enable JavaScript to view the &lt;a href=&quot;https://disqus.com/?ref_noscript&quot;&gt;comments powered by Disqus.&lt;/a&gt;&lt;/noscript&gt;

&lt;div class=&quot;footnotes&quot; role=&quot;doc-endnotes&quot;&gt;
  &lt;ol&gt;
    &lt;li id=&quot;fn:1&quot; role=&quot;doc-endnote&quot;&gt;
      &lt;p&gt;For more information, refer to &lt;a href=&quot;https://james-iry.blogspot.com/2009/05/brief-incomplete-and-mostly-wrong.html&quot;&gt;&lt;em&gt;A Brief, Incomplete, and Mostly Wrong History of Programming Languages&lt;/em&gt;&lt;/a&gt; for the history of the C programming language, for which the first computer was originally created, despite its lack of tail call recursion and concurrency support. &lt;a href=&quot;#fnref:1&quot; class=&quot;reversefootnote&quot; role=&quot;doc-backlink&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
  &lt;/ol&gt;
&lt;/div&gt;
</description>
        <pubDate>Mon, 02 Jan 2023 00:00:00 -0600</pubDate>
        <link>https://blog.waleedkhan.name/on-bullet-points/</link>
        <guid isPermaLink="true">https://blog.waleedkhan.name/on-bullet-points/</guid>
        
        <category>rant</category>
        
        <category>writing</category>
        
        
      </item>
    
      <item>
        <title>Update #1: Playing Elden Ring in the cloud</title>
        <description>&lt;p&gt;In &lt;a href=&quot;/playing-elden-ring-in-the-cloud/&quot;&gt;&lt;em&gt;Playing Elden Ring in the cloud&lt;/em&gt;&lt;/a&gt;, I went through a lot of trouble setting up a cloud PC gaming server. Since then, I bought a &lt;a href=&quot;https://store.steampowered.com/steamdeck&quot;&gt;Steam Deck&lt;/a&gt;. Overall, I’ve been enjoying this solution a lot more. It works offline (on the plane) and for latency-sensitive games.&lt;/p&gt;

&lt;p&gt;It’s also substantially easier for my wife to pick up and start playing something, compared to launching an entire cloud PC and connecting via Steam Remote Play. And there’s something to be said for playing on the couch next to my loved ones, rather than in our &lt;del&gt;dungeon&lt;/del&gt; home office.&lt;/p&gt;

&lt;p&gt;Additionally, I recently beat the final boss in &lt;a href=&quot;https://enterthegungeon.com/&quot;&gt;&lt;em&gt;Enter the Gungeon&lt;/em&gt;&lt;/a&gt; after much longer than I expected given my general skill level: ~90 (!) hours via cloud PC followed by ~10 hours via Steam Deck. Being a “bullet hell” game, it’s much more latency-sensitive than games in other genres, so I wonder if the additional latency of the cloud PC was hindering my performance. Alternatively, maybe I just got good.&lt;/p&gt;

&lt;h2 id=&quot;related-posts&quot;&gt;Related posts&lt;/h2&gt;

&lt;p&gt;The following are hand-curated posts which you might find interesting.&lt;/p&gt;

&lt;table class=&quot;related-posts&quot;&gt;
&lt;thead&gt;
  &lt;tr&gt;
    &lt;th&gt;Date&lt;/th&gt;
    &lt;th&gt;&lt;/th&gt;
    &lt;th&gt;Title&lt;/th&gt;
  &lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;

  &lt;tr&gt;
    &lt;td&gt;30&amp;nbsp;Jul&amp;nbsp;2020&lt;/td&gt;
    &lt;td class=&quot;this-post&quot;&gt;
      
      &lt;/td&gt;
    &lt;td&gt;&lt;a href=&quot;/lan-adapter/&quot;&gt;A LAN adapter isn&apos;t everything&lt;/a&gt;
    &lt;/td&gt;
  &lt;/tr&gt;

  &lt;tr&gt;
    &lt;td&gt;10&amp;nbsp;Mar&amp;nbsp;2021&lt;/td&gt;
    &lt;td class=&quot;this-post&quot;&gt;
      
      &lt;/td&gt;
    &lt;td&gt;&lt;a href=&quot;/pro-controller-stick-drift/&quot;&gt;On Pro Controller stick drift&lt;/a&gt;
    &lt;/td&gt;
  &lt;/tr&gt;

  &lt;tr&gt;
    &lt;td&gt;04&amp;nbsp;Nov&amp;nbsp;2022&lt;/td&gt;
    &lt;td class=&quot;this-post&quot;&gt;
      
      &lt;/td&gt;
    &lt;td&gt;&lt;a href=&quot;/playing-elden-ring-in-the-cloud/&quot;&gt;Playing Elden Ring in the cloud&lt;/a&gt;
    &lt;/td&gt;
  &lt;/tr&gt;

  &lt;tr&gt;
    &lt;td&gt;01&amp;nbsp;Jan&amp;nbsp;2023&lt;/td&gt;
    &lt;td class=&quot;this-post&quot;&gt;
      
      (this&amp;nbsp;post)
      
      &lt;/td&gt;
    &lt;td&gt;&lt;a href=&quot;/playing-elden-ring-in-the-cloud-update-1/&quot;&gt;Update #1: Playing Elden Ring in the cloud&lt;/a&gt;
    &lt;/td&gt;
  &lt;/tr&gt;

&lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;Want to see more of my posts? Follow me &lt;a href=&quot;https://twitter.com/arxanas&quot;&gt;on Twitter&lt;/a&gt; or subscribe &lt;a href=&quot;/feed.xml&quot;&gt;via RSS&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&quot;comments&quot;&gt;Comments&lt;/h2&gt;

&lt;ul&gt;



&lt;/ul&gt;

&lt;script type=&quot;text/javascript&quot; src=&quot;/scripts/github-comment-links.js&quot;&gt;&lt;/script&gt;

&lt;div id=&quot;disqus_thread&quot;&gt;&lt;/div&gt;
&lt;script&gt;

/**
 *  RECOMMENDED CONFIGURATION VARIABLES: EDIT AND UNCOMMENT THE SECTION BELOW TO INSERT DYNAMIC VALUES FROM YOUR PLATFORM OR CMS.
 *  LEARN WHY DEFINING THESE VARIABLES IS IMPORTANT: https://disqus.com/admin/universalcode/#configuration-variables */
var disqus_config = function () {
    this.page.url = &quot;https://blog.waleedkhan.name/playing-elden-ring-in-the-cloud-update-1/&quot;;
    this.page.identifier = &quot;playing-elden-ring-in-the-cloud-update-1/&quot;;
};

(function() { // DON&apos;T EDIT BELOW THIS LINE
    var d = document, s = d.createElement(&apos;script&apos;);
    s.src = &apos;//waleedkhan-name.disqus.com/embed.js&apos;;
    s.setAttribute(&apos;data-timestamp&apos;, +new Date());
    (d.head || d.body).appendChild(s);
})();
&lt;/script&gt;

&lt;noscript&gt;Please enable JavaScript to view the &lt;a href=&quot;https://disqus.com/?ref_noscript&quot;&gt;comments powered by Disqus.&lt;/a&gt;&lt;/noscript&gt;

</description>
        <pubDate>Sun, 01 Jan 2023 00:00:00 -0600</pubDate>
        <link>https://blog.waleedkhan.name/playing-elden-ring-in-the-cloud-update-1/</link>
        <guid isPermaLink="true">https://blog.waleedkhan.name/playing-elden-ring-in-the-cloud-update-1/</guid>
        
        <category>gaming</category>
        
        
      </item>
    
      <item>
        <title>Bringing revsets to Git</title>
        <description>&lt;p&gt;&lt;a href=&quot;https://www.mercurial-scm.org/repo/hg/help/revsets&quot;&gt;Revsets are a declarative language from the Mercurial version control system&lt;/a&gt;. Most commands in Mercurial that accept a commit can instead accept a revset expression to specify one or more commits meeting certain criteria. The &lt;a href=&quot;https://github.com/arxanas/git-branchless&quot;&gt;git-branchless&lt;/a&gt; suite of tools introduces its own revset language which can be used with Git.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Intended audience: intermediate to advanced Git users; developers of version control.&lt;/em&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;ul id=&quot;markdown-toc&quot;&gt;
  &lt;li&gt;&lt;a href=&quot;#try-it-out&quot; id=&quot;markdown-toc-try-it-out&quot;&gt;Try it out&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#existing-git-syntax&quot; id=&quot;markdown-toc-existing-git-syntax&quot;&gt;Existing Git syntax&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#better-scripting&quot; id=&quot;markdown-toc-better-scripting&quot;&gt;Better scripting&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#better-graph-view&quot; id=&quot;markdown-toc-better-graph-view&quot;&gt;Better graph view&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#better-rebasing&quot; id=&quot;markdown-toc-better-rebasing&quot;&gt;Better rebasing&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#better-testing&quot; id=&quot;markdown-toc-better-testing&quot;&gt;Better testing&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#prior-work&quot; id=&quot;markdown-toc-prior-work&quot;&gt;Prior work&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#related-posts&quot; id=&quot;markdown-toc-related-posts&quot;&gt;Related posts&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#comments&quot; id=&quot;markdown-toc-comments&quot;&gt;Comments&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;try-it-out&quot;&gt;Try it out&lt;/h2&gt;

&lt;p&gt;To try out revsets, &lt;a href=&quot;https://github.com/arxanas/git-branchless#installation&quot;&gt;install git-branchless&lt;/a&gt;, or see &lt;a href=&quot;#prior-work&quot;&gt;Prior work&lt;/a&gt; for alternatives.&lt;/p&gt;

&lt;aside class=&quot;aside&quot; id=&quot;sapling-scm&quot;&gt;
          &lt;header class=&quot;aside-header&quot;&gt;&lt;a href=&quot;#sapling-scm&quot;&gt;Sapling SCM&lt;/a&gt;&lt;/header&gt;
          &lt;div class=&quot;aside-contents&quot;&gt;&lt;p&gt;While this post was still in draft, &lt;a href=&quot;https://sapling-scm.com/&quot;&gt;Sapling SCM&lt;/a&gt; was announced, which git-branchless is descended from in spirit. It’s discussed in Prior work as well.&lt;/p&gt;
&lt;/div&gt;
        &lt;/aside&gt;

&lt;h2 id=&quot;existing-git-syntax&quot;&gt;Existing Git syntax&lt;/h2&gt;

&lt;p&gt;Git already supports its own revision specification language (see &lt;a href=&quot;https://git-scm.com/docs/gitrevisions&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;gitrevisions(7)&lt;/code&gt;&lt;/a&gt;). You may have already written e.g. &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;HEAD~&lt;/code&gt; to mean the immediate parent of &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;HEAD&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;However, Git’s revision specification language doesn’t integrate well with the rest of Git. You can write &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;git log foo..bar&lt;/code&gt; to list the commits between &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;foo&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;bar&lt;/code&gt;, but you can’t write &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;git rebase foo..bar&lt;/code&gt; to rebase that same range of commits.&lt;/p&gt;

&lt;p&gt;It can also be difficult to express certain sets of commits:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;You can only express contiguous ranges of the commits, not arbitrary sets.&lt;/li&gt;
  &lt;li&gt;You can’t directly query for the children of a given commit.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;git-branchless introduces a revset language which can be used directly via its &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;git query&lt;/code&gt; or with its other commands, such as &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;git smartlog&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;git move&lt;/code&gt;, and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;git test&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;The rest of this article shows a few things you can do with revsets. You can also read the &lt;a href=&quot;https://github.com/arxanas/git-branchless/discussions/496&quot;&gt;Revset recipes&lt;/a&gt; thread on the git-branchless discussion board.&lt;/p&gt;

&lt;h2 id=&quot;better-scripting&quot;&gt;Better scripting&lt;/h2&gt;

&lt;p&gt;Revsets can &lt;em&gt;compose&lt;/em&gt; to form complex queries in ways that Git can’t express natively.&lt;/p&gt;

&lt;p&gt;In &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;git log&lt;/code&gt;, you could write this to filter commits by a certain author:&lt;/p&gt;

&lt;div class=&quot;language-sh highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;git log &lt;span class=&quot;nt&quot;&gt;--author&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;Foo&quot;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;But negating this pattern is quite difficult; see Stack Overflow question &lt;a href=&quot;https://stackoverflow.com/q/6889830/344643&quot;&gt;equivalence of: git log –exclude-author?&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;With revsets, the same search can be straightforwardly negated with &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;not&lt;/code&gt;:&lt;/p&gt;

&lt;div class=&quot;language-sh highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;git query &lt;span class=&quot;s1&quot;&gt;&apos;not(author.name(Foo))&apos;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;It’s easy to add more filters to refine your query. To additionally limit to files which match a certain pattern and commit messages which contain a certain string, you could write this:&lt;/p&gt;

&lt;div class=&quot;language-sh highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;git query &lt;span class=&quot;s1&quot;&gt;&apos;not(author.name(Foo)) &amp;amp; paths.changed(path/to/file) &amp;amp; message(Ticket-123)&apos;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;You can express complicated ad-hoc queries in this way without having to write a custom script.&lt;/p&gt;

&lt;h2 id=&quot;better-graph-view&quot;&gt;Better graph view&lt;/h2&gt;

&lt;p&gt;Git has a graph view available with &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;git log --graph&lt;/code&gt;, which is a useful way to orient yourself in the commit graph. However, it’s somewhat limited in what it can render. There’s no way to filter commits to only those matching a certain condition.&lt;/p&gt;

&lt;p&gt;git-branchless offers a “smartlog” command which attempts to show you only relevant commits. By default, it includes all of your local work up until the main branch, but not other people’s commits. Mine looks like this right now:&lt;/p&gt;

&lt;figure class=&quot;figure&quot;&gt;
        &lt;a href=&quot;/assets/posts/bringing-revsets-to-git/smartlog-default.png&quot;&gt;&lt;img class=&quot;center-image&quot; src=&quot;/assets/posts/bringing-revsets-to-git/smartlog-default.png&quot; alt=&quot;Image of the smartlog view with a few draft commits and branches.&quot; title=&quot;Image of the smartlog view with a few draft commits and branches.&quot; /&gt;&lt;/a&gt;
        &lt;figcaption class=&quot;caption&quot;&gt;&lt;p&gt;Image of the smartlog view with a few draft commits and branches.&lt;/p&gt;
&lt;/figcaption&gt;
      &lt;/figure&gt;

&lt;p&gt;But you can also filter commits using revsets. To show only my draft work which touches the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;git-branchless-lib/src/git&lt;/code&gt; directory, I can issue this command:&lt;/p&gt;

&lt;figure class=&quot;figure&quot;&gt;
        &lt;a href=&quot;/assets/posts/bringing-revsets-to-git/smartlog-with-omitted-commits.png&quot;&gt;&lt;img class=&quot;center-image&quot; src=&quot;/assets/posts/bringing-revsets-to-git/smartlog-with-omitted-commits.png&quot; alt=&quot;Image of the smartlog view as before, but with only two draft commits visible (excluding those on the main branch).&quot; title=&quot;Image of the smartlog view as before, but with only two draft commits visible (excluding those on the main branch).&quot; /&gt;&lt;/a&gt;
        &lt;figcaption class=&quot;caption&quot;&gt;&lt;p&gt;Image of the smartlog view as before, but with only two draft commits visible (excluding those on the main branch).&lt;/p&gt;
&lt;/figcaption&gt;
      &lt;/figure&gt;

&lt;p&gt;Another common use-case might be to render the relative topology of branches in just this stack:&lt;/p&gt;

&lt;figure class=&quot;figure&quot;&gt;
        &lt;a href=&quot;/assets/posts/bringing-revsets-to-git/smartlog-branch-topology.png&quot;&gt;&lt;img class=&quot;center-image&quot; src=&quot;/assets/posts/bringing-revsets-to-git/smartlog-branch-topology.png&quot; alt=&quot;Image of a different smartlog view as before, showing branch-1 and branch-3 with an omitted commit between them.&quot; title=&quot;Image of a different smartlog view as before, showing branch-1 and branch-3 with an omitted commit between them.&quot; /&gt;&lt;/a&gt;
        &lt;figcaption class=&quot;caption&quot;&gt;&lt;p&gt;Image of a different smartlog view as before, showing branch-1 and branch-3 with an omitted commit between them.&lt;/p&gt;
&lt;/figcaption&gt;
      &lt;/figure&gt;

&lt;p&gt;You can also render commits which have already been checked into the main branch, if so desired.&lt;/p&gt;

&lt;h2 id=&quot;better-rebasing&quot;&gt;Better rebasing&lt;/h2&gt;

&lt;p&gt;Not only can you render the commit graph with revsets, but you can also modify it. Revsets are quite useful when used with “patch-stack” workflows, such as those used for the Git and Linux projects, or at certain tech companies practicing &lt;a href=&quot;https://trunkbaseddevelopment.com/&quot;&gt;trunk-based development&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;For example, suppose you have some refactoring changes to the file &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;foo&lt;/code&gt; on your current branch, and you want to separate them into a new branch for review:&lt;/p&gt;

&lt;figure class=&quot;figure&quot;&gt;
        &lt;a href=&quot;/assets/posts/bringing-revsets-to-git/drawn-smartlog.png&quot;&gt;&lt;img class=&quot;center-image&quot; src=&quot;/assets/posts/bringing-revsets-to-git/drawn-smartlog.png&quot; alt=&quot;Image of a feature branch with four commits. Each commit shows two touched files underneath it.&quot; title=&quot;Image of a feature branch with four commits. Each commit shows two touched files underneath it.&quot; /&gt;&lt;/a&gt;
        &lt;figcaption class=&quot;caption&quot;&gt;&lt;p&gt;Image of a feature branch with four commits. Each commit shows two touched files underneath it.&lt;/p&gt;
&lt;/figcaption&gt;
      &lt;/figure&gt;

&lt;p&gt;You can use revsets to select just the commits touching &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;foo&lt;/code&gt; in the current branch:&lt;/p&gt;

&lt;figure class=&quot;figure&quot;&gt;
        &lt;a href=&quot;/assets/posts/bringing-revsets-to-git/drawn-smartlog-filtered-commits.png&quot;&gt;&lt;img class=&quot;center-image&quot; src=&quot;/assets/posts/bringing-revsets-to-git/drawn-smartlog-filtered-commits.png&quot; alt=&quot;Image of the same feature branch as before, but with the first and third commits outlined in red and the touched file &amp;apos;foo&amp;apos; in red.&quot; title=&quot;Image of the same feature branch as before, but with the first and third commits outlined in red and the touched file &amp;apos;foo&amp;apos; in red.&quot; /&gt;&lt;/a&gt;
        &lt;figcaption class=&quot;caption&quot;&gt;&lt;p&gt;Image of the same feature branch as before, but with the first and third commits outlined in red and the touched file &amp;#8216;foo&amp;#8217; in red.&lt;/p&gt;
&lt;/figcaption&gt;
      &lt;/figure&gt;

&lt;p&gt;Then use &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;git move&lt;/code&gt; to pull them out:&lt;/p&gt;

&lt;div class=&quot;language-sh highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;git move &lt;span class=&quot;nt&quot;&gt;--exact&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&apos;stack() &amp;amp; paths.changed(foo)&apos;&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;--dest&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&apos;main&apos;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;figure class=&quot;figure&quot;&gt;
        &lt;a href=&quot;/assets/posts/bringing-revsets-to-git/drawn-smartlog-extract-commits.png&quot;&gt;&lt;img class=&quot;center-image&quot; src=&quot;/assets/posts/bringing-revsets-to-git/drawn-smartlog-extract-commits.png&quot; alt=&quot;Image of the same feature branch as before, but the first and third commits are shown to be missing from the original feature branch, with dotted outlines indicating their former positions. They have been moved to a new feature branch, still preserving their relative order.&quot; title=&quot;Image of the same feature branch as before, but the first and third commits are shown to be missing from the original feature branch, with dotted outlines indicating their former positions. They have been moved to a new feature branch, still preserving their relative order.&quot; /&gt;&lt;/a&gt;
        &lt;figcaption class=&quot;caption&quot;&gt;&lt;p&gt;Image of the same feature branch as before, but the first and third commits are shown to be missing from the original feature branch, with dotted outlines indicating their former positions. They have been moved to a new feature branch, still preserving their relative order.&lt;/p&gt;
&lt;/figcaption&gt;
      &lt;/figure&gt;

&lt;p&gt;If you want to reorder the commits so that they’re at the base of the current branch, you can just add &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;--insert&lt;/code&gt;:&lt;/p&gt;

&lt;div class=&quot;language-sh highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;git move &lt;span class=&quot;nt&quot;&gt;--exact&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&apos;stack() &amp;amp; paths.changed(foo)&apos;&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;--dest&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&apos;main&apos;&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;--insert&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;figure class=&quot;figure&quot;&gt;
        &lt;a href=&quot;/assets/posts/bringing-revsets-to-git/drawn-smartlog-reordered-commits.png&quot;&gt;&lt;img class=&quot;center-image&quot; src=&quot;/assets/posts/bringing-revsets-to-git/drawn-smartlog-reordered-commits.png&quot; alt=&quot;Image of the same feature branch as before, but the first and third commits are shown to be missing from their original positions in the feature branch, with dotted outlines indicating their former positions. They have been moved to the beginning of that same feature branch, still preserving their relative order, now before the second and fourth commits, also preserving their relative order.&quot; title=&quot;Image of the same feature branch as before, but the first and third commits are shown to be missing from their original positions in the feature branch, with dotted outlines indicating their former positions. They have been moved to the beginning of that same feature branch, still preserving their relative order, now before the second and fourth commits, also preserving their relative order.&quot; /&gt;&lt;/a&gt;
        &lt;figcaption class=&quot;caption&quot;&gt;&lt;p&gt;Image of the same feature branch as before, but the first and third commits are shown to be missing from their original positions in the feature branch, with dotted outlines indicating their former positions. They have been moved to the beginning of that same feature branch, still preserving their relative order, now before the second and fourth commits, also preserving their relative order.&lt;/p&gt;
&lt;/figcaption&gt;
      &lt;/figure&gt;

&lt;p&gt;Of course, you can use a number of different predicates to specify the commits to move. See the full &lt;a href=&quot;https://github.com/arxanas/git-branchless/wiki/Reference:-Revsets&quot;&gt;revset reference&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&quot;better-testing&quot;&gt;Better testing&lt;/h2&gt;

&lt;p&gt;You can use revsets with git-branchless’s &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;git test&lt;/code&gt; command to help you run (or re-run) tests on various commits. For example, to run &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;pytest&lt;/code&gt; on all of your branches in parallel and cache the results, you can run:&lt;/p&gt;

&lt;div class=&quot;language-sh highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;git &lt;span class=&quot;nb&quot;&gt;test &lt;/span&gt;run &lt;span class=&quot;nt&quot;&gt;--exec&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&apos;pytest&apos;&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;--jobs&lt;/span&gt; 4 &lt;span class=&quot;s1&quot;&gt;&apos;branches()&apos;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;You can also use revsets to aid the investigation of a bug with &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;git test&lt;/code&gt;. If you know that a bug was introduced between commits A and B, and has to be in a commit touching file &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;foo&lt;/code&gt;, then you can use &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;git test&lt;/code&gt; like this to find the first commit which introduced the bug:&lt;/p&gt;

&lt;div class=&quot;language-sh highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;git &lt;span class=&quot;nb&quot;&gt;test &lt;/span&gt;run &lt;span class=&quot;nt&quot;&gt;--exec&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&apos;cargo test&apos;&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&apos;A:B &amp;amp; paths.changed(foo)&apos;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;This can be an easy way to skip commits which you know aren’t relevant to the change.&lt;/p&gt;

&lt;aside class=&quot;aside&quot; id=&quot;versus-git-bisect&quot;&gt;
          &lt;header class=&quot;aside-header&quot;&gt;&lt;a href=&quot;#versus-git-bisect&quot;&gt;Versus git bisect&lt;/a&gt;&lt;/header&gt;
          &lt;div class=&quot;aside-contents&quot;&gt;&lt;p&gt;You can use &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;git bisect&lt;/code&gt; and filter by paths, of course, but it may be more tedious. Note that, unlike &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;git bisect&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;git test&lt;/code&gt; currently conducts a linear search, so it’s not the best choice for all cases. This will hopefully change in the future.&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;git test&lt;/code&gt; has several features which &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;git bisect&lt;/code&gt; doesn’t offer, such as parallel testing, out-of-tree testing, and caching of test results.&lt;/p&gt;
&lt;/div&gt;
        &lt;/aside&gt;

&lt;aside class=&quot;aside&quot; id=&quot;caching-test-results&quot;&gt;
          &lt;header class=&quot;aside-header&quot;&gt;&lt;a href=&quot;#caching-test-results&quot;&gt;Caching test results&lt;/a&gt;&lt;/header&gt;
          &lt;div class=&quot;aside-contents&quot;&gt;&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;git test&lt;/code&gt; will cache the results of the test command, so if you decide to expand the search set later, you don’t have to re-run the test command on commits you’ve already tested.&lt;/p&gt;
&lt;/div&gt;
        &lt;/aside&gt;
&lt;h2 id=&quot;prior-work&quot;&gt;Prior work&lt;/h2&gt;

&lt;p&gt;This isn’t the first introduction of revsets to version control. Prior work:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Of course, Mercurial itself introduced revsets. See the documentation here: &lt;a href=&quot;https://www.mercurial-scm.org/repo/hg/help/revsets&quot;&gt;https://www.mercurial-scm.org/repo/hg/help/revsets&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/quark-zju/gitrevset&quot;&gt;https://github.com/quark-zju/gitrevset&lt;/a&gt;: the immediate predecessor of this work. git-branchless uses the same back-end “segmented changelog” library (from &lt;a href=&quot;https://github.com/facebookexperimental/eden&quot;&gt;Sapling SCM&lt;/a&gt;, then called Eden SCM) to manage the commit graph. The advantage of using revsets with git-branchless is that it integrates with several other commands in the git-branchless suite of tools.&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://sapling-scm.com/&quot;&gt;https://sapling-scm.com/&lt;/a&gt;: also an immediate predecessor of this work, as it originally published the segmented changelog library which &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;gitrevset&lt;/code&gt; and git-branchless use. git-branchless was inspired by Sapling’s design, and has similar but non-overlapping functionality. See &lt;a href=&quot;https://github.com/arxanas/git-branchless/discussions/654&quot;&gt;https://github.com/arxanas/git-branchless/discussions/654&lt;/a&gt; for more details.&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/martinvonz/jj&quot;&gt;https://github.com/martinvonz/jj&lt;/a&gt;: Jujutsu is a Git-compatible VCS which also offers revsets. git-branchless and jj have similar but non-overlapping functionality. It’s worth checking out if you want to use a more principled version control system but still seamlessly interoperate with Git repositories. I expect git-branchless’s unique features to make their way into Jujutsu over time.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;related-posts&quot;&gt;Related posts&lt;/h2&gt;

&lt;p&gt;The following are hand-curated posts which you might find interesting.&lt;/p&gt;

&lt;table class=&quot;related-posts&quot;&gt;
&lt;thead&gt;
  &lt;tr&gt;
    &lt;th&gt;Date&lt;/th&gt;
    &lt;th&gt;&lt;/th&gt;
    &lt;th&gt;Title&lt;/th&gt;
  &lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;

  &lt;tr&gt;
    &lt;td&gt;19&amp;nbsp;Jun&amp;nbsp;2021&lt;/td&gt;
    &lt;td class=&quot;this-post&quot;&gt;
      
      &lt;/td&gt;
    &lt;td&gt;&lt;a href=&quot;/git-undo/&quot;&gt;git undo: We can do better&lt;/a&gt;
    &lt;/td&gt;
  &lt;/tr&gt;

  &lt;tr&gt;
    &lt;td&gt;12&amp;nbsp;Oct&amp;nbsp;2021&lt;/td&gt;
    &lt;td class=&quot;this-post&quot;&gt;
      
      &lt;/td&gt;
    &lt;td&gt;&lt;a href=&quot;/in-memory-rebases/&quot;&gt;Lightning-fast rebases with git-move&lt;/a&gt;
    &lt;/td&gt;
  &lt;/tr&gt;

  &lt;tr&gt;
    &lt;td&gt;19&amp;nbsp;Oct&amp;nbsp;2022&lt;/td&gt;
    &lt;td class=&quot;this-post&quot;&gt;
      
      &lt;/td&gt;
    &lt;td&gt;&lt;a href=&quot;/build-aware-sparse-checkouts/&quot;&gt;Build-aware sparse checkouts&lt;/a&gt;
    &lt;/td&gt;
  &lt;/tr&gt;

  &lt;tr&gt;
    &lt;td&gt;16&amp;nbsp;Nov&amp;nbsp;2022&lt;/td&gt;
    &lt;td class=&quot;this-post&quot;&gt;
      
      (this&amp;nbsp;post)
      
      &lt;/td&gt;
    &lt;td&gt;&lt;a href=&quot;/bringing-revsets-to-git/&quot;&gt;Bringing revsets to Git&lt;/a&gt;
    &lt;/td&gt;
  &lt;/tr&gt;

  &lt;tr&gt;
    &lt;td&gt;05&amp;nbsp;Jan&amp;nbsp;2023&lt;/td&gt;
    &lt;td class=&quot;this-post&quot;&gt;
      
      &lt;/td&gt;
    &lt;td&gt;&lt;a href=&quot;/git-ui-features/&quot;&gt;Where are my Git UI features from the future?&lt;/a&gt;
    &lt;/td&gt;
  &lt;/tr&gt;

&lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;Want to see more of my posts? Follow me &lt;a href=&quot;https://twitter.com/arxanas&quot;&gt;on Twitter&lt;/a&gt; or subscribe &lt;a href=&quot;/feed.xml&quot;&gt;via RSS&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&quot;comments&quot;&gt;Comments&lt;/h2&gt;

&lt;ul&gt;

&lt;li&gt;&lt;a class=&quot;icon-hacker-news&quot; href=&quot;https://news.ycombinator.com/item?id=33641952 &quot;&gt;Discussion on Hacker News&lt;/a&gt;&lt;/li&gt;


&lt;li&gt;&lt;a class=&quot;icon-lobsters&quot; href=&quot;https://lobste.rs/s/4lp2pz/bringing_revsets_git &quot;&gt;Discussion on Lobsters&lt;/a&gt;&lt;/li&gt;


&lt;li&gt;&lt;a class=&quot;icon-reddit&quot; href=&quot;https://www.reddit.com/r/programming/comments/yxvoy1/bringing_revsets_to_git/ &quot;&gt;Discussion on Reddit&lt;/a&gt;&lt;/li&gt;

&lt;/ul&gt;

&lt;script type=&quot;text/javascript&quot; src=&quot;/scripts/github-comment-links.js&quot;&gt;&lt;/script&gt;

&lt;div id=&quot;disqus_thread&quot;&gt;&lt;/div&gt;
&lt;script&gt;

/**
 *  RECOMMENDED CONFIGURATION VARIABLES: EDIT AND UNCOMMENT THE SECTION BELOW TO INSERT DYNAMIC VALUES FROM YOUR PLATFORM OR CMS.
 *  LEARN WHY DEFINING THESE VARIABLES IS IMPORTANT: https://disqus.com/admin/universalcode/#configuration-variables */
var disqus_config = function () {
    this.page.url = &quot;https://blog.waleedkhan.name/bringing-revsets-to-git/&quot;;
    this.page.identifier = &quot;bringing-revsets-to-git/&quot;;
};

(function() { // DON&apos;T EDIT BELOW THIS LINE
    var d = document, s = d.createElement(&apos;script&apos;);
    s.src = &apos;//waleedkhan-name.disqus.com/embed.js&apos;;
    s.setAttribute(&apos;data-timestamp&apos;, +new Date());
    (d.head || d.body).appendChild(s);
})();
&lt;/script&gt;

&lt;noscript&gt;Please enable JavaScript to view the &lt;a href=&quot;https://disqus.com/?ref_noscript&quot;&gt;comments powered by Disqus.&lt;/a&gt;&lt;/noscript&gt;

</description>
        <pubDate>Wed, 16 Nov 2022 00:00:00 -0600</pubDate>
        <link>https://blog.waleedkhan.name/bringing-revsets-to-git/</link>
        <guid isPermaLink="true">https://blog.waleedkhan.name/bringing-revsets-to-git/</guid>
        
        <category>git</category>
        
        
      </item>
    
  </channel>
</rss>
